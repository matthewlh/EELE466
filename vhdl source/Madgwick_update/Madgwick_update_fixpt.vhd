-- -------------------------------------------------------------
-- 

-- File Name: C:\Users\z68j959\Documents\GitHub\EELE466\hdl_coder_Madgwick_update\codegen\Madgwick_update\hdlsrc\Madgwick_update_fixpt.vhd
-- Created: 2015-03-31 13:34:25
-- 
-- Generated by MATLAB 8.3, MATLAB Coder 2.6 and HDL Coder 3.4
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 0.25
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ceout         1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- q0                            ceout         1
-- q1                            ceout         1
-- q2                            ceout         1
-- q3                            ceout         1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Madgwick_update_fixpt
-- Source Path: Madgwick_update_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Madgwick_update_fixpt_pac.ALL;

ENTITY Madgwick_update_fixpt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clkenable                         :   IN    std_logic;
        q01                               :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
        q11                               :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
        q21                               :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
        q31                               :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
        qdot11                            :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En7
        qdot21                            :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En7
        qdot31                            :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En7
        qdot41                            :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En7
        s0                                :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14_En14
        s1                                :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14_En14
        s2                                :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14_En14
        s3                                :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14_En14
        beta                              :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14_En17
        sampletime                        :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14_En22
        ceout                             :   OUT   std_logic;
        q0                                :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
        q1                                :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
        q2                                :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En12
        q3                                :   OUT   std_logic_vector(13 DOWNTO 0)  -- sfix14_En12
        );
END Madgwick_update_fixpt;


ARCHITECTURE rtl OF Madgwick_update_fixpt IS

  -- Component Declarations
  COMPONENT Madgwick_update_fixpt_enb_by
    PORT( clk_1                           :   IN    std_logic;
          reset_1                         :   IN    std_logic;
          clkenable_1                     :   IN    std_logic;
          clkenable_2                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Madgwick_update_fixpt_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clkenable                       :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_1_1                       :   OUT   std_logic;
          enb_1_4_0                       :   OUT   std_logic;
          enb_1_4_1                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT mux1_serializer
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector14(0 TO 3);  -- ufix14_En17 [4]
          out0                            :   OUT   std_logic_vector(13 DOWNTO 0)  -- ufix14_En17
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector14(0 TO 3);  -- ufix14_En14 [4]
          out0                            :   OUT   std_logic_vector(13 DOWNTO 0)  -- ufix14_En14
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(27 DOWNTO 0);  -- ufix28_En31
          out0                            :   OUT   vector_of_std_logic_vector28(0 TO 3)  -- ufix28_En31 [4]
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector14(0 TO 3);  -- sfix14_En7 [4]
          out0                            :   OUT   std_logic_vector(13 DOWNTO 0)  -- sfix14_En7
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector14(0 TO 3);  -- ufix14_En22 [4]
          out0                            :   OUT   std_logic_vector(13 DOWNTO 0)  -- ufix14_En22
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(27 DOWNTO 0);  -- sfix28_En29
          out0                            :   OUT   vector_of_std_logic_vector28(0 TO 3)  -- sfix28_En29 [4]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Madgwick_update_fixpt_enb_by
    USE ENTITY work.Madgwick_update_fixpt_enb_by(rtl);

  FOR ALL : Madgwick_update_fixpt_tc
    USE ENTITY work.Madgwick_update_fixpt_tc(rtl);

  FOR ALL : mux1_serializer
    USE ENTITY work.mux1_serializer(rtl);

  FOR ALL : mux1_serializer_block
    USE ENTITY work.mux1_serializer_block(rtl);

  FOR ALL : alpha0_deserializer
    USE ENTITY work.alpha0_deserializer(rtl);

  FOR ALL : mux1_serializer_block1
    USE ENTITY work.mux1_serializer_block1(rtl);

  FOR ALL : mux1_serializer_block2
    USE ENTITY work.mux1_serializer_block2(rtl);

  FOR ALL : alpha0_deserializer_block
    USE ENTITY work.alpha0_deserializer_block(rtl);

  -- Signals
  SIGNAL enb_1_4_1                        : std_logic;
  SIGNAL enb_1_1_1                        : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_4_0                        : std_logic;
  SIGNAL q0_1_regout                      : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL q0_1_regout_1                    : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL q0_1_regout_2                    : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL q0_1_regout_3                    : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL clkenable_1                      : std_logic;
  SIGNAL clkenable_regout                 : std_logic;
  SIGNAL clkenable_regout_1               : std_logic;
  SIGNAL clkenable_regout_2               : std_logic;
  SIGNAL clkenable_regout_3               : std_logic;
  SIGNAL q0_1                             : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL tmp                              : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL qDot1_1_regout                   : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL qDot1_1_regout_1                 : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL qDot1_1_regout_2                 : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL qDot1_1_regout_3                 : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL qDot1_1                          : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL beta_regout                      : unsigned(13 DOWNTO 0);  -- ufix14_En17
  SIGNAL beta_regout_1                    : unsigned(13 DOWNTO 0);  -- ufix14_En17
  SIGNAL beta_regout_2                    : unsigned(13 DOWNTO 0);  -- ufix14_En17
  SIGNAL beta_regout_3                    : unsigned(13 DOWNTO 0);  -- ufix14_En17
  SIGNAL beta_1                           : unsigned(13 DOWNTO 0);  -- ufix14_En17
  SIGNAL c0_serial_0                      : vector_of_unsigned14(0 TO 3);  -- ufix14_En17 [4]
  SIGNAL c0_serial_0_1                    : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL s0_regout                        : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL s0_regout_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL s0_regout_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL s0_regout_3                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL s0_1                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL s1_regout                        : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL s1_regout_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL s1_regout_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL s1_regout_3                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL s1_1                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL s2_regout                        : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL s2_regout_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL s2_regout_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL s2_regout_3                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL s2_1                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL s3_regout                        : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL s3_regout_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL s3_regout_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL s3_regout_3                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL s3_1                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL c0_serial_1                      : vector_of_unsigned14(0 TO 3);  -- ufix14_En14 [4]
  SIGNAL c0_serial_1_1                    : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL beta_2                           : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL beta_unsigned                    : unsigned(13 DOWNTO 0);  -- ufix14_En17
  SIGNAL s0_2                             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL s0_unsigned                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_1                            : unsigned(27 DOWNTO 0);  -- ufix28_En31
  SIGNAL c0_serialOut_0                   : vector_of_std_logic_vector28(0 TO 3);  -- ufix28 [4]
  SIGNAL qDot2_1_regout                   : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL qDot2_1_regout_1                 : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL qDot2_1_regout_2                 : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL qDot2_1_regout_3                 : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL qDot2_1                          : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL qDot3_1_regout                   : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL qDot3_1_regout_1                 : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL qDot3_1_regout_2                 : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL qDot3_1_regout_3                 : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL qDot3_1                          : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL qDot4_1_regout                   : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL qDot4_1_regout_1                 : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL qDot4_1_regout_2                 : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL qDot4_1_regout_3                 : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL qDot4_1                          : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL qDot1_1_1                        : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL tmp_2                            : unsigned(27 DOWNTO 0);  -- ufix28_En31
  SIGNAL qDot1                            : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL p27qDot1_sub_cast                : signed(38 DOWNTO 0);  -- sfix39_En31
  SIGNAL p27qDot1_sub_cast_1              : signed(38 DOWNTO 0);  -- sfix39_En31
  SIGNAL p27qDot1_sub_temp                : signed(38 DOWNTO 0);  -- sfix39_En31
  SIGNAL qDot2_1_1                        : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL tmp_3                            : unsigned(27 DOWNTO 0);  -- ufix28_En31
  SIGNAL qDot2                            : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL p26qDot2_sub_cast                : signed(38 DOWNTO 0);  -- sfix39_En31
  SIGNAL p26qDot2_sub_cast_1              : signed(38 DOWNTO 0);  -- sfix39_En31
  SIGNAL p26qDot2_sub_temp                : signed(38 DOWNTO 0);  -- sfix39_En31
  SIGNAL qDot3_1_1                        : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL tmp_4                            : unsigned(27 DOWNTO 0);  -- ufix28_En31
  SIGNAL qDot3                            : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL p25qDot3_sub_cast                : signed(38 DOWNTO 0);  -- sfix39_En31
  SIGNAL p25qDot3_sub_cast_1              : signed(38 DOWNTO 0);  -- sfix39_En31
  SIGNAL p25qDot3_sub_temp                : signed(38 DOWNTO 0);  -- sfix39_En31
  SIGNAL qDot4_1_1                        : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL tmp_5                            : unsigned(27 DOWNTO 0);  -- ufix28_En31
  SIGNAL qDot4                            : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL p24qDot4_sub_cast                : signed(38 DOWNTO 0);  -- sfix39_En31
  SIGNAL p24qDot4_sub_cast_1              : signed(38 DOWNTO 0);  -- sfix39_En31
  SIGNAL p24qDot4_sub_temp                : signed(38 DOWNTO 0);  -- sfix39_En31
  SIGNAL c0_serial_0_2                    : vector_of_signed14(0 TO 3);  -- sfix14_En7 [4]
  SIGNAL c0_serial_0_3                    : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL sampleTime_regout                : unsigned(13 DOWNTO 0);  -- ufix14_En22
  SIGNAL sampleTime_regout_1              : unsigned(13 DOWNTO 0);  -- ufix14_En22
  SIGNAL sampleTime_regout_2              : unsigned(13 DOWNTO 0);  -- ufix14_En22
  SIGNAL sampleTime_regout_3              : unsigned(13 DOWNTO 0);  -- ufix14_En22
  SIGNAL sampleTime_1                     : unsigned(13 DOWNTO 0);  -- ufix14_En22
  SIGNAL sampleTime_2                     : unsigned(13 DOWNTO 0);  -- ufix14_En22
  SIGNAL c0_serial_1_2                    : vector_of_unsigned14(0 TO 3);  -- ufix14_En22 [4]
  SIGNAL c0_serial_1_3                    : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL qDot1_2                          : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL qDot1_signed                     : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL sampleTime_3                     : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL sampleTime_unsigned              : unsigned(13 DOWNTO 0);  -- ufix14_En22
  SIGNAL multiplier_cast                  : signed(14 DOWNTO 0);  -- sfix15_En22
  SIGNAL multiplier_mul_temp              : signed(28 DOWNTO 0);  -- sfix29_En29
  SIGNAL tmp_6                            : signed(27 DOWNTO 0);  -- sfix28_En29
  SIGNAL c0_serialOut_0_1                 : vector_of_std_logic_vector28(0 TO 3);  -- ufix28 [4]
  SIGNAL delayMatch_regrsvd               : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL tmp_7                            : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL tmp_8                            : signed(27 DOWNTO 0);  -- sfix28_En29
  SIGNAL tmp_9                            : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL tmp_10                           : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL q0_2                             : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL q1_1_regout                      : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL q1_1_regout_1                    : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL q1_1_regout_2                    : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL q1_1_regout_3                    : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL q1_1                             : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL tmp_11                           : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL delayMatch_regrsvd_1             : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL tmp_12                           : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL tmp_13                           : signed(27 DOWNTO 0);  -- sfix28_En29
  SIGNAL tmp_14                           : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL tmp_15                           : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL q1_2                             : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL q2_1_regout                      : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL q2_1_regout_1                    : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL q2_1_regout_2                    : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL q2_1_regout_3                    : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL q2_1                             : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL tmp_16                           : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL delayMatch_regrsvd_2             : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL tmp_17                           : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL tmp_18                           : signed(27 DOWNTO 0);  -- sfix28_En29
  SIGNAL tmp_19                           : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL tmp_20                           : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL q2_2                             : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL q3_1_regout                      : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL q3_1_regout_1                    : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL q3_1_regout_2                    : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL q3_1_regout_3                    : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL q3_1                             : signed(13 DOWNTO 0);  -- sfix14_En12
  SIGNAL tmp_21                           : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL delayMatch_regrsvd_3             : vector_of_signed32(0 TO 1);  -- sfix32 [2]
  SIGNAL tmp_22                           : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL tmp_23                           : signed(27 DOWNTO 0);  -- sfix28_En29
  SIGNAL tmp_24                           : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL tmp_25                           : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL q3_2                             : signed(13 DOWNTO 0);  -- sfix14_En12

BEGIN
  UMadgwick_update_fixpt_enb_b : Madgwick_update_fixpt_enb_by
    PORT MAP( clk_1 => clk,
              reset_1 => reset,
              clkenable_1 => clkenable,
              clkenable_2 => clkenable_1
              );

  UMadgwick_update_fixpt_tc_1 : Madgwick_update_fixpt_tc
    PORT MAP( clk => clk,
              reset => reset,
              clkenable => clkenable_regout_3,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              enb_1_4_0 => enb_1_4_0,
              enb_1_4_1 => enb_1_4_1
              );

  Umux1_serializer_1 : mux1_serializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_0_1,  -- ufix14_En17 [4]
              out0 => beta_2  -- ufix14_En17
              );

  Umux1_serializer_2 : mux1_serializer_block
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_1_1,  -- ufix14_En14 [4]
              out0 => s0_2  -- ufix14_En14
              );

  Ualpha0_deserializer_1 : alpha0_deserializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb => enb,
              in0 => std_logic_vector(tmp_1),  -- ufix28_En31
              out0 => c0_serialOut_0  -- ufix28_En31 [4]
              );

  Umux1_serializer_3 : mux1_serializer_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_0_3,  -- sfix14_En7 [4]
              out0 => qDot1_2  -- sfix14_En7
              );

  Umux1_serializer_4 : mux1_serializer_block2
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_1_3,  -- ufix14_En22 [4]
              out0 => sampleTime_3  -- ufix14_En22
              );

  Ualpha0_deserializer_2 : alpha0_deserializer_block
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb => enb,
              in0 => std_logic_vector(tmp_6),  -- sfix28_En29
              out0 => c0_serialOut_0_1  -- sfix28_En29 [4]
              );

  c_c_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q0_1_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q0_1_regout <= signed(q01);
    END IF;
  END PROCESS c_c_process;

  c_c_1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q0_1_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q0_1_regout_1 <= q0_1_regout;
    END IF;
  END PROCESS c_c_1_process;

  c_c_2_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q0_1_regout_2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q0_1_regout_2 <= q0_1_regout_1;
    END IF;
  END PROCESS c_c_2_process;

  c_c_3_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q0_1_regout_3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q0_1_regout_3 <= q0_1_regout_2;
    END IF;
  END PROCESS c_c_3_process;

  c_c_4_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      clkenable_regout <= '0';
    ELSIF clk'event AND clk = '1' THEN
      clkenable_regout <= clkenable_1;
    END IF;
  END PROCESS c_c_4_process;

  c_c_5_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      clkenable_regout_1 <= '0';
    ELSIF clk'event AND clk = '1' THEN
      clkenable_regout_1 <= clkenable_regout;
    END IF;
  END PROCESS c_c_5_process;

  c_c_6_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      clkenable_regout_2 <= '0';
    ELSIF clk'event AND clk = '1' THEN
      clkenable_regout_2 <= clkenable_regout_1;
    END IF;
  END PROCESS c_c_6_process;

  c_c_7_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      clkenable_regout_3 <= '0';
    ELSIF clk'event AND clk = '1' THEN
      clkenable_regout_3 <= clkenable_regout_2;
    END IF;
  END PROCESS c_c_7_process;

  in_0_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q0_1 <= to_signed(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        q0_1 <= q0_1_regout_3;
      END IF;
    END IF;
  END PROCESS in_0_pipe_process;


  --HDL code generation from MATLAB function: Madgwick_update_fixpt
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  --                                                                          %
  --       Generated by MATLAB 8.3, MATLAB Coder 2.6 and HDL Coder 3.4        %
  --                                                                          %
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  
--'Madgwick_update_fixpt:9' fm = fimath('RoundingMethod', 'Floor', 'OverflowAction', 'Wrap', 'ProductMode', 'FullPrecision', 'MaxProductWordLength', 128, 'SumMode', 'FullPrecision', 'MaxSumWordLength', 128);
  --'Madgwick_update_fixpt:11' q0 = fi(q0_1, 1, 14, 12, fm);
  -- Integrate rate of change of quaternion to yield quaternion
  --'Madgwick_update_fixpt:26' q0 = fi(q0 + qDot1*sampleTime, 1, 14, 12, fm);
  tmp <= resize(q0_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
    '0' & '0' & '0', 32);

  c_c_8_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      qDot1_1_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      qDot1_1_regout <= signed(qdot11);
    END IF;
  END PROCESS c_c_8_process;

  c_c_9_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      qDot1_1_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      qDot1_1_regout_1 <= qDot1_1_regout;
    END IF;
  END PROCESS c_c_9_process;

  c_c_10_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      qDot1_1_regout_2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      qDot1_1_regout_2 <= qDot1_1_regout_1;
    END IF;
  END PROCESS c_c_10_process;

  c_c_11_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      qDot1_1_regout_3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      qDot1_1_regout_3 <= qDot1_1_regout_2;
    END IF;
  END PROCESS c_c_11_process;

  in_4_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      qDot1_1 <= to_signed(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        qDot1_1 <= qDot1_1_regout_3;
      END IF;
    END IF;
  END PROCESS in_4_pipe_process;


  c_c_12_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      beta_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      beta_regout <= unsigned(beta);
    END IF;
  END PROCESS c_c_12_process;

  c_c_13_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      beta_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      beta_regout_1 <= beta_regout;
    END IF;
  END PROCESS c_c_13_process;

  c_c_14_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      beta_regout_2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      beta_regout_2 <= beta_regout_1;
    END IF;
  END PROCESS c_c_14_process;

  c_c_15_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      beta_regout_3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      beta_regout_3 <= beta_regout_2;
    END IF;
  END PROCESS c_c_15_process;

  in_12_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      beta_1 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        beta_1 <= beta_regout_3;
      END IF;
    END IF;
  END PROCESS in_12_pipe_process;


  c0_serial_0(0) <= beta_1;
  c0_serial_0(1) <= beta_1;
  c0_serial_0(2) <= beta_1;
  c0_serial_0(3) <= beta_1;

  outputgen3: FOR kk IN 0 TO 3 GENERATE
    c0_serial_0_1(kk) <= std_logic_vector(c0_serial_0(kk));
  END GENERATE;

  c_c_16_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      s0_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      s0_regout <= unsigned(s0);
    END IF;
  END PROCESS c_c_16_process;

  c_c_17_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      s0_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      s0_regout_1 <= s0_regout;
    END IF;
  END PROCESS c_c_17_process;

  c_c_18_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      s0_regout_2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      s0_regout_2 <= s0_regout_1;
    END IF;
  END PROCESS c_c_18_process;

  c_c_19_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      s0_regout_3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      s0_regout_3 <= s0_regout_2;
    END IF;
  END PROCESS c_c_19_process;

  in_8_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      s0_1 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        s0_1 <= s0_regout_3;
      END IF;
    END IF;
  END PROCESS in_8_pipe_process;


  c_c_20_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      s1_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      s1_regout <= unsigned(s1);
    END IF;
  END PROCESS c_c_20_process;

  c_c_21_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      s1_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      s1_regout_1 <= s1_regout;
    END IF;
  END PROCESS c_c_21_process;

  c_c_22_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      s1_regout_2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      s1_regout_2 <= s1_regout_1;
    END IF;
  END PROCESS c_c_22_process;

  c_c_23_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      s1_regout_3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      s1_regout_3 <= s1_regout_2;
    END IF;
  END PROCESS c_c_23_process;

  in_9_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      s1_1 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        s1_1 <= s1_regout_3;
      END IF;
    END IF;
  END PROCESS in_9_pipe_process;


  c_c_24_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      s2_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      s2_regout <= unsigned(s2);
    END IF;
  END PROCESS c_c_24_process;

  c_c_25_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      s2_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      s2_regout_1 <= s2_regout;
    END IF;
  END PROCESS c_c_25_process;

  c_c_26_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      s2_regout_2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      s2_regout_2 <= s2_regout_1;
    END IF;
  END PROCESS c_c_26_process;

  c_c_27_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      s2_regout_3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      s2_regout_3 <= s2_regout_2;
    END IF;
  END PROCESS c_c_27_process;

  in_10_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      s2_1 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        s2_1 <= s2_regout_3;
      END IF;
    END IF;
  END PROCESS in_10_pipe_process;


  c_c_28_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      s3_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      s3_regout <= unsigned(s3);
    END IF;
  END PROCESS c_c_28_process;

  c_c_29_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      s3_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      s3_regout_1 <= s3_regout;
    END IF;
  END PROCESS c_c_29_process;

  c_c_30_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      s3_regout_2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      s3_regout_2 <= s3_regout_1;
    END IF;
  END PROCESS c_c_30_process;

  c_c_31_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      s3_regout_3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      s3_regout_3 <= s3_regout_2;
    END IF;
  END PROCESS c_c_31_process;

  in_11_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      s3_1 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        s3_1 <= s3_regout_3;
      END IF;
    END IF;
  END PROCESS in_11_pipe_process;


  c0_serial_1(0) <= s0_1;
  c0_serial_1(1) <= s1_1;
  c0_serial_1(2) <= s2_1;
  c0_serial_1(3) <= s3_1;

  outputgen2: FOR kk IN 0 TO 3 GENERATE
    c0_serial_1_1(kk) <= std_logic_vector(c0_serial_1(kk));
  END GENERATE;

  beta_unsigned <= unsigned(beta_2);

  s0_unsigned <= unsigned(s0_2);

  -- Apply feedback step
  -- 
  -- 'Madgwick_update_fixpt:21' qDot1 = fi(qDot1 - beta*s0, 1, 14, 7, fm);
  -- 
  -- 'Madgwick_update_fixpt:22' qDot2 = fi(qDot2 - beta*s1, 1, 14, 7, fm);
  -- 
  -- 'Madgwick_update_fixpt:23' qDot3 = fi(qDot3 - beta*s2, 1, 14, 7, fm);
  -- 
  -- 'Madgwick_update_fixpt:24' qDot4 = fi(qDot4 - beta*s3, 1, 14, 7, fm);
  tmp_1 <= beta_unsigned * s0_unsigned;

  c_c_32_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      qDot2_1_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      qDot2_1_regout <= signed(qdot21);
    END IF;
  END PROCESS c_c_32_process;

  c_c_33_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      qDot2_1_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      qDot2_1_regout_1 <= qDot2_1_regout;
    END IF;
  END PROCESS c_c_33_process;

  c_c_34_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      qDot2_1_regout_2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      qDot2_1_regout_2 <= qDot2_1_regout_1;
    END IF;
  END PROCESS c_c_34_process;

  c_c_35_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      qDot2_1_regout_3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      qDot2_1_regout_3 <= qDot2_1_regout_2;
    END IF;
  END PROCESS c_c_35_process;

  in_5_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      qDot2_1 <= to_signed(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        qDot2_1 <= qDot2_1_regout_3;
      END IF;
    END IF;
  END PROCESS in_5_pipe_process;


  c_c_36_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      qDot3_1_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      qDot3_1_regout <= signed(qdot31);
    END IF;
  END PROCESS c_c_36_process;

  c_c_37_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      qDot3_1_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      qDot3_1_regout_1 <= qDot3_1_regout;
    END IF;
  END PROCESS c_c_37_process;

  c_c_38_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      qDot3_1_regout_2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      qDot3_1_regout_2 <= qDot3_1_regout_1;
    END IF;
  END PROCESS c_c_38_process;

  c_c_39_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      qDot3_1_regout_3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      qDot3_1_regout_3 <= qDot3_1_regout_2;
    END IF;
  END PROCESS c_c_39_process;

  in_6_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      qDot3_1 <= to_signed(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        qDot3_1 <= qDot3_1_regout_3;
      END IF;
    END IF;
  END PROCESS in_6_pipe_process;


  c_c_40_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      qDot4_1_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      qDot4_1_regout <= signed(qdot41);
    END IF;
  END PROCESS c_c_40_process;

  c_c_41_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      qDot4_1_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      qDot4_1_regout_1 <= qDot4_1_regout;
    END IF;
  END PROCESS c_c_41_process;

  c_c_42_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      qDot4_1_regout_2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      qDot4_1_regout_2 <= qDot4_1_regout_1;
    END IF;
  END PROCESS c_c_42_process;

  c_c_43_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      qDot4_1_regout_3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      qDot4_1_regout_3 <= qDot4_1_regout_2;
    END IF;
  END PROCESS c_c_43_process;

  in_7_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      qDot4_1 <= to_signed(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        qDot4_1 <= qDot4_1_regout_3;
      END IF;
    END IF;
  END PROCESS in_7_pipe_process;


  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      qDot1_1_1 <= to_signed(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        qDot1_1_1 <= qDot1_1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  tmp_2 <= unsigned(c0_serialOut_0(0));

  --'Madgwick_update_fixpt:15' qDot1 = fi(qDot1_1, 1, 14, 7, fm);
  p27qDot1_sub_cast <= resize(qDot1_1_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
    '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 39);
  p27qDot1_sub_cast_1 <= signed(resize(tmp_2, 39));
  p27qDot1_sub_temp <= p27qDot1_sub_cast - p27qDot1_sub_cast_1;
  qDot1 <= p27qDot1_sub_temp(37 DOWNTO 24);

  delayMatch_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      qDot2_1_1 <= to_signed(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        qDot2_1_1 <= qDot2_1;
      END IF;
    END IF;
  END PROCESS delayMatch_1_process;


  tmp_3 <= unsigned(c0_serialOut_0(1));

  --'Madgwick_update_fixpt:16' qDot2 = fi(qDot2_1, 1, 14, 7, fm);
  p26qDot2_sub_cast <= resize(qDot2_1_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
    '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 39);
  p26qDot2_sub_cast_1 <= signed(resize(tmp_3, 39));
  p26qDot2_sub_temp <= p26qDot2_sub_cast - p26qDot2_sub_cast_1;
  qDot2 <= p26qDot2_sub_temp(37 DOWNTO 24);

  delayMatch_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      qDot3_1_1 <= to_signed(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        qDot3_1_1 <= qDot3_1;
      END IF;
    END IF;
  END PROCESS delayMatch_2_process;


  tmp_4 <= unsigned(c0_serialOut_0(2));

  --'Madgwick_update_fixpt:17' qDot3 = fi(qDot3_1, 1, 14, 7, fm);
  p25qDot3_sub_cast <= resize(qDot3_1_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
    '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 39);
  p25qDot3_sub_cast_1 <= signed(resize(tmp_4, 39));
  p25qDot3_sub_temp <= p25qDot3_sub_cast - p25qDot3_sub_cast_1;
  qDot3 <= p25qDot3_sub_temp(37 DOWNTO 24);

  delayMatch_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      qDot4_1_1 <= to_signed(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        qDot4_1_1 <= qDot4_1;
      END IF;
    END IF;
  END PROCESS delayMatch_3_process;


  tmp_5 <= unsigned(c0_serialOut_0(3));

  --'Madgwick_update_fixpt:18' qDot4 = fi(qDot4_1, 1, 14, 7, fm);
  p24qDot4_sub_cast <= resize(qDot4_1_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
    '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 39);
  p24qDot4_sub_cast_1 <= signed(resize(tmp_5, 39));
  p24qDot4_sub_temp <= p24qDot4_sub_cast - p24qDot4_sub_cast_1;
  qDot4 <= p24qDot4_sub_temp(37 DOWNTO 24);

  c0_serial_0_2(0) <= qDot1;
  c0_serial_0_2(1) <= qDot2;
  c0_serial_0_2(2) <= qDot3;
  c0_serial_0_2(3) <= qDot4;

  outputgen1: FOR kk IN 0 TO 3 GENERATE
    c0_serial_0_3(kk) <= std_logic_vector(c0_serial_0_2(kk));
  END GENERATE;

  c_c_44_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sampleTime_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      sampleTime_regout <= unsigned(sampletime);
    END IF;
  END PROCESS c_c_44_process;

  c_c_45_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sampleTime_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      sampleTime_regout_1 <= sampleTime_regout;
    END IF;
  END PROCESS c_c_45_process;

  c_c_46_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sampleTime_regout_2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      sampleTime_regout_2 <= sampleTime_regout_1;
    END IF;
  END PROCESS c_c_46_process;

  c_c_47_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sampleTime_regout_3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      sampleTime_regout_3 <= sampleTime_regout_2;
    END IF;
  END PROCESS c_c_47_process;

  in_13_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sampleTime_1 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        sampleTime_1 <= sampleTime_regout_3;
      END IF;
    END IF;
  END PROCESS in_13_pipe_process;


  delayMatch_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sampleTime_2 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        sampleTime_2 <= sampleTime_1;
      END IF;
    END IF;
  END PROCESS delayMatch_4_process;


  c0_serial_1_2(0) <= sampleTime_2;
  c0_serial_1_2(1) <= sampleTime_2;
  c0_serial_1_2(2) <= sampleTime_2;
  c0_serial_1_2(3) <= sampleTime_2;

  outputgen: FOR kk IN 0 TO 3 GENERATE
    c0_serial_1_3(kk) <= std_logic_vector(c0_serial_1_2(kk));
  END GENERATE;

  qDot1_signed <= signed(qDot1_2);

  sampleTime_unsigned <= unsigned(sampleTime_3);

  multiplier_cast <= signed(resize(sampleTime_unsigned, 15));
  multiplier_mul_temp <= qDot1_signed * multiplier_cast;
  tmp_6 <= multiplier_mul_temp(27 DOWNTO 0);

  delayMatch_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd <= (OTHERS => to_signed(0, 32));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd(0) <= tmp;
        delayMatch_regrsvd(1) <= delayMatch_regrsvd(0);
      END IF;
    END IF;
  END PROCESS delayMatch_5_process;

  tmp_7 <= delayMatch_regrsvd(1);

  tmp_8 <= signed(c0_serialOut_0_1(0));

  tmp_9 <= resize(tmp_8, 32);

  tmp_10 <= tmp_7 + tmp_9;

  q0_2 <= tmp_10(30 DOWNTO 17);

  q0 <= std_logic_vector(q0_2);

  c_c_48_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q1_1_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q1_1_regout <= signed(q11);
    END IF;
  END PROCESS c_c_48_process;

  c_c_49_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q1_1_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q1_1_regout_1 <= q1_1_regout;
    END IF;
  END PROCESS c_c_49_process;

  c_c_50_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q1_1_regout_2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q1_1_regout_2 <= q1_1_regout_1;
    END IF;
  END PROCESS c_c_50_process;

  c_c_51_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q1_1_regout_3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q1_1_regout_3 <= q1_1_regout_2;
    END IF;
  END PROCESS c_c_51_process;

  in_1_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q1_1 <= to_signed(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        q1_1 <= q1_1_regout_3;
      END IF;
    END IF;
  END PROCESS in_1_pipe_process;


  --'Madgwick_update_fixpt:12' q1 = fi(q1_1, 1, 14, 12, fm);
  --'Madgwick_update_fixpt:27' q1 = fi(q1 + qDot2*sampleTime, 1, 14, 12, fm);
  tmp_11 <= resize(q1_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
    '0' & '0' & '0', 32);

  delayMatch_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_1 <= (OTHERS => to_signed(0, 32));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_1(0) <= tmp_11;
        delayMatch_regrsvd_1(1) <= delayMatch_regrsvd_1(0);
      END IF;
    END IF;
  END PROCESS delayMatch_6_process;

  tmp_12 <= delayMatch_regrsvd_1(1);

  tmp_13 <= signed(c0_serialOut_0_1(1));

  tmp_14 <= resize(tmp_13, 32);

  tmp_15 <= tmp_12 + tmp_14;

  q1_2 <= tmp_15(30 DOWNTO 17);

  q1 <= std_logic_vector(q1_2);

  c_c_52_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q2_1_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q2_1_regout <= signed(q21);
    END IF;
  END PROCESS c_c_52_process;

  c_c_53_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q2_1_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q2_1_regout_1 <= q2_1_regout;
    END IF;
  END PROCESS c_c_53_process;

  c_c_54_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q2_1_regout_2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q2_1_regout_2 <= q2_1_regout_1;
    END IF;
  END PROCESS c_c_54_process;

  c_c_55_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q2_1_regout_3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q2_1_regout_3 <= q2_1_regout_2;
    END IF;
  END PROCESS c_c_55_process;

  in_2_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q2_1 <= to_signed(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        q2_1 <= q2_1_regout_3;
      END IF;
    END IF;
  END PROCESS in_2_pipe_process;


  --'Madgwick_update_fixpt:13' q2 = fi(q2_1, 1, 14, 12, fm);
  --'Madgwick_update_fixpt:28' q2 = fi(q2 + qDot3*sampleTime, 1, 14, 12, fm);
  tmp_16 <= resize(q2_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
    '0' & '0' & '0', 32);

  delayMatch_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_2 <= (OTHERS => to_signed(0, 32));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_2(0) <= tmp_16;
        delayMatch_regrsvd_2(1) <= delayMatch_regrsvd_2(0);
      END IF;
    END IF;
  END PROCESS delayMatch_7_process;

  tmp_17 <= delayMatch_regrsvd_2(1);

  tmp_18 <= signed(c0_serialOut_0_1(2));

  tmp_19 <= resize(tmp_18, 32);

  tmp_20 <= tmp_17 + tmp_19;

  q2_2 <= tmp_20(30 DOWNTO 17);

  q2 <= std_logic_vector(q2_2);

  c_c_56_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q3_1_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q3_1_regout <= signed(q31);
    END IF;
  END PROCESS c_c_56_process;

  c_c_57_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q3_1_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q3_1_regout_1 <= q3_1_regout;
    END IF;
  END PROCESS c_c_57_process;

  c_c_58_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q3_1_regout_2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q3_1_regout_2 <= q3_1_regout_1;
    END IF;
  END PROCESS c_c_58_process;

  c_c_59_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q3_1_regout_3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q3_1_regout_3 <= q3_1_regout_2;
    END IF;
  END PROCESS c_c_59_process;

  in_3_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q3_1 <= to_signed(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        q3_1 <= q3_1_regout_3;
      END IF;
    END IF;
  END PROCESS in_3_pipe_process;


  --'Madgwick_update_fixpt:14' q3 = fi(q3_1, 1, 14, 12, fm);
  --'Madgwick_update_fixpt:29' q3 = fi(q3 + qDot4*sampleTime, 1, 14, 12, fm);
  tmp_21 <= resize(q3_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
    '0' & '0' & '0', 32);

  delayMatch_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_3 <= (OTHERS => to_signed(0, 32));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_3(0) <= tmp_21;
        delayMatch_regrsvd_3(1) <= delayMatch_regrsvd_3(0);
      END IF;
    END IF;
  END PROCESS delayMatch_8_process;

  tmp_22 <= delayMatch_regrsvd_3(1);

  tmp_23 <= signed(c0_serialOut_0_1(3));

  tmp_24 <= resize(tmp_23, 32);

  tmp_25 <= tmp_22 + tmp_24;

  q3_2 <= tmp_25(30 DOWNTO 17);

  q3 <= std_logic_vector(q3_2);

  ceout <= enb_1_4_1;

END rtl;

