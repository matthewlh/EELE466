-- -------------------------------------------------------------
-- 

-- File Name: C:\Users\w92p177\Documents\GitHub\EELE466\hdl_coder_Madgwick_qDot\codegen\Madgwick_qDot\hdlsrc\Madgwick_qDot_fixpt.vhd
-- Created: 2015-03-30 14:36:26
-- 
-- Generated by MATLAB 8.3, MATLAB Coder 2.6 and HDL Coder 3.4
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 0.5
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ceout         1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- qdot1                         ceout         1
-- qdot2                         ceout         1
-- qdot3                         ceout         1
-- qdot4                         ceout         1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Madgwick_qDot_fixpt
-- Source Path: Madgwick_qDot_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Madgwick_qDot_fixpt_pac.ALL;

ENTITY Madgwick_qDot_fixpt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clkenable                         :   IN    std_logic;
        q0                                :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14_En14
        q1                                :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14_En14
        q2                                :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14_En14
        q3                                :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14_En14
        gx                                :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En7
        gy                                :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En7
        gz                                :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En7
        ceout                             :   OUT   std_logic;
        qdot1                             :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En7
        qdot2                             :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En7
        qdot3                             :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En7
        qdot4                             :   OUT   std_logic_vector(13 DOWNTO 0)  -- sfix14_En7
        );
END Madgwick_qDot_fixpt;


ARCHITECTURE rtl OF Madgwick_qDot_fixpt IS

  -- Component Declarations
  COMPONENT Madgwick_qDot_fixpt_enb_bypa
    PORT( clk_1                           :   IN    std_logic;
          reset_1                         :   IN    std_logic;
          clkenable_1                     :   IN    std_logic;
          clkenable_2                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Madgwick_qDot_fixpt_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clkenable                       :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_1_1                       :   OUT   std_logic;
          enb_1_2_0                       :   OUT   std_logic;
          enb_1_2_1                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT mux1_serializer
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector14(0 TO 1);  -- ufix14_En14 [2]
          out0                            :   OUT   std_logic_vector(13 DOWNTO 0)  -- ufix14_En14
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector14(0 TO 1);  -- sfix14_En7 [2]
          out0                            :   OUT   std_logic_vector(13 DOWNTO 0)  -- sfix14_En7
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(27 DOWNTO 0);  -- sfix28_En21
          out0                            :   OUT   vector_of_std_logic_vector28(0 TO 1)  -- sfix28_En21 [2]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Madgwick_qDot_fixpt_enb_bypa
    USE ENTITY work.Madgwick_qDot_fixpt_enb_bypa(rtl);

  FOR ALL : Madgwick_qDot_fixpt_tc
    USE ENTITY work.Madgwick_qDot_fixpt_tc(rtl);

  FOR ALL : mux1_serializer
    USE ENTITY work.mux1_serializer(rtl);

  FOR ALL : mux1_serializer_block
    USE ENTITY work.mux1_serializer_block(rtl);

  FOR ALL : alpha0_deserializer
    USE ENTITY work.alpha0_deserializer(rtl);

  -- Signals
  SIGNAL enb_1_2_1                        : std_logic;
  SIGNAL enb_1_1_1                        : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_2_0                        : std_logic;
  SIGNAL q1_regout                        : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q1_regout_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL clkenable_1                      : std_logic;
  SIGNAL clkenable_regout                 : std_logic;
  SIGNAL clkenable_regout_1               : std_logic;
  SIGNAL q1_1                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp                              : signed(14 DOWNTO 0);  -- sfix15_En14
  SIGNAL p25tmp_cast                      : signed(14 DOWNTO 0);  -- sfix15_En14
  SIGNAL p25tmp_cast_1                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p25tmp_cast_2                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL gx_regout                        : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL gx_regout_1                      : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL gx_1                             : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL tmp_1                            : signed(28 DOWNTO 0);  -- sfix29_En21
  SIGNAL q2_regout                        : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q2_regout_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q2_1                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL c0_serial_0                      : vector_of_unsigned14(0 TO 1);  -- ufix14_En14 [2]
  SIGNAL c0_serial_0_1                    : vector_of_std_logic_vector14(0 TO 1);  -- ufix14 [2]
  SIGNAL gz_regout                        : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL gz_regout_1                      : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL gz_1                             : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL gy_regout                        : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL gy_regout_1                      : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL gy_1                             : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL c0_serial_1                      : vector_of_signed14(0 TO 1);  -- sfix14_En7 [2]
  SIGNAL c0_serial_1_1                    : vector_of_std_logic_vector14(0 TO 1);  -- ufix14 [2]
  SIGNAL q2_2                             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL q2_unsigned                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL gz_2                             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL gz_signed                        : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL multiplier_cast                  : signed(14 DOWNTO 0);  -- sfix15_En14
  SIGNAL multiplier_mul_temp              : signed(28 DOWNTO 0);  -- sfix29_En21
  SIGNAL tmp_2                            : signed(27 DOWNTO 0);  -- sfix28_En21
  SIGNAL c0_serialOut_0                   : vector_of_std_logic_vector28(0 TO 1);  -- ufix28 [2]
  SIGNAL tmp_3                            : signed(28 DOWNTO 0);  -- sfix29_En21
  SIGNAL tmp_4                            : signed(27 DOWNTO 0);  -- sfix28_En21
  SIGNAL q3_regout                        : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q3_regout_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q3_1                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL multiplier_cast_1                : signed(14 DOWNTO 0);  -- sfix15_En14
  SIGNAL multiplier_mul_temp_1            : signed(28 DOWNTO 0);  -- sfix29_En21
  SIGNAL tmp_5                            : signed(27 DOWNTO 0);  -- sfix28_En21
  SIGNAL tmp_6                            : signed(27 DOWNTO 0);  -- sfix28_En21
  SIGNAL qDot1_1                          : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL p18qDot1_sub_cast                : signed(29 DOWNTO 0);  -- sfix30_En21
  SIGNAL p18qDot1_sub_cast_1              : signed(29 DOWNTO 0);  -- sfix30_En21
  SIGNAL p18qDot1_sub_temp                : signed(29 DOWNTO 0);  -- sfix30_En21
  SIGNAL p18qDot1_sub_cast_2              : signed(30 DOWNTO 0);  -- sfix31_En21
  SIGNAL p18qDot1_sub_cast_3              : signed(30 DOWNTO 0);  -- sfix31_En21
  SIGNAL p18qDot1_sub_temp_1              : signed(30 DOWNTO 0);  -- sfix31_En21
  SIGNAL p18qDot1_mul_temp                : signed(45 DOWNTO 0);  -- sfix46_En35
  SIGNAL p18qDot1_cast                    : signed(44 DOWNTO 0);  -- sfix45_En35
  SIGNAL q0_regout                        : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q0_regout_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q0_1                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL c0_serial_0_2                    : vector_of_unsigned14(0 TO 1);  -- ufix14_En14 [2]
  SIGNAL c0_serial_0_3                    : vector_of_std_logic_vector14(0 TO 1);  -- ufix14 [2]
  SIGNAL c0_serial_1_2                    : vector_of_signed14(0 TO 1);  -- sfix14_En7 [2]
  SIGNAL c0_serial_1_3                    : vector_of_std_logic_vector14(0 TO 1);  -- ufix14 [2]
  SIGNAL q0_2                             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL q0_unsigned                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL gx_2                             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL gx_signed                        : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL multiplier_cast_2                : signed(14 DOWNTO 0);  -- sfix15_En14
  SIGNAL multiplier_mul_temp_2            : signed(28 DOWNTO 0);  -- sfix29_En21
  SIGNAL tmp_7                            : signed(27 DOWNTO 0);  -- sfix28_En21
  SIGNAL c0_serialOut_0_1                 : vector_of_std_logic_vector28(0 TO 1);  -- ufix28 [2]
  SIGNAL c0_serial_0_4                    : vector_of_unsigned14(0 TO 1);  -- ufix14_En14 [2]
  SIGNAL c0_serial_0_5                    : vector_of_std_logic_vector14(0 TO 1);  -- ufix14 [2]
  SIGNAL c0_serial_1_4                    : vector_of_signed14(0 TO 1);  -- sfix14_En7 [2]
  SIGNAL c0_serial_1_5                    : vector_of_std_logic_vector14(0 TO 1);  -- ufix14 [2]
  SIGNAL q3_2                             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL q3_unsigned                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL gx_3                             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL gx_signed_1                      : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL multiplier_cast_3                : signed(14 DOWNTO 0);  -- sfix15_En14
  SIGNAL multiplier_mul_temp_3            : signed(28 DOWNTO 0);  -- sfix29_En21
  SIGNAL tmp_8                            : signed(27 DOWNTO 0);  -- sfix28_En21
  SIGNAL c0_serialOut_0_2                 : vector_of_std_logic_vector28(0 TO 1);  -- ufix28 [2]
  SIGNAL tmp_9                            : signed(27 DOWNTO 0);  -- sfix28_En21
  SIGNAL tmp_10                           : signed(28 DOWNTO 0);  -- sfix29_En21
  SIGNAL tmp_11                           : signed(27 DOWNTO 0);  -- sfix28_En21
  SIGNAL tmp_12                           : signed(28 DOWNTO 0);  -- sfix29_En21
  SIGNAL tmp_13                           : signed(28 DOWNTO 0);  -- sfix29_En21
  SIGNAL tmp_14                           : signed(27 DOWNTO 0);  -- sfix28_En21
  SIGNAL qDot2_1                          : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL p17qDot2_sub_cast                : signed(29 DOWNTO 0);  -- sfix30_En21
  SIGNAL p17qDot2_sub_cast_1              : signed(29 DOWNTO 0);  -- sfix30_En21
  SIGNAL p17qDot2_sub_temp                : signed(29 DOWNTO 0);  -- sfix30_En21
  SIGNAL p17qDot2_mul_temp                : signed(44 DOWNTO 0);  -- sfix45_En35
  SIGNAL p17qDot2_cast                    : signed(43 DOWNTO 0);  -- sfix44_En35
  SIGNAL c0_serial_0_6                    : vector_of_unsigned14(0 TO 1);  -- ufix14_En14 [2]
  SIGNAL c0_serial_0_7                    : vector_of_std_logic_vector14(0 TO 1);  -- ufix14 [2]
  SIGNAL c0_serial_1_6                    : vector_of_signed14(0 TO 1);  -- sfix14_En7 [2]
  SIGNAL c0_serial_1_7                    : vector_of_std_logic_vector14(0 TO 1);  -- ufix14 [2]
  SIGNAL q0_3                             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL q0_unsigned_1                    : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL gz_3                             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL gz_signed_1                      : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL multiplier_cast_4                : signed(14 DOWNTO 0);  -- sfix15_En14
  SIGNAL multiplier_mul_temp_4            : signed(28 DOWNTO 0);  -- sfix29_En21
  SIGNAL tmp_15                           : signed(27 DOWNTO 0);  -- sfix28_En21
  SIGNAL c0_serialOut_0_3                 : vector_of_std_logic_vector28(0 TO 1);  -- ufix28 [2]
  SIGNAL c0_serial_0_8                    : vector_of_unsigned14(0 TO 1);  -- ufix14_En14 [2]
  SIGNAL c0_serial_0_9                    : vector_of_std_logic_vector14(0 TO 1);  -- ufix14 [2]
  SIGNAL c0_serial_1_8                    : vector_of_signed14(0 TO 1);  -- sfix14_En7 [2]
  SIGNAL c0_serial_1_9                    : vector_of_std_logic_vector14(0 TO 1);  -- ufix14 [2]
  SIGNAL q1_2                             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL q1_unsigned                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL gz_4                             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL gz_signed_2                      : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL multiplier_cast_5                : signed(14 DOWNTO 0);  -- sfix15_En14
  SIGNAL multiplier_mul_temp_5            : signed(28 DOWNTO 0);  -- sfix29_En21
  SIGNAL tmp_16                           : signed(27 DOWNTO 0);  -- sfix28_En21
  SIGNAL c0_serialOut_0_4                 : vector_of_std_logic_vector28(0 TO 1);  -- ufix28 [2]
  SIGNAL tmp_17                           : signed(27 DOWNTO 0);  -- sfix28_En21
  SIGNAL tmp_18                           : signed(27 DOWNTO 0);  -- sfix28_En21
  SIGNAL tmp_19                           : signed(29 DOWNTO 0);  -- sfix30_En21
  SIGNAL p22tmp_sub_cast                  : signed(28 DOWNTO 0);  -- sfix29_En21
  SIGNAL p22tmp_sub_cast_1                : signed(28 DOWNTO 0);  -- sfix29_En21
  SIGNAL p22tmp_sub_temp                  : signed(28 DOWNTO 0);  -- sfix29_En21
  SIGNAL tmp_20                           : signed(27 DOWNTO 0);  -- sfix28_En21
  SIGNAL tmp_21                           : signed(29 DOWNTO 0);  -- sfix30_En21
  SIGNAL tmp_22                           : signed(29 DOWNTO 0);  -- sfix30_En21
  SIGNAL qDot3_1                          : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL p16qDot3_cast                    : signed(44 DOWNTO 0);  -- sfix45_En35
  SIGNAL p16qDot3_cast_1                  : signed(43 DOWNTO 0);  -- sfix44_En35
  SIGNAL tmp_23                           : signed(27 DOWNTO 0);  -- sfix28_En21
  SIGNAL tmp_24                           : signed(28 DOWNTO 0);  -- sfix29_En21
  SIGNAL tmp_25                           : signed(27 DOWNTO 0);  -- sfix28_En21
  SIGNAL tmp_26                           : signed(28 DOWNTO 0);  -- sfix29_En21
  SIGNAL tmp_27                           : signed(28 DOWNTO 0);  -- sfix29_En21
  SIGNAL tmp_28                           : signed(27 DOWNTO 0);  -- sfix28_En21
  SIGNAL qDot4_1                          : signed(13 DOWNTO 0);  -- sfix14_En7
  SIGNAL p15qDot4_sub_cast                : signed(29 DOWNTO 0);  -- sfix30_En21
  SIGNAL p15qDot4_sub_cast_1              : signed(29 DOWNTO 0);  -- sfix30_En21
  SIGNAL p15qDot4_sub_temp                : signed(29 DOWNTO 0);  -- sfix30_En21
  SIGNAL p15qDot4_mul_temp                : signed(44 DOWNTO 0);  -- sfix45_En35
  SIGNAL p15qDot4_cast                    : signed(43 DOWNTO 0);  -- sfix44_En35

BEGIN
  UMadgwick_qDot_fixpt_enb_byp : Madgwick_qDot_fixpt_enb_bypa
    PORT MAP( clk_1 => clk,
              reset_1 => reset,
              clkenable_1 => clkenable,
              clkenable_2 => clkenable_1
              );

  UMadgwick_qDot_fixpt_tc_1 : Madgwick_qDot_fixpt_tc
    PORT MAP( clk => clk,
              reset => reset,
              clkenable => clkenable_regout_1,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              enb_1_2_0 => enb_1_2_0,
              enb_1_2_1 => enb_1_2_1
              );

  Umux1_serializer_1 : mux1_serializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2_1 => enb_1_2_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_0_1,  -- ufix14_En14 [2]
              out0 => q2_2  -- ufix14_En14
              );

  Umux1_serializer_2 : mux1_serializer_block
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2_1 => enb_1_2_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_1_1,  -- sfix14_En7 [2]
              out0 => gz_2  -- sfix14_En7
              );

  Ualpha0_deserializer_1 : alpha0_deserializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2_1 => enb_1_2_1,
              enb => enb,
              in0 => std_logic_vector(tmp_2),  -- sfix28_En21
              out0 => c0_serialOut_0  -- sfix28_En21 [2]
              );

  Umux1_serializer_3 : mux1_serializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2_1 => enb_1_2_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_0_3,  -- ufix14_En14 [2]
              out0 => q0_2  -- ufix14_En14
              );

  Umux1_serializer_4 : mux1_serializer_block
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2_1 => enb_1_2_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_1_3,  -- sfix14_En7 [2]
              out0 => gx_2  -- sfix14_En7
              );

  Ualpha0_deserializer_2 : alpha0_deserializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2_1 => enb_1_2_1,
              enb => enb,
              in0 => std_logic_vector(tmp_7),  -- sfix28_En21
              out0 => c0_serialOut_0_1  -- sfix28_En21 [2]
              );

  Umux1_serializer_5 : mux1_serializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2_1 => enb_1_2_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_0_5,  -- ufix14_En14 [2]
              out0 => q3_2  -- ufix14_En14
              );

  Umux1_serializer_6 : mux1_serializer_block
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2_1 => enb_1_2_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_1_5,  -- sfix14_En7 [2]
              out0 => gx_3  -- sfix14_En7
              );

  Ualpha0_deserializer_3 : alpha0_deserializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2_1 => enb_1_2_1,
              enb => enb,
              in0 => std_logic_vector(tmp_8),  -- sfix28_En21
              out0 => c0_serialOut_0_2  -- sfix28_En21 [2]
              );

  Umux1_serializer_7 : mux1_serializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2_1 => enb_1_2_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_0_7,  -- ufix14_En14 [2]
              out0 => q0_3  -- ufix14_En14
              );

  Umux1_serializer_8 : mux1_serializer_block
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2_1 => enb_1_2_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_1_7,  -- sfix14_En7 [2]
              out0 => gz_3  -- sfix14_En7
              );

  Ualpha0_deserializer_4 : alpha0_deserializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2_1 => enb_1_2_1,
              enb => enb,
              in0 => std_logic_vector(tmp_15),  -- sfix28_En21
              out0 => c0_serialOut_0_3  -- sfix28_En21 [2]
              );

  Umux1_serializer_9 : mux1_serializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2_1 => enb_1_2_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_0_9,  -- ufix14_En14 [2]
              out0 => q1_2  -- ufix14_En14
              );

  Umux1_serializer_10 : mux1_serializer_block
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2_1 => enb_1_2_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_1_9,  -- sfix14_En7 [2]
              out0 => gz_4  -- sfix14_En7
              );

  Ualpha0_deserializer_5 : alpha0_deserializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2_1 => enb_1_2_1,
              enb => enb,
              in0 => std_logic_vector(tmp_16),  -- sfix28_En21
              out0 => c0_serialOut_0_4  -- sfix28_En21 [2]
              );

  c_c_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q1_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q1_regout <= unsigned(q1);
    END IF;
  END PROCESS c_c_process;

  c_c_1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q1_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q1_regout_1 <= q1_regout;
    END IF;
  END PROCESS c_c_1_process;

  c_c_2_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      clkenable_regout <= '0';
    ELSIF clk'event AND clk = '1' THEN
      clkenable_regout <= clkenable_1;
    END IF;
  END PROCESS c_c_2_process;

  c_c_3_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      clkenable_regout_1 <= '0';
    ELSIF clk'event AND clk = '1' THEN
      clkenable_regout_1 <= clkenable_regout;
    END IF;
  END PROCESS c_c_3_process;

  in_1_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q1_1 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        q1_1 <= q1_regout_1;
      END IF;
    END IF;
  END PROCESS in_1_pipe_process;


  --HDL code generation from MATLAB function: Madgwick_qDot_fixpt
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  --                                                                          %
  --       Generated by MATLAB 8.3, MATLAB Coder 2.6 and HDL Coder 3.4        %
  --                                                                          %
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  
--'Madgwick_qDot_fixpt:9' fm = fimath('RoundingMethod', 'Floor', 'OverflowAction', 'Wrap', 'ProductMode', 'FullPrecision', 'MaxProductWordLength', 128, 'SumMode', 'FullPrecision', 'MaxSumWordLength', 128);
  -- Rate of change of quaternion from gyroscope
  
--'Madgwick_qDot_fixpt:11' qDot1 = fi(fi(0.5, 0, 14, 14, fm)*(fi_signed(fi_signed(fi_uminus(q1)*gx) - q2*gy) - q3*gz), 1, 14, 7, fm);
  --'Madgwick_qDot_fixpt:31' coder.inline( 'always' );
  --'Madgwick_qDot_fixpt:32' if isfi( a )
  --'Madgwick_qDot_fixpt:33' nt = numerictype( a );
  --'Madgwick_qDot_fixpt:34' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  --'Madgwick_qDot_fixpt:35' y = -fi( a, new_nt, fimath( a ) );
  --'Madgwick_qDot_fixpt:19' coder.inline( 'always' );
  --'Madgwick_qDot_fixpt:20' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_qDot_fixpt:24' else
  --'Madgwick_qDot_fixpt:25' y = a;
  --'Madgwick_qDot_fixpt:19' coder.inline( 'always' );
  --'Madgwick_qDot_fixpt:20' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_qDot_fixpt:24' else
  --'Madgwick_qDot_fixpt:25' y = a;
  p25tmp_cast <= signed(resize(q1_1, 15));
  p25tmp_cast_1 <= resize(p25tmp_cast, 16);
  p25tmp_cast_2 <=  - (p25tmp_cast_1);
  tmp <= p25tmp_cast_2(14 DOWNTO 0);

  c_c_4_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      gx_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      gx_regout <= signed(gx);
    END IF;
  END PROCESS c_c_4_process;

  c_c_5_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      gx_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      gx_regout_1 <= gx_regout;
    END IF;
  END PROCESS c_c_5_process;

  in_4_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      gx_1 <= to_signed(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        gx_1 <= gx_regout_1;
      END IF;
    END IF;
  END PROCESS in_4_pipe_process;


  tmp_1 <= tmp * gx_1;

  c_c_6_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q2_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q2_regout <= unsigned(q2);
    END IF;
  END PROCESS c_c_6_process;

  c_c_7_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q2_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q2_regout_1 <= q2_regout;
    END IF;
  END PROCESS c_c_7_process;

  in_2_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q2_1 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        q2_1 <= q2_regout_1;
      END IF;
    END IF;
  END PROCESS in_2_pipe_process;


  c0_serial_0(0) <= q2_1;
  c0_serial_0(1) <= q2_1;

  outputgen9: FOR kk IN 0 TO 1 GENERATE
    c0_serial_0_1(kk) <= std_logic_vector(c0_serial_0(kk));
  END GENERATE;

  c_c_8_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      gz_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      gz_regout <= signed(gz);
    END IF;
  END PROCESS c_c_8_process;

  c_c_9_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      gz_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      gz_regout_1 <= gz_regout;
    END IF;
  END PROCESS c_c_9_process;

  in_6_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      gz_1 <= to_signed(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        gz_1 <= gz_regout_1;
      END IF;
    END IF;
  END PROCESS in_6_pipe_process;


  c_c_10_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      gy_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      gy_regout <= signed(gy);
    END IF;
  END PROCESS c_c_10_process;

  c_c_11_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      gy_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      gy_regout_1 <= gy_regout;
    END IF;
  END PROCESS c_c_11_process;

  in_5_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      gy_1 <= to_signed(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        gy_1 <= gy_regout_1;
      END IF;
    END IF;
  END PROCESS in_5_pipe_process;


  c0_serial_1(0) <= gz_1;
  c0_serial_1(1) <= gy_1;

  outputgen8: FOR kk IN 0 TO 1 GENERATE
    c0_serial_1_1(kk) <= std_logic_vector(c0_serial_1(kk));
  END GENERATE;

  q2_unsigned <= unsigned(q2_2);

  gz_signed <= signed(gz_2);

  multiplier_cast <= signed(resize(q2_unsigned, 15));
  multiplier_mul_temp <= multiplier_cast * gz_signed;
  tmp_2 <= multiplier_mul_temp(27 DOWNTO 0);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_3 <= to_signed(2#00000000000000000000000000000#, 29);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        tmp_3 <= tmp_1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  tmp_4 <= signed(c0_serialOut_0(1));

  c_c_12_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q3_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q3_regout <= unsigned(q3);
    END IF;
  END PROCESS c_c_12_process;

  c_c_13_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q3_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q3_regout_1 <= q3_regout;
    END IF;
  END PROCESS c_c_13_process;

  in_3_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q3_1 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        q3_1 <= q3_regout_1;
      END IF;
    END IF;
  END PROCESS in_3_pipe_process;


  multiplier_cast_1 <= signed(resize(q3_1, 15));
  multiplier_mul_temp_1 <= multiplier_cast_1 * gz_1;
  tmp_5 <= multiplier_mul_temp_1(27 DOWNTO 0);

  delayMatch_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_6 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        tmp_6 <= tmp_5;
      END IF;
    END IF;
  END PROCESS delayMatch_1_process;


  p18qDot1_sub_cast <= resize(tmp_3, 30);
  p18qDot1_sub_cast_1 <= resize(tmp_4, 30);
  p18qDot1_sub_temp <= p18qDot1_sub_cast - p18qDot1_sub_cast_1;
  p18qDot1_sub_cast_2 <= resize(p18qDot1_sub_temp, 31);
  p18qDot1_sub_cast_3 <= resize(tmp_6, 31);
  p18qDot1_sub_temp_1 <= p18qDot1_sub_cast_2 - p18qDot1_sub_cast_3;
  -- CSD Encoding (8192) : 10000000000000; Cost (Adders) = 0
  p18qDot1_mul_temp <= resize(p18qDot1_sub_temp_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' 
    & '0' & '0' & '0', 46);
  p18qDot1_cast <= p18qDot1_mul_temp(44 DOWNTO 0);
  qDot1_1 <= p18qDot1_cast(41 DOWNTO 28);

  qdot1 <= std_logic_vector(qDot1_1);

  c_c_14_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q0_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q0_regout <= unsigned(q0);
    END IF;
  END PROCESS c_c_14_process;

  c_c_15_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q0_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q0_regout_1 <= q0_regout;
    END IF;
  END PROCESS c_c_15_process;

  in_0_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q0_1 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        q0_1 <= q0_regout_1;
      END IF;
    END IF;
  END PROCESS in_0_pipe_process;


  c0_serial_0_2(0) <= q0_1;
  c0_serial_0_2(1) <= q1_1;

  outputgen7: FOR kk IN 0 TO 1 GENERATE
    c0_serial_0_3(kk) <= std_logic_vector(c0_serial_0_2(kk));
  END GENERATE;

  c0_serial_1_2(0) <= gx_1;
  c0_serial_1_2(1) <= gy_1;

  outputgen6: FOR kk IN 0 TO 1 GENERATE
    c0_serial_1_3(kk) <= std_logic_vector(c0_serial_1_2(kk));
  END GENERATE;

  q0_unsigned <= unsigned(q0_2);

  gx_signed <= signed(gx_2);

  
-- 'Madgwick_qDot_fixpt:12' qDot2 = fi(fi(0.5, 0, 14, 14, fm)*(fi_signed(q0*gx + q2*gz) - q3*gy), 1, 14, 7, fm);
  -- 
  -- 'Madgwick_qDot_fixpt:19' coder.inline( 'always' );
  -- 
  -- 'Madgwick_qDot_fixpt:20' if isfi( a ) && ~(issigned( a ))
  -- 
  -- 'Madgwick_qDot_fixpt:24' else
  -- 
  -- 'Madgwick_qDot_fixpt:25' y = a;
  multiplier_cast_2 <= signed(resize(q0_unsigned, 15));
  multiplier_mul_temp_2 <= multiplier_cast_2 * gx_signed;
  tmp_7 <= multiplier_mul_temp_2(27 DOWNTO 0);

  c0_serial_0_4(0) <= q3_1;
  c0_serial_0_4(1) <= q3_1;

  outputgen5: FOR kk IN 0 TO 1 GENERATE
    c0_serial_0_5(kk) <= std_logic_vector(c0_serial_0_4(kk));
  END GENERATE;

  c0_serial_1_4(0) <= gx_1;
  c0_serial_1_4(1) <= gy_1;

  outputgen4: FOR kk IN 0 TO 1 GENERATE
    c0_serial_1_5(kk) <= std_logic_vector(c0_serial_1_4(kk));
  END GENERATE;

  q3_unsigned <= unsigned(q3_2);

  gx_signed_1 <= signed(gx_3);

  multiplier_cast_3 <= signed(resize(q3_unsigned, 15));
  multiplier_mul_temp_3 <= multiplier_cast_3 * gx_signed_1;
  tmp_8 <= multiplier_mul_temp_3(27 DOWNTO 0);

  tmp_9 <= signed(c0_serialOut_0_1(0));

  tmp_10 <= resize(tmp_9, 29);

  tmp_11 <= signed(c0_serialOut_0(0));

  tmp_12 <= resize(tmp_11, 29);

  tmp_13 <= tmp_10 + tmp_12;

  tmp_14 <= signed(c0_serialOut_0_2(1));

  p17qDot2_sub_cast <= resize(tmp_13, 30);
  p17qDot2_sub_cast_1 <= resize(tmp_14, 30);
  p17qDot2_sub_temp <= p17qDot2_sub_cast - p17qDot2_sub_cast_1;
  -- CSD Encoding (8192) : 10000000000000; Cost (Adders) = 0
  p17qDot2_mul_temp <= resize(p17qDot2_sub_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
    '0' & '0' & '0', 45);
  p17qDot2_cast <= p17qDot2_mul_temp(43 DOWNTO 0);
  qDot2_1 <= p17qDot2_cast(41 DOWNTO 28);

  qdot2 <= std_logic_vector(qDot2_1);

  c0_serial_0_6(0) <= q0_1;
  c0_serial_0_6(1) <= q0_1;

  outputgen3: FOR kk IN 0 TO 1 GENERATE
    c0_serial_0_7(kk) <= std_logic_vector(c0_serial_0_6(kk));
  END GENERATE;

  c0_serial_1_6(0) <= gz_1;
  c0_serial_1_6(1) <= gy_1;

  outputgen2: FOR kk IN 0 TO 1 GENERATE
    c0_serial_1_7(kk) <= std_logic_vector(c0_serial_1_6(kk));
  END GENERATE;

  q0_unsigned_1 <= unsigned(q0_3);

  gz_signed_1 <= signed(gz_3);

  
-- 'Madgwick_qDot_fixpt:14' qDot4 = fi(fi(0.5, 0, 14, 14, fm)*(fi_signed(q0*gz + q1*gy) - q2*gx), 1, 14, 7, fm);
  -- 
  -- 'Madgwick_qDot_fixpt:19' coder.inline( 'always' );
  -- 
  -- 'Madgwick_qDot_fixpt:20' if isfi( a ) && ~(issigned( a ))
  -- 
  -- 'Madgwick_qDot_fixpt:24' else
  -- 
  -- 'Madgwick_qDot_fixpt:25' y = a;
  -- 
  
-- 'Madgwick_qDot_fixpt:13' qDot3 = fi(fi(0.5, 0, 14, 14, fm)*(fi_signed(q0*gy) - q1*gz + q3*gx), 1, 14, 7, fm);
  -- 
  -- 'Madgwick_qDot_fixpt:19' coder.inline( 'always' );
  -- 
  -- 'Madgwick_qDot_fixpt:20' if isfi( a ) && ~(issigned( a ))
  -- 
  -- 'Madgwick_qDot_fixpt:24' else
  -- 
  -- 'Madgwick_qDot_fixpt:25' y = a;
  multiplier_cast_4 <= signed(resize(q0_unsigned_1, 15));
  multiplier_mul_temp_4 <= multiplier_cast_4 * gz_signed_1;
  tmp_15 <= multiplier_mul_temp_4(27 DOWNTO 0);

  c0_serial_0_8(0) <= q1_1;
  c0_serial_0_8(1) <= q2_1;

  outputgen1: FOR kk IN 0 TO 1 GENERATE
    c0_serial_0_9(kk) <= std_logic_vector(c0_serial_0_8(kk));
  END GENERATE;

  c0_serial_1_8(0) <= gz_1;
  c0_serial_1_8(1) <= gx_1;

  outputgen: FOR kk IN 0 TO 1 GENERATE
    c0_serial_1_9(kk) <= std_logic_vector(c0_serial_1_8(kk));
  END GENERATE;

  q1_unsigned <= unsigned(q1_2);

  gz_signed_2 <= signed(gz_4);

  multiplier_cast_5 <= signed(resize(q1_unsigned, 15));
  multiplier_mul_temp_5 <= multiplier_cast_5 * gz_signed_2;
  tmp_16 <= multiplier_mul_temp_5(27 DOWNTO 0);

  tmp_17 <= signed(c0_serialOut_0_3(1));

  tmp_18 <= signed(c0_serialOut_0_4(0));

  p22tmp_sub_cast <= resize(tmp_17, 29);
  p22tmp_sub_cast_1 <= resize(tmp_18, 29);
  p22tmp_sub_temp <= p22tmp_sub_cast - p22tmp_sub_cast_1;
  tmp_19 <= resize(p22tmp_sub_temp, 30);

  tmp_20 <= signed(c0_serialOut_0_2(0));

  tmp_21 <= resize(tmp_20, 30);

  tmp_22 <= tmp_19 + tmp_21;

  p16qDot3_cast <= resize(tmp_22 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
    '0', 45);
  p16qDot3_cast_1 <= p16qDot3_cast(43 DOWNTO 0);
  qDot3_1 <= p16qDot3_cast_1(41 DOWNTO 28);

  qdot3 <= std_logic_vector(qDot3_1);

  tmp_23 <= signed(c0_serialOut_0_3(0));

  tmp_24 <= resize(tmp_23, 29);

  tmp_25 <= signed(c0_serialOut_0_1(1));

  tmp_26 <= resize(tmp_25, 29);

  tmp_27 <= tmp_24 + tmp_26;

  tmp_28 <= signed(c0_serialOut_0_4(1));

  p15qDot4_sub_cast <= resize(tmp_27, 30);
  p15qDot4_sub_cast_1 <= resize(tmp_28, 30);
  p15qDot4_sub_temp <= p15qDot4_sub_cast - p15qDot4_sub_cast_1;
  -- CSD Encoding (8192) : 10000000000000; Cost (Adders) = 0
  p15qDot4_mul_temp <= resize(p15qDot4_sub_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
    '0' & '0' & '0', 45);
  p15qDot4_cast <= p15qDot4_mul_temp(43 DOWNTO 0);
  qDot4_1 <= p15qDot4_cast(41 DOWNTO 28);

  qdot4 <= std_logic_vector(qDot4_1);

  ceout <= enb_1_2_1;

END rtl;

