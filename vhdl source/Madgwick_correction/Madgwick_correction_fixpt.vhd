-- -------------------------------------------------------------
-- 

-- File Name: C:\Users\z68j959\Documents\GitHub\EELE466\hdl_coder_Madgwick_correction\codegen\Madgwick_correction\hdlsrc\Madgwick_correction_fixpt.vhd
-- Created: 2015-03-31 13:33:19
-- 
-- Generated by MATLAB 8.3, MATLAB Coder 2.6 and HDL Coder 3.4
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 0.25
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ceout         1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- s0                            ceout         1
-- s1                            ceout         1
-- s2                            ceout         1
-- s3                            ceout         1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Madgwick_correction_fixpt
-- Source Path: Madgwick_correction_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Madgwick_correction_fixpt_pac.ALL;

ENTITY Madgwick_correction_fixpt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clkenable                         :   IN    std_logic;
        q0                                :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14_En14
        q1                                :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14_En14
        q2                                :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14_En14
        q3                                :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14_En14
        ax                                :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14_En14
        ay                                :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14_En14
        az                                :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14_En14
        mx                                :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14_En14
        my                                :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14_En14
        mz                                :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14_En14
        ceout                             :   OUT   std_logic;
        s0                                :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En8
        s1                                :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En8
        s2                                :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En6
        s3                                :   OUT   std_logic_vector(13 DOWNTO 0)  -- sfix14_En7
        );
END Madgwick_correction_fixpt;


ARCHITECTURE rtl OF Madgwick_correction_fixpt IS

  -- Component Declarations
  COMPONENT Madgwick_correction_fixpt_en
    PORT( clk_1                           :   IN    std_logic;
          reset_1                         :   IN    std_logic;
          clkenable_1                     :   IN    std_logic;
          clkenable_2                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Madgwick_correction_fixpt_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clkenable                       :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_1_1                       :   OUT   std_logic;
          enb_1_2_0                       :   OUT   std_logic;
          enb_1_2_1                       :   OUT   std_logic;
          enb_1_4_0                       :   OUT   std_logic;
          enb_1_4_1                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT mux1_serializer
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector14(0 TO 3);  -- ufix14_En14 [4]
          out0                            :   OUT   std_logic_vector(13 DOWNTO 0)  -- ufix14_En14
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(27 DOWNTO 0);  -- ufix28_En28
          out0                            :   OUT   vector_of_std_logic_vector28(0 TO 3)  -- ufix28_En28 [4]
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector16(0 TO 3);  -- ufix16_En14 [4]
          out0                            :   OUT   std_logic_vector(15 DOWNTO 0)  -- ufix16_En14
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(29 DOWNTO 0);  -- ufix30_En28
          out0                            :   OUT   vector_of_std_logic_vector30(0 TO 3)  -- ufix30_En28 [4]
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block8
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector15(0 TO 1);  -- sfix15_En13 [2]
          out0                            :   OUT   std_logic_vector(14 DOWNTO 0)  -- sfix15_En13
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block9
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector19(0 TO 1);  -- sfix19_En14 [2]
          out0                            :   OUT   std_logic_vector(18 DOWNTO 0)  -- sfix19_En14
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer_block7
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in0                             :   IN    std_logic_vector(33 DOWNTO 0);  -- sfix34_En27
          out0                            :   OUT   vector_of_std_logic_vector34(0 TO 1)  -- sfix34_En27 [2]
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block11
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector14(0 TO 1);  -- ufix14_En13 [2]
          out0                            :   OUT   std_logic_vector(13 DOWNTO 0)  -- ufix14_En13
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer_block9
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in0                             :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En27
          out0                            :   OUT   vector_of_std_logic_vector33(0 TO 1)  -- sfix33_En27 [2]
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector16(0 TO 1);  -- ufix16_En14 [2]
          out0                            :   OUT   std_logic_vector(15 DOWNTO 0)  -- ufix16_En14
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector14(0 TO 1);  -- ufix14_En14 [2]
          out0                            :   OUT   std_logic_vector(13 DOWNTO 0)  -- ufix14_En14
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer_block2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in0                             :   IN    std_logic_vector(29 DOWNTO 0);  -- ufix30_En28
          out0                            :   OUT   vector_of_std_logic_vector30(0 TO 1)  -- ufix30_En28 [2]
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector14(0 TO 3);  -- ufix14_En13 [4]
          out0                            :   OUT   std_logic_vector(13 DOWNTO 0)  -- ufix14_En13
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(27 DOWNTO 0);  -- ufix28_En27
          out0                            :   OUT   vector_of_std_logic_vector28(0 TO 3)  -- ufix28_En27 [4]
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block4
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector28(0 TO 3);  -- ufix28_En27 [4]
          out0                            :   OUT   std_logic_vector(27 DOWNTO 0)  -- ufix28_En27
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer_block4
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(41 DOWNTO 0);  -- ufix42_En41
          out0                            :   OUT   vector_of_std_logic_vector42(0 TO 3)  -- ufix42_En41 [4]
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block13
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector14(0 TO 3);  -- sfix14_En11 [4]
          out0                            :   OUT   std_logic_vector(13 DOWNTO 0)  -- sfix14_En11
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer_block13
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(27 DOWNTO 0);  -- sfix28_En25
          out0                            :   OUT   vector_of_std_logic_vector28(0 TO 3)  -- sfix28_En25 [4]
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block5
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector14(0 TO 2);  -- ufix14_En13 [3]
          out0                            :   OUT   std_logic_vector(13 DOWNTO 0)  -- ufix14_En13
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block6
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector14(0 TO 2);  -- ufix14_En14 [3]
          out0                            :   OUT   std_logic_vector(13 DOWNTO 0)  -- ufix14_En14
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer_block5
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(27 DOWNTO 0);  -- ufix28_En27
          out0                            :   OUT   vector_of_std_logic_vector28(0 TO 2)  -- ufix28_En27 [3]
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer_block3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in0                             :   IN    std_logic_vector(27 DOWNTO 0);  -- ufix28_En28
          out0                            :   OUT   vector_of_std_logic_vector28(0 TO 1)  -- ufix28_En28 [2]
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block12
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector14(0 TO 1);  -- sfix14_En11 [2]
          out0                            :   OUT   std_logic_vector(13 DOWNTO 0)  -- sfix14_En11
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer_block10
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in0                             :   IN    std_logic_vector(27 DOWNTO 0);  -- sfix28_En22
          out0                            :   OUT   vector_of_std_logic_vector28(0 TO 1)  -- sfix28_En22 [2]
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block18
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector14(0 TO 3);  -- ufix14_En12 [4]
          out0                            :   OUT   std_logic_vector(13 DOWNTO 0)  -- ufix14_En12
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block14
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector17(0 TO 3);  -- sfix17_En14 [4]
          out0                            :   OUT   std_logic_vector(16 DOWNTO 0)  -- sfix17_En14
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer_block19
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(30 DOWNTO 0);  -- sfix31_En26
          out0                            :   OUT   vector_of_std_logic_vector31(0 TO 3)  -- sfix31_En26 [4]
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block16
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector16(0 TO 3);  -- sfix16_En14 [4]
          out0                            :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer_block14
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(29 DOWNTO 0);  -- sfix30_En25
          out0                            :   OUT   vector_of_std_logic_vector30(0 TO 3)  -- sfix30_En25 [4]
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block29
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector28(0 TO 1);  -- sfix28_En25 [2]
          out0                            :   OUT   std_logic_vector(27 DOWNTO 0)  -- sfix28_En25
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block28
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector33(0 TO 1);  -- sfix33_En26 [2]
          out0                            :   OUT   std_logic_vector(32 DOWNTO 0)  -- sfix33_En26
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer_block27
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in0                             :   IN    std_logic_vector(60 DOWNTO 0);  -- sfix61_En51
          out0                            :   OUT   vector_of_std_logic_vector61(0 TO 1)  -- sfix61_En51 [2]
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer_block17
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(27 DOWNTO 0);  -- ufix28_En26
          out0                            :   OUT   vector_of_std_logic_vector28(0 TO 3)  -- ufix28_En26 [4]
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block19
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector14(0 TO 1);  -- ufix14_En12 [2]
          out0                            :   OUT   std_logic_vector(13 DOWNTO 0)  -- ufix14_En12
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer_block20
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in0                             :   IN    std_logic_vector(27 DOWNTO 0);  -- ufix28_En26
          out0                            :   OUT   vector_of_std_logic_vector28(0 TO 1)  -- ufix28_En26 [2]
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block20
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector15(0 TO 1);  -- sfix15_En12 [2]
          out0                            :   OUT   std_logic_vector(14 DOWNTO 0)  -- sfix15_En12
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer_block21
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in0                             :   IN    std_logic_vector(28 DOWNTO 0);  -- sfix29_En26
          out0                            :   OUT   vector_of_std_logic_vector29(0 TO 1)  -- sfix29_En26 [2]
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer_block18
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(29 DOWNTO 0);  -- sfix30_En26
          out0                            :   OUT   vector_of_std_logic_vector30(0 TO 3)  -- sfix30_En26 [4]
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block15
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector15(0 TO 3);  -- ufix15_En14 [4]
          out0                            :   OUT   std_logic_vector(14 DOWNTO 0)  -- ufix15_En14
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer_block12
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(28 DOWNTO 0);  -- sfix29_En25
          out0                            :   OUT   vector_of_std_logic_vector29(0 TO 3)  -- sfix29_En25 [4]
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block25
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector30(0 TO 3);  -- sfix30_En26 [4]
          out0                            :   OUT   std_logic_vector(29 DOWNTO 0)  -- sfix30_En26
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block26
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector32(0 TO 3);  -- sfix32_En26 [4]
          out0                            :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En26
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer_block25
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(61 DOWNTO 0);  -- sfix62_En52
          out0                            :   OUT   vector_of_std_logic_vector62(0 TO 3)  -- sfix62_En52 [4]
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer_block16
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(28 DOWNTO 0);  -- ufix29_En26
          out0                            :   OUT   vector_of_std_logic_vector29(0 TO 3)  -- ufix29_En26 [4]
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer_block11
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(30 DOWNTO 0);  -- sfix31_En25
          out0                            :   OUT   vector_of_std_logic_vector31(0 TO 3)  -- sfix31_En25 [4]
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block22
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector28(0 TO 1);  -- ufix28_En26 [2]
          out0                            :   OUT   std_logic_vector(27 DOWNTO 0)  -- ufix28_En26
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block23
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector34(0 TO 1);  -- sfix34_En26 [2]
          out0                            :   OUT   std_logic_vector(33 DOWNTO 0)  -- sfix34_En26
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer_block23
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in0                             :   IN    std_logic_vector(61 DOWNTO 0);  -- sfix62_En52
          out0                            :   OUT   vector_of_std_logic_vector62(0 TO 1)  -- sfix62_En52 [2]
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block7
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector19(0 TO 3);  -- sfix19_En14 [4]
          out0                            :   OUT   std_logic_vector(18 DOWNTO 0)  -- sfix19_En14
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer_block6
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(32 DOWNTO 0);  -- sfix33_En27
          out0                            :   OUT   vector_of_std_logic_vector33(0 TO 3)  -- sfix33_En27 [4]
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block10
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector17(0 TO 1);  -- ufix17_En14 [2]
          out0                            :   OUT   std_logic_vector(16 DOWNTO 0)  -- ufix17_En14
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer_block8
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in0                             :   IN    std_logic_vector(35 DOWNTO 0);  -- sfix36_En28
          out0                            :   OUT   vector_of_std_logic_vector36(0 TO 1)  -- sfix36_En28 [2]
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block17
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector14(0 TO 1);  -- sfix14_En10 [2]
          out0                            :   OUT   std_logic_vector(13 DOWNTO 0)  -- sfix14_En10
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer_block15
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in0                             :   IN    std_logic_vector(27 DOWNTO 0);  -- sfix28_En24
          out0                            :   OUT   vector_of_std_logic_vector28(0 TO 1)  -- sfix28_En24 [2]
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block24
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector31(0 TO 1);  -- sfix31_En26 [2]
          out0                            :   OUT   std_logic_vector(30 DOWNTO 0)  -- sfix31_En26
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer_block24
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in0                             :   IN    std_logic_vector(64 DOWNTO 0);  -- sfix65_En52
          out0                            :   OUT   vector_of_std_logic_vector65(0 TO 1)  -- sfix65_En52 [2]
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block21
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector15(0 TO 1);  -- sfix15_En11 [2]
          out0                            :   OUT   std_logic_vector(14 DOWNTO 0)  -- sfix15_En11
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer_block22
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in0                             :   IN    std_logic_vector(28 DOWNTO 0);  -- sfix29_En25
          out0                            :   OUT   vector_of_std_logic_vector29(0 TO 1)  -- sfix29_En25 [2]
          );
  END COMPONENT;

  COMPONENT mux1_serializer_block27
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector30(0 TO 1);  -- sfix30_En25 [2]
          out0                            :   OUT   std_logic_vector(29 DOWNTO 0)  -- sfix30_En25
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer_block26
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          in0                             :   IN    std_logic_vector(62 DOWNTO 0);  -- sfix63_En51
          out0                            :   OUT   vector_of_std_logic_vector63(0 TO 1)  -- sfix63_En51 [2]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Madgwick_correction_fixpt_en
    USE ENTITY work.Madgwick_correction_fixpt_en(rtl);

  FOR ALL : Madgwick_correction_fixpt_tc
    USE ENTITY work.Madgwick_correction_fixpt_tc(rtl);

  FOR ALL : mux1_serializer
    USE ENTITY work.mux1_serializer(rtl);

  FOR ALL : alpha0_deserializer
    USE ENTITY work.alpha0_deserializer(rtl);

  FOR ALL : mux1_serializer_block
    USE ENTITY work.mux1_serializer_block(rtl);

  FOR ALL : alpha0_deserializer_block
    USE ENTITY work.alpha0_deserializer_block(rtl);

  FOR ALL : mux1_serializer_block8
    USE ENTITY work.mux1_serializer_block8(rtl);

  FOR ALL : mux1_serializer_block9
    USE ENTITY work.mux1_serializer_block9(rtl);

  FOR ALL : alpha0_deserializer_block7
    USE ENTITY work.alpha0_deserializer_block7(rtl);

  FOR ALL : mux1_serializer_block11
    USE ENTITY work.mux1_serializer_block11(rtl);

  FOR ALL : alpha0_deserializer_block9
    USE ENTITY work.alpha0_deserializer_block9(rtl);

  FOR ALL : mux1_serializer_block2
    USE ENTITY work.mux1_serializer_block2(rtl);

  FOR ALL : mux1_serializer_block3
    USE ENTITY work.mux1_serializer_block3(rtl);

  FOR ALL : alpha0_deserializer_block2
    USE ENTITY work.alpha0_deserializer_block2(rtl);

  FOR ALL : mux1_serializer_block1
    USE ENTITY work.mux1_serializer_block1(rtl);

  FOR ALL : alpha0_deserializer_block1
    USE ENTITY work.alpha0_deserializer_block1(rtl);

  FOR ALL : mux1_serializer_block4
    USE ENTITY work.mux1_serializer_block4(rtl);

  FOR ALL : alpha0_deserializer_block4
    USE ENTITY work.alpha0_deserializer_block4(rtl);

  FOR ALL : mux1_serializer_block13
    USE ENTITY work.mux1_serializer_block13(rtl);

  FOR ALL : alpha0_deserializer_block13
    USE ENTITY work.alpha0_deserializer_block13(rtl);

  FOR ALL : mux1_serializer_block5
    USE ENTITY work.mux1_serializer_block5(rtl);

  FOR ALL : mux1_serializer_block6
    USE ENTITY work.mux1_serializer_block6(rtl);

  FOR ALL : alpha0_deserializer_block5
    USE ENTITY work.alpha0_deserializer_block5(rtl);

  FOR ALL : alpha0_deserializer_block3
    USE ENTITY work.alpha0_deserializer_block3(rtl);

  FOR ALL : mux1_serializer_block12
    USE ENTITY work.mux1_serializer_block12(rtl);

  FOR ALL : alpha0_deserializer_block10
    USE ENTITY work.alpha0_deserializer_block10(rtl);

  FOR ALL : mux1_serializer_block18
    USE ENTITY work.mux1_serializer_block18(rtl);

  FOR ALL : mux1_serializer_block14
    USE ENTITY work.mux1_serializer_block14(rtl);

  FOR ALL : alpha0_deserializer_block19
    USE ENTITY work.alpha0_deserializer_block19(rtl);

  FOR ALL : mux1_serializer_block16
    USE ENTITY work.mux1_serializer_block16(rtl);

  FOR ALL : alpha0_deserializer_block14
    USE ENTITY work.alpha0_deserializer_block14(rtl);

  FOR ALL : mux1_serializer_block29
    USE ENTITY work.mux1_serializer_block29(rtl);

  FOR ALL : mux1_serializer_block28
    USE ENTITY work.mux1_serializer_block28(rtl);

  FOR ALL : alpha0_deserializer_block27
    USE ENTITY work.alpha0_deserializer_block27(rtl);

  FOR ALL : alpha0_deserializer_block17
    USE ENTITY work.alpha0_deserializer_block17(rtl);

  FOR ALL : mux1_serializer_block19
    USE ENTITY work.mux1_serializer_block19(rtl);

  FOR ALL : alpha0_deserializer_block20
    USE ENTITY work.alpha0_deserializer_block20(rtl);

  FOR ALL : mux1_serializer_block20
    USE ENTITY work.mux1_serializer_block20(rtl);

  FOR ALL : alpha0_deserializer_block21
    USE ENTITY work.alpha0_deserializer_block21(rtl);

  FOR ALL : alpha0_deserializer_block18
    USE ENTITY work.alpha0_deserializer_block18(rtl);

  FOR ALL : mux1_serializer_block15
    USE ENTITY work.mux1_serializer_block15(rtl);

  FOR ALL : alpha0_deserializer_block12
    USE ENTITY work.alpha0_deserializer_block12(rtl);

  FOR ALL : mux1_serializer_block25
    USE ENTITY work.mux1_serializer_block25(rtl);

  FOR ALL : mux1_serializer_block26
    USE ENTITY work.mux1_serializer_block26(rtl);

  FOR ALL : alpha0_deserializer_block25
    USE ENTITY work.alpha0_deserializer_block25(rtl);

  FOR ALL : alpha0_deserializer_block16
    USE ENTITY work.alpha0_deserializer_block16(rtl);

  FOR ALL : alpha0_deserializer_block11
    USE ENTITY work.alpha0_deserializer_block11(rtl);

  FOR ALL : mux1_serializer_block22
    USE ENTITY work.mux1_serializer_block22(rtl);

  FOR ALL : mux1_serializer_block23
    USE ENTITY work.mux1_serializer_block23(rtl);

  FOR ALL : alpha0_deserializer_block23
    USE ENTITY work.alpha0_deserializer_block23(rtl);

  FOR ALL : mux1_serializer_block7
    USE ENTITY work.mux1_serializer_block7(rtl);

  FOR ALL : alpha0_deserializer_block6
    USE ENTITY work.alpha0_deserializer_block6(rtl);

  FOR ALL : mux1_serializer_block10
    USE ENTITY work.mux1_serializer_block10(rtl);

  FOR ALL : alpha0_deserializer_block8
    USE ENTITY work.alpha0_deserializer_block8(rtl);

  FOR ALL : mux1_serializer_block17
    USE ENTITY work.mux1_serializer_block17(rtl);

  FOR ALL : alpha0_deserializer_block15
    USE ENTITY work.alpha0_deserializer_block15(rtl);

  FOR ALL : mux1_serializer_block24
    USE ENTITY work.mux1_serializer_block24(rtl);

  FOR ALL : alpha0_deserializer_block24
    USE ENTITY work.alpha0_deserializer_block24(rtl);

  FOR ALL : mux1_serializer_block21
    USE ENTITY work.mux1_serializer_block21(rtl);

  FOR ALL : alpha0_deserializer_block22
    USE ENTITY work.alpha0_deserializer_block22(rtl);

  FOR ALL : mux1_serializer_block27
    USE ENTITY work.mux1_serializer_block27(rtl);

  FOR ALL : alpha0_deserializer_block26
    USE ENTITY work.alpha0_deserializer_block26(rtl);

  -- Signals
  SIGNAL enb_1_4_1                        : std_logic;
  SIGNAL enb_1_1_1                        : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_2_1                        : std_logic;
  SIGNAL enb_1_2_0                        : std_logic;
  SIGNAL enb_1_4_0                        : std_logic;
  SIGNAL q0_regout                        : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q0_regout_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q0_regout_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q0_regout_3                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL clkenable_1                      : std_logic;
  SIGNAL clkenable_regout                 : std_logic;
  SIGNAL clkenable_regout_1               : std_logic;
  SIGNAL clkenable_regout_2               : std_logic;
  SIGNAL clkenable_regout_3               : std_logic;
  SIGNAL q0_1                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL v2q0                             : unsigned(13 DOWNTO 0);  -- ufix14_En13
  SIGNAL p388v2q0_cast                    : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL tmp                              : signed(14 DOWNTO 0);  -- sfix15_En13
  SIGNAL p253tmp_cast                     : signed(14 DOWNTO 0);  -- sfix15_En13
  SIGNAL p253tmp_cast_1                   : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL p253tmp_cast_2                   : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL tmp_1                            : signed(14 DOWNTO 0);  -- sfix15_En13
  SIGNAL q2_regout                        : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q2_regout_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q2_regout_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q2_regout_3                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q2_1                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL v2q2                             : unsigned(13 DOWNTO 0);  -- ufix14_En13
  SIGNAL p386v2q2_cast                    : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL tmp_2                            : signed(14 DOWNTO 0);  -- sfix15_En13
  SIGNAL p327tmp_cast                     : signed(14 DOWNTO 0);  -- sfix15_En13
  SIGNAL p327tmp_cast_1                   : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL p327tmp_cast_2                   : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL tmp_3                            : signed(14 DOWNTO 0);  -- sfix15_En13
  SIGNAL c0_serial_0                      : vector_of_signed15(0 TO 1);  -- sfix15_En13 [2]
  SIGNAL c0_serial_0_1                    : vector_of_std_logic_vector15(0 TO 1);  -- ufix15 [2]
  SIGNAL q1_regout                        : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q1_regout_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q1_regout_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q1_regout_3                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q1_1                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL c0_serial_0_2                    : vector_of_unsigned14(0 TO 3);  -- ufix14_En14 [4]
  SIGNAL c0_serial_0_3                    : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL q3_regout                        : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q3_regout_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q3_regout_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q3_regout_3                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q3_1                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL c0_serial_1                      : vector_of_unsigned14(0 TO 3);  -- ufix14_En14 [4]
  SIGNAL c0_serial_1_1                    : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL q1_2                             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL q1_unsigned                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q3_2                             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL q3_unsigned                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_4                            : unsigned(27 DOWNTO 0);  -- ufix28_En28
  SIGNAL c0_serialOut_0                   : vector_of_std_logic_vector28(0 TO 3);  -- ufix28 [4]
  SIGNAL tmp_5                            : unsigned(27 DOWNTO 0);  -- ufix28_En28
  SIGNAL q1q3                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_6                            : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL tmp_7                            : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL tmp_8                            : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL tmp_9                            : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL c0_serial_0_4                    : vector_of_unsigned16(0 TO 3);  -- ufix16_En14 [4]
  SIGNAL c0_serial_0_5                    : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL mx_regout                        : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL mx_regout_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL mx_regout_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL mx_regout_3                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL mx_1                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL c0_serial_1_2                    : vector_of_unsigned14(0 TO 3);  -- ufix14_En14 [4]
  SIGNAL c0_serial_1_3                    : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL tmp_10                           : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL tmp_unsigned                     : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL q2_2                             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL q2_unsigned                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_11                           : unsigned(29 DOWNTO 0);  -- ufix30_En28
  SIGNAL c0_serialOut_0_1                 : vector_of_std_logic_vector30(0 TO 3);  -- ufix30 [4]
  SIGNAL tmp_12                           : unsigned(29 DOWNTO 0);  -- ufix30_En28
  SIGNAL v2q0q2                           : unsigned(13 DOWNTO 0);  -- ufix14_En13
  SIGNAL ax_regout                        : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL ax_regout_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL ax_regout_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL ax_regout_3                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL ax_1                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL ax_2                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_13                           : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL p252tmp_sub_cast                 : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL p252tmp_sub_cast_1               : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL p252tmp_sub_cast_2               : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL p252tmp_sub_temp                 : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL p252tmp_sub_cast_3               : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL p252tmp_sub_cast_4               : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL ax_3                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_14                           : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL p326tmp_sub_cast                 : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL p326tmp_sub_cast_1               : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL p326tmp_sub_cast_2               : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL p326tmp_sub_temp                 : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL p326tmp_sub_cast_3               : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL p326tmp_sub_cast_4               : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL c0_serial_1_4                    : vector_of_signed19(0 TO 1);  -- sfix19_En14 [2]
  SIGNAL c0_serial_1_5                    : vector_of_std_logic_vector19(0 TO 1);  -- ufix19 [2]
  SIGNAL tmp_15                           : std_logic_vector(14 DOWNTO 0);  -- ufix15
  SIGNAL tmp_signed                       : signed(14 DOWNTO 0);  -- sfix15_En13
  SIGNAL tmp_16                           : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL tmp_signed_1                     : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL tmp_17                           : signed(33 DOWNTO 0);  -- sfix34_En27
  SIGNAL c0_serialOut_0_2                 : vector_of_std_logic_vector34(0 TO 1);  -- ufix34 [2]
  SIGNAL v2q0_1                           : unsigned(13 DOWNTO 0);  -- ufix14_En13
  SIGNAL v2q1                             : unsigned(13 DOWNTO 0);  -- ufix14_En13
  SIGNAL p387v2q1_cast                    : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL v2q1_1                           : unsigned(13 DOWNTO 0);  -- ufix14_En13
  SIGNAL c0_serial_0_6                    : vector_of_unsigned14(0 TO 1);  -- ufix14_En13 [2]
  SIGNAL c0_serial_0_7                    : vector_of_std_logic_vector14(0 TO 1);  -- ufix14 [2]
  SIGNAL c0_serial_0_8                    : vector_of_unsigned14(0 TO 3);  -- ufix14_En14 [4]
  SIGNAL c0_serial_0_9                    : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL c0_serial_1_6                    : vector_of_unsigned14(0 TO 3);  -- ufix14_En14 [4]
  SIGNAL c0_serial_1_7                    : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL q0_2                             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL q0_unsigned                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q3_3                             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL q3_unsigned_1                    : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_18                           : unsigned(27 DOWNTO 0);  -- ufix28_En28
  SIGNAL c0_serialOut_0_3                 : vector_of_std_logic_vector28(0 TO 3);  -- ufix28 [4]
  SIGNAL tmp_19                           : unsigned(27 DOWNTO 0);  -- ufix28_En28
  SIGNAL q0q1                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_20                           : unsigned(16 DOWNTO 0);  -- ufix17_En14
  SIGNAL p289tmp_cast                     : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL tmp_21                           : unsigned(29 DOWNTO 0);  -- ufix30_En28
  SIGNAL v2q2q3                           : unsigned(13 DOWNTO 0);  -- ufix14_En13
  SIGNAL tmp_22                           : unsigned(16 DOWNTO 0);  -- ufix17_En14
  SIGNAL tmp_23                           : unsigned(16 DOWNTO 0);  -- ufix17_En14
  SIGNAL ay_regout                        : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL ay_regout_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL ay_regout_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL ay_regout_3                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL ay_1                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_24                           : unsigned(16 DOWNTO 0);  -- ufix17_En14
  SIGNAL p324tmp_cast                     : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL tmp_25                           : unsigned(16 DOWNTO 0);  -- ufix17_En14
  SIGNAL tmp_26                           : unsigned(16 DOWNTO 0);  -- ufix17_En14
  SIGNAL ay_2                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_27                           : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL p287tmp_sub_cast                 : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL p287tmp_sub_cast_1               : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL ay_3                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_28                           : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL p322tmp_sub_cast                 : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL p322tmp_sub_cast_1               : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL c0_serial_1_8                    : vector_of_signed19(0 TO 1);  -- sfix19_En14 [2]
  SIGNAL c0_serial_1_9                    : vector_of_std_logic_vector19(0 TO 1);  -- ufix19 [2]
  SIGNAL v2q0_2                           : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL v2q0_unsigned                    : unsigned(13 DOWNTO 0);  -- ufix14_En13
  SIGNAL tmp_29                           : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL tmp_signed_2                     : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL multiplier_cast                  : signed(14 DOWNTO 0);  -- sfix15_En13
  SIGNAL multiplier_mul_temp              : signed(33 DOWNTO 0);  -- sfix34_En27
  SIGNAL tmp_30                           : signed(32 DOWNTO 0);  -- sfix33_En27
  SIGNAL c0_serialOut_0_4                 : vector_of_std_logic_vector33(0 TO 1);  -- ufix33 [2]
  SIGNAL tmp_31                           : signed(33 DOWNTO 0);  -- sfix34_En27
  SIGNAL tmp_32                           : signed(34 DOWNTO 0);  -- sfix35_En27
  SIGNAL tmp_33                           : signed(32 DOWNTO 0);  -- sfix33_En27
  SIGNAL tmp_34                           : signed(34 DOWNTO 0);  -- sfix35_En27
  SIGNAL tmp_35                           : signed(34 DOWNTO 0);  -- sfix35_En27
  SIGNAL tmp_36                           : unsigned(29 DOWNTO 0);  -- ufix30_En28
  SIGNAL v2q0mx                           : unsigned(13 DOWNTO 0);  -- ufix14_En13
  SIGNAL tmp_37                           : signed(14 DOWNTO 0);  -- sfix15_En13
  SIGNAL p342tmp_cast                     : signed(14 DOWNTO 0);  -- sfix15_En13
  SIGNAL p342tmp_cast_1                   : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL p342tmp_cast_2                   : signed(15 DOWNTO 0);  -- sfix16_En13
  SIGNAL q2_3                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL multiplier_cast_1                : signed(14 DOWNTO 0);  -- sfix15_En14
  SIGNAL multiplier_mul_temp_1            : signed(29 DOWNTO 0);  -- sfix30_En27
  SIGNAL tmp_38                           : signed(28 DOWNTO 0);  -- sfix29_En27
  SIGNAL tmp_39                           : signed(29 DOWNTO 0);  -- sfix30_En27
  SIGNAL tmp_40                           : unsigned(29 DOWNTO 0);  -- ufix30_En28
  SIGNAL v2q1mx                           : unsigned(13 DOWNTO 0);  -- ufix14_En13
  SIGNAL tmp_41                           : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL tmp_42                           : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL c0_serial_0_10                   : vector_of_unsigned16(0 TO 1);  -- ufix16_En14 [2]
  SIGNAL c0_serial_0_11                   : vector_of_std_logic_vector16(0 TO 1);  -- ufix16 [2]
  SIGNAL my_regout                        : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL my_regout_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL my_regout_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL my_regout_3                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL my_1                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL mz_regout                        : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL mz_regout_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL mz_regout_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL mz_regout_3                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL mz_1                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL c0_serial_1_10                   : vector_of_unsigned14(0 TO 1);  -- ufix14_En14 [2]
  SIGNAL c0_serial_1_11                   : vector_of_std_logic_vector14(0 TO 1);  -- ufix14 [2]
  SIGNAL tmp_43                           : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL tmp_unsigned_1                   : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL my_2                             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL my_unsigned                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_44                           : unsigned(29 DOWNTO 0);  -- ufix30_En28
  SIGNAL c0_serialOut_0_5                 : vector_of_std_logic_vector30(0 TO 1);  -- ufix30 [2]
  SIGNAL tmp_45                           : unsigned(29 DOWNTO 0);  -- ufix30_En28
  SIGNAL v2q0my                           : unsigned(13 DOWNTO 0);  -- ufix14_En13
  SIGNAL c0_serial_0_12                   : vector_of_unsigned14(0 TO 3);  -- ufix14_En13 [4]
  SIGNAL c0_serial_0_13                   : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL q3_4                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q2_4                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q1_3                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL c0_serial_1_12                   : vector_of_unsigned14(0 TO 3);  -- ufix14_En14 [4]
  SIGNAL c0_serial_1_13                   : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL v2q1mx_1                         : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL v2q1mx_unsigned                  : unsigned(13 DOWNTO 0);  -- ufix14_En13
  SIGNAL q3_5                             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL q3_unsigned_2                    : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_46                           : unsigned(27 DOWNTO 0);  -- ufix28_En27
  SIGNAL c0_serialOut_0_6                 : vector_of_std_logic_vector28(0 TO 3);  -- ufix28 [4]
  SIGNAL q2_5                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q3_6                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL mz_2                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL my_3                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL c0_serial_0_14                   : vector_of_unsigned14(0 TO 3);  -- ufix14_En14 [4]
  SIGNAL c0_serial_0_15                   : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL tmp_47                           : unsigned(27 DOWNTO 0);  -- ufix28_En28
  SIGNAL q0q0                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL c0_serial_1_14                   : vector_of_unsigned14(0 TO 3);  -- ufix14_En14 [4]
  SIGNAL c0_serial_1_15                   : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL q2_6                             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL q2_unsigned_1                    : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q2_7                             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL q2_unsigned_2                    : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_48                           : unsigned(27 DOWNTO 0);  -- ufix28_En28
  SIGNAL c0_serialOut_0_7                 : vector_of_std_logic_vector28(0 TO 3);  -- ufix28 [4]
  SIGNAL mx_2                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL mz_3                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL my_4                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL c0_serial_0_16                   : vector_of_unsigned14(0 TO 3);  -- ufix14_En14 [4]
  SIGNAL c0_serial_0_17                   : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL tmp_49                           : unsigned(27 DOWNTO 0);  -- ufix28_En28
  SIGNAL q1q1                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL c0_serial_1_16                   : vector_of_unsigned14(0 TO 3);  -- ufix14_En14 [4]
  SIGNAL c0_serial_1_17                   : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL mx_3                             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL mx_unsigned                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q0q0_1                           : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL q0q0_unsigned                    : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_50                           : unsigned(27 DOWNTO 0);  -- ufix28_En28
  SIGNAL c0_serialOut_0_8                 : vector_of_std_logic_vector28(0 TO 3);  -- ufix28 [4]
  SIGNAL c0_serial_0_18                   : vector_of_unsigned14(0 TO 3);  -- ufix14_En13 [4]
  SIGNAL c0_serial_0_19                   : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL c0_serial_1_18                   : vector_of_unsigned14(0 TO 3);  -- ufix14_En14 [4]
  SIGNAL c0_serial_1_19                   : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL v2q2_1                           : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL v2q2_unsigned                    : unsigned(13 DOWNTO 0);  -- ufix14_En13
  SIGNAL my_5                             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL my_unsigned_1                    : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_51                           : unsigned(27 DOWNTO 0);  -- ufix28_En27
  SIGNAL c0_serialOut_0_9                 : vector_of_std_logic_vector28(0 TO 3);  -- ufix28 [4]
  SIGNAL c0_serial_0_20                   : vector_of_unsigned28(0 TO 3);  -- ufix28_En27 [4]
  SIGNAL c0_serial_0_21                   : vector_of_std_logic_vector28(0 TO 3);  -- ufix28 [4]
  SIGNAL q3_7                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q2_8                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL c0_serial_1_20                   : vector_of_unsigned14(0 TO 3);  -- ufix14_En14 [4]
  SIGNAL c0_serial_1_21                   : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL tmp_52                           : std_logic_vector(27 DOWNTO 0);  -- ufix28
  SIGNAL tmp_unsigned_2                   : unsigned(27 DOWNTO 0);  -- ufix28_En27
  SIGNAL q3_8                             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL q3_unsigned_3                    : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_53                           : unsigned(41 DOWNTO 0);  -- ufix42_En41
  SIGNAL c0_serialOut_0_10                : vector_of_std_logic_vector42(0 TO 3);  -- ufix42 [4]
  SIGNAL tmp_54                           : signed(29 DOWNTO 0);  -- sfix30_En27
  SIGNAL tmp_55                           : unsigned(27 DOWNTO 0);  -- ufix28_En27
  SIGNAL tmp_56                           : signed(29 DOWNTO 0);  -- sfix30_En27
  SIGNAL tmp_57                           : signed(29 DOWNTO 0);  -- sfix30_En27
  SIGNAL tmp_58                           : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL tmp_59                           : unsigned(27 DOWNTO 0);  -- ufix28_En28
  SIGNAL tmp_60                           : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL tmp_61                           : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL tmp_62                           : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL tmp_63                           : unsigned(27 DOWNTO 0);  -- ufix28_En27
  SIGNAL tmp_64                           : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL tmp_65                           : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL tmp_66                           : unsigned(27 DOWNTO 0);  -- ufix28_En28
  SIGNAL tmp_67                           : signed(47 DOWNTO 0);  -- sfix48_En41
  SIGNAL p335tmp_sub_cast                 : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL p335tmp_sub_cast_1               : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL p335tmp_sub_temp                 : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL tmp_68                           : unsigned(41 DOWNTO 0);  -- ufix42_En41
  SIGNAL tmp_69                           : signed(47 DOWNTO 0);  -- sfix48_En41
  SIGNAL tmp_70                           : signed(47 DOWNTO 0);  -- sfix48_En41
  SIGNAL delayMatch_regrsvd               : vector_of_unsigned14(0 TO 1);  -- ufix14 [2]
  SIGNAL mz_4                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL delayMatch_regrsvd_1             : vector_of_unsigned14(0 TO 1);  -- ufix14 [2]
  SIGNAL my_6                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL delayMatch_regrsvd_2             : vector_of_unsigned14(0 TO 1);  -- ufix14 [2]
  SIGNAL mx_4                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL c0_serial_0_22                   : vector_of_unsigned14(0 TO 3);  -- ufix14_En14 [4]
  SIGNAL c0_serial_0_23                   : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL tmp_71                           : unsigned(27 DOWNTO 0);  -- ufix28_En28
  SIGNAL q2q2                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_72                           : unsigned(27 DOWNTO 0);  -- ufix28_En28
  SIGNAL q3q3                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL c0_serial_1_22                   : vector_of_unsigned14(0 TO 3);  -- ufix14_En14 [4]
  SIGNAL c0_serial_1_23                   : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL mz_5                             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL mz_unsigned                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q2q2_1                           : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL q2q2_unsigned                    : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_73                           : unsigned(27 DOWNTO 0);  -- ufix28_En28
  SIGNAL c0_serialOut_0_11                : vector_of_std_logic_vector28(0 TO 3);  -- ufix28 [4]
  SIGNAL tmp_74                           : signed(47 DOWNTO 0);  -- sfix48_En41
  SIGNAL tmp_75                           : unsigned(27 DOWNTO 0);  -- ufix28_En28
  SIGNAL tmp_76                           : signed(49 DOWNTO 0);  -- sfix50_En41
  SIGNAL p332tmp_sub_cast                 : signed(48 DOWNTO 0);  -- sfix49_En41
  SIGNAL p332tmp_sub_cast_1               : signed(48 DOWNTO 0);  -- sfix49_En41
  SIGNAL p332tmp_sub_temp                 : signed(48 DOWNTO 0);  -- sfix49_En41
  SIGNAL tmp_77                           : unsigned(27 DOWNTO 0);  -- ufix28_En28
  SIGNAL tmp_78                           : signed(49 DOWNTO 0);  -- sfix50_En41
  SIGNAL tmp_79                           : signed(49 DOWNTO 0);  -- sfix50_En41
  SIGNAL v2bz                             : signed(13 DOWNTO 0);  -- sfix14_En11
  SIGNAL c0_serial_0_24                   : vector_of_signed14(0 TO 3);  -- sfix14_En11 [4]
  SIGNAL c0_serial_0_25                   : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL delayMatch_regrsvd_3             : vector_of_unsigned14(0 TO 2);  -- ufix14 [3]
  SIGNAL q0_3                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL delayMatch_regrsvd_4             : vector_of_unsigned14(0 TO 2);  -- ufix14 [3]
  SIGNAL q3_9                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL delayMatch_regrsvd_5             : vector_of_unsigned14(0 TO 2);  -- ufix14 [3]
  SIGNAL q1_4                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL delayMatch_regrsvd_6             : vector_of_unsigned14(0 TO 2);  -- ufix14 [3]
  SIGNAL q2_9                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL c0_serial_1_24                   : vector_of_unsigned14(0 TO 3);  -- ufix14_En14 [4]
  SIGNAL c0_serial_1_25                   : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL v2bz_1                           : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL v2bz_signed                      : signed(13 DOWNTO 0);  -- sfix14_En11
  SIGNAL q0_4                             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL q0_unsigned_1                    : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL multiplier_cast_2                : signed(14 DOWNTO 0);  -- sfix15_En14
  SIGNAL multiplier_mul_temp_2            : signed(28 DOWNTO 0);  -- sfix29_En25
  SIGNAL tmp_80                           : signed(27 DOWNTO 0);  -- sfix28_En25
  SIGNAL c0_serialOut_0_12                : vector_of_std_logic_vector28(0 TO 3);  -- ufix28 [4]
  SIGNAL tmp_81                           : signed(27 DOWNTO 0);  -- sfix28_En25
  SIGNAL tmp_82                           : signed(27 DOWNTO 0);  -- sfix28_En25
  SIGNAL tmp_83                           : signed(27 DOWNTO 0);  -- sfix28_En25
  SIGNAL tmp_84                           : signed(27 DOWNTO 0);  -- sfix28_En25
  SIGNAL c0_serial_0_26                   : vector_of_signed28(0 TO 1);  -- sfix28_En25 [2]
  SIGNAL c0_serial_0_27                   : vector_of_std_logic_vector28(0 TO 1);  -- ufix28 [2]
  SIGNAL tmp_85                           : unsigned(29 DOWNTO 0);  -- ufix30_En28
  SIGNAL v2q0mz                           : unsigned(13 DOWNTO 0);  -- ufix14_En13
  SIGNAL c0_serial_0_28                   : vector_of_unsigned14(0 TO 2);  -- ufix14_En13 [3]
  SIGNAL c0_serial_0_29                   : vector_of_std_logic_vector14(0 TO 2);  -- ufix14 [3]
  SIGNAL q3_10                            : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q1_5                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q2_10                            : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL c0_serial_1_26                   : vector_of_unsigned14(0 TO 2);  -- ufix14_En14 [3]
  SIGNAL c0_serial_1_27                   : vector_of_std_logic_vector14(0 TO 2);  -- ufix14 [3]
  SIGNAL v2q0my_1                         : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL v2q0my_unsigned                  : unsigned(13 DOWNTO 0);  -- ufix14_En13
  SIGNAL q3_11                            : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL q3_unsigned_4                    : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_86                           : unsigned(27 DOWNTO 0);  -- ufix28_En27
  SIGNAL c0_serialOut_0_13                : vector_of_std_logic_vector28(0 TO 2);  -- ufix28 [3]
  SIGNAL tmp_87                           : unsigned(27 DOWNTO 0);  -- ufix28_En27
  SIGNAL tmp_88                           : unsigned(29 DOWNTO 0);  -- ufix30_En28
  SIGNAL tmp_89                           : unsigned(27 DOWNTO 0);  -- ufix28_En28
  SIGNAL tmp_90                           : unsigned(29 DOWNTO 0);  -- ufix30_En28
  SIGNAL tmp_91                           : unsigned(29 DOWNTO 0);  -- ufix30_En28
  SIGNAL tmp_92                           : unsigned(27 DOWNTO 0);  -- ufix28_En27
  SIGNAL tmp_93                           : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL p357tmp_sub_cast                 : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL p357tmp_sub_cast_1               : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL p357tmp_sub_temp                 : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL tmp_94                           : unsigned(27 DOWNTO 0);  -- ufix28_En27
  SIGNAL tmp_95                           : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL tmp_96                           : signed(32 DOWNTO 0);  -- sfix33_En28
  SIGNAL tmp_97                           : unsigned(27 DOWNTO 0);  -- ufix28_En28
  SIGNAL tmp_98                           : signed(34 DOWNTO 0);  -- sfix35_En28
  SIGNAL p355tmp_sub_cast                 : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL p355tmp_sub_cast_1               : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL p355tmp_sub_temp                 : signed(33 DOWNTO 0);  -- sfix34_En28
  SIGNAL tmp_99                           : signed(34 DOWNTO 0);  -- sfix35_En28
  SIGNAL tmp_100                          : unsigned(27 DOWNTO 0);  -- ufix28_En28
  SIGNAL tmp_101                          : signed(34 DOWNTO 0);  -- sfix35_En28
  SIGNAL tmp_102                          : signed(34 DOWNTO 0);  -- sfix35_En28
  SIGNAL tmp_103                          : signed(48 DOWNTO 0);  -- sfix49_En41
  SIGNAL tmp_104                          : unsigned(41 DOWNTO 0);  -- ufix42_En41
  SIGNAL tmp_105                          : signed(48 DOWNTO 0);  -- sfix49_En41
  SIGNAL delayMatch_regrsvd_7             : vector_of_unsigned14(0 TO 1);  -- ufix14 [2]
  SIGNAL my_7                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL delayMatch_regrsvd_8             : vector_of_unsigned14(0 TO 1);  -- ufix14 [2]
  SIGNAL mx_5                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL c0_serial_0_30                   : vector_of_unsigned14(0 TO 1);  -- ufix14_En14 [2]
  SIGNAL c0_serial_0_31                   : vector_of_std_logic_vector14(0 TO 1);  -- ufix14 [2]
  SIGNAL c0_serial_1_28                   : vector_of_unsigned14(0 TO 1);  -- ufix14_En14 [2]
  SIGNAL c0_serial_1_29                   : vector_of_std_logic_vector14(0 TO 1);  -- ufix14 [2]
  SIGNAL my_8                             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL my_unsigned_2                    : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL q3q3_1                           : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL q3q3_unsigned                    : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_106                          : unsigned(27 DOWNTO 0);  -- ufix28_En28
  SIGNAL c0_serialOut_0_14                : vector_of_std_logic_vector28(0 TO 1);  -- ufix28 [2]
  SIGNAL tmp_107                          : signed(48 DOWNTO 0);  -- sfix49_En41
  SIGNAL tmp_108                          : signed(48 DOWNTO 0);  -- sfix49_En41
  SIGNAL tmp_109                          : unsigned(27 DOWNTO 0);  -- ufix28_En28
  SIGNAL hy                               : signed(13 DOWNTO 0);  -- sfix14_En11
  SIGNAL p350hy_sub_cast                  : signed(49 DOWNTO 0);  -- sfix50_En41
  SIGNAL p350hy_sub_cast_1                : signed(49 DOWNTO 0);  -- sfix50_En41
  SIGNAL p350hy_sub_temp                  : signed(49 DOWNTO 0);  -- sfix50_En41
  SIGNAL tmp_110                          : unsigned(27 DOWNTO 0);  -- ufix28_En28
  SIGNAL tmp_111                          : unsigned(27 DOWNTO 0);  -- ufix28_En27
  SIGNAL tmp_112                          : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL p370tmp_sub_cast                 : signed(29 DOWNTO 0);  -- sfix30_En28
  SIGNAL p370tmp_sub_cast_1               : signed(29 DOWNTO 0);  -- sfix30_En28
  SIGNAL p370tmp_sub_temp                 : signed(29 DOWNTO 0);  -- sfix30_En28
  SIGNAL tmp_113                          : unsigned(27 DOWNTO 0);  -- ufix28_En27
  SIGNAL tmp_114                          : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL tmp_115                          : signed(30 DOWNTO 0);  -- sfix31_En28
  SIGNAL tmp_116                          : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL tmp_117                          : unsigned(27 DOWNTO 0);  -- ufix28_En28
  SIGNAL tmp_118                          : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL tmp_119                          : signed(31 DOWNTO 0);  -- sfix32_En28
  SIGNAL tmp_120                          : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL tmp_121                          : unsigned(41 DOWNTO 0);  -- ufix42_En41
  SIGNAL tmp_122                          : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL tmp_123                          : signed(45 DOWNTO 0);  -- sfix46_En41
  SIGNAL tmp_124                          : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL tmp_125                          : unsigned(41 DOWNTO 0);  -- ufix42_En41
  SIGNAL tmp_126                          : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL tmp_127                          : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL tmp_128                          : signed(46 DOWNTO 0);  -- sfix47_En41
  SIGNAL tmp_129                          : unsigned(27 DOWNTO 0);  -- ufix28_En28
  SIGNAL tmp_130                          : unsigned(27 DOWNTO 0);  -- ufix28_En28
  SIGNAL hx                               : signed(13 DOWNTO 0);  -- sfix14_En11
  SIGNAL p360hx_sub_cast                  : signed(47 DOWNTO 0);  -- sfix48_En41
  SIGNAL p360hx_sub_cast_1                : signed(47 DOWNTO 0);  -- sfix48_En41
  SIGNAL p360hx_sub_temp                  : signed(47 DOWNTO 0);  -- sfix48_En41
  SIGNAL p360hx_sub_cast_2                : signed(48 DOWNTO 0);  -- sfix49_En41
  SIGNAL p360hx_sub_cast_3                : signed(48 DOWNTO 0);  -- sfix49_En41
  SIGNAL p360hx_sub_temp_1                : signed(48 DOWNTO 0);  -- sfix49_En41
  SIGNAL c0_serial_0_32                   : vector_of_signed14(0 TO 1);  -- sfix14_En11 [2]
  SIGNAL c0_serial_0_33                   : vector_of_std_logic_vector14(0 TO 1);  -- ufix14 [2]
  SIGNAL c0_serial_1_30                   : vector_of_signed14(0 TO 1);  -- sfix14_En11 [2]
  SIGNAL c0_serial_1_31                   : vector_of_std_logic_vector14(0 TO 1);  -- ufix14 [2]
  SIGNAL hy_1                             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL hy_signed                        : signed(13 DOWNTO 0);  -- sfix14_En11
  SIGNAL hy_2                             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL hy_signed_1                      : signed(13 DOWNTO 0);  -- sfix14_En11
  SIGNAL tmp_131                          : signed(27 DOWNTO 0);  -- sfix28_En22
  SIGNAL c0_serialOut_0_15                : vector_of_std_logic_vector28(0 TO 1);  -- ufix28 [2]
  SIGNAL tmp_132                          : signed(27 DOWNTO 0);  -- sfix28_En22
  SIGNAL tmp_133                          : signed(28 DOWNTO 0);  -- sfix29_En22
  SIGNAL tmp_134                          : signed(27 DOWNTO 0);  -- sfix28_En22
  SIGNAL tmp_135                          : signed(28 DOWNTO 0);  -- sfix29_En22
  SIGNAL tmp_136                          : signed(28 DOWNTO 0);  -- sfix29_En22
  SIGNAL tmp_137                          : std_logic;
  SIGNAL y_y                              : signed(14 DOWNTO 0);  -- sfix15_En11
  SIGNAL y_y_1                            : signed(14 DOWNTO 0);  -- sfix15_En11
  SIGNAL delayMatch_regrsvd_9             : vector_of_signed15(0 TO 3);  -- sfix15 [4]
  SIGNAL y_y_2                            : signed(14 DOWNTO 0);  -- sfix15_En11
  SIGNAL tmp_138                          : signed(14 DOWNTO 0);  -- sfix15_En11
  SIGNAL v2bx                             : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL c0_serial_0_34                   : vector_of_unsigned14(0 TO 3);  -- ufix14_En12 [4]
  SIGNAL c0_serial_0_35                   : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL tmp_139                          : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL p202tmp_sub_cast                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p202tmp_sub_temp                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p202tmp_sub_cast_1               : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL p202tmp_sub_cast_2               : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL delayMatch_regrsvd_10            : vector_of_signed17(0 TO 1);  -- sfix17 [2]
  SIGNAL tmp_140                          : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL tmp_141                          : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL p241tmp_sub_cast                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p241tmp_sub_temp                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p241tmp_sub_cast_1               : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL p241tmp_sub_cast_2               : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL delayMatch_regrsvd_11            : vector_of_signed17(0 TO 1);  -- sfix17 [2]
  SIGNAL tmp_142                          : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL tmp_143                          : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL p281tmp_sub_cast                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p281tmp_sub_temp                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p281tmp_sub_cast_1               : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL p281tmp_sub_cast_2               : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL delayMatch_regrsvd_12            : vector_of_signed17(0 TO 1);  -- sfix17 [2]
  SIGNAL tmp_144                          : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL tmp_145                          : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL p319tmp_sub_cast                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p319tmp_sub_temp                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p319tmp_sub_cast_1               : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL p319tmp_sub_cast_2               : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL delayMatch_regrsvd_13            : vector_of_signed17(0 TO 1);  -- sfix17 [2]
  SIGNAL tmp_146                          : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL c0_serial_1_32                   : vector_of_signed17(0 TO 3);  -- sfix17_En14 [4]
  SIGNAL c0_serial_1_33                   : vector_of_std_logic_vector17(0 TO 3);  -- ufix17 [4]
  SIGNAL v2bx_1                           : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL v2bx_unsigned                    : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL tmp_147                          : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL tmp_signed_3                     : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL multiplier_cast_3                : signed(14 DOWNTO 0);  -- sfix15_En12
  SIGNAL multiplier_mul_temp_3            : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL tmp_148                          : signed(30 DOWNTO 0);  -- sfix31_En26
  SIGNAL c0_serialOut_0_16                : vector_of_std_logic_vector31(0 TO 3);  -- ufix31 [4]
  SIGNAL tmp_149                          : signed(30 DOWNTO 0);  -- sfix31_En26
  SIGNAL tmp_150                          : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL c0_serial_0_36                   : vector_of_signed14(0 TO 3);  -- sfix14_En11 [4]
  SIGNAL c0_serial_0_37                   : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL tmp_151                          : unsigned(27 DOWNTO 0);  -- ufix28_En28
  SIGNAL q0q2                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_152                          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p200tmp_sub_cast                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p200tmp_sub_cast_1               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayMatch_regrsvd_14            : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL tmp_153                          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL tmp_154                          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p239tmp_sub_cast                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p239tmp_sub_cast_1               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayMatch_regrsvd_15            : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL tmp_155                          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL tmp_156                          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p279tmp_sub_cast                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p279tmp_sub_cast_1               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayMatch_regrsvd_16            : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL tmp_157                          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL tmp_158                          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p317tmp_sub_cast                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p317tmp_sub_cast_1               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayMatch_regrsvd_17            : vector_of_signed16(0 TO 1);  -- sfix16 [2]
  SIGNAL tmp_159                          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL c0_serial_1_34                   : vector_of_signed16(0 TO 3);  -- sfix16_En14 [4]
  SIGNAL c0_serial_1_35                   : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL v2bz_2                           : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL v2bz_signed_1                    : signed(13 DOWNTO 0);  -- sfix14_En11
  SIGNAL tmp_160                          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL tmp_signed_4                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL tmp_161                          : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL c0_serialOut_0_17                : vector_of_std_logic_vector30(0 TO 3);  -- ufix30 [4]
  SIGNAL tmp_162                          : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL tmp_163                          : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL tmp_164                          : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL tmp_165                          : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL tmp_166                          : signed(30 DOWNTO 0);  -- sfix31_En26
  SIGNAL tmp_167                          : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL tmp_168                          : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL tmp_169                          : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL tmp_170                          : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL tmp_171                          : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL delayMatch_regrsvd_18            : vector_of_unsigned14(0 TO 4);  -- ufix14 [5]
  SIGNAL mx_6                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_172                          : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL p277tmp_sub_cast                 : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL p277tmp_sub_cast_1               : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL delayMatch_regrsvd_19            : vector_of_unsigned14(0 TO 4);  -- ufix14 [5]
  SIGNAL mx_7                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_173                          : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL p315tmp_sub_cast                 : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL p315tmp_sub_cast_1               : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL c0_serial_1_36                   : vector_of_signed33(0 TO 1);  -- sfix33_En26 [2]
  SIGNAL c0_serial_1_37                   : vector_of_std_logic_vector33(0 TO 1);  -- ufix33 [2]
  SIGNAL tmp_174                          : std_logic_vector(27 DOWNTO 0);  -- ufix28
  SIGNAL tmp_signed_5                     : signed(27 DOWNTO 0);  -- sfix28_En25
  SIGNAL tmp_175                          : std_logic_vector(32 DOWNTO 0);  -- ufix33
  SIGNAL tmp_signed_6                     : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL tmp_176                          : signed(60 DOWNTO 0);  -- sfix61_En51
  SIGNAL c0_serialOut_0_18                : vector_of_std_logic_vector61(0 TO 1);  -- ufix61 [2]
  SIGNAL c0_serial_0_38                   : vector_of_unsigned14(0 TO 3);  -- ufix14_En12 [4]
  SIGNAL c0_serial_0_39                   : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL delayMatch_regrsvd_20            : vector_of_unsigned14(0 TO 3);  -- ufix14 [4]
  SIGNAL q1_6                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL delayMatch_regrsvd_21            : vector_of_unsigned14(0 TO 3);  -- ufix14 [4]
  SIGNAL q0_5                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL delayMatch_regrsvd_22            : vector_of_unsigned14(0 TO 3);  -- ufix14 [4]
  SIGNAL q3_12                            : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL c0_serial_1_38                   : vector_of_unsigned14(0 TO 3);  -- ufix14_En14 [4]
  SIGNAL c0_serial_1_39                   : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL v2bx_2                           : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL v2bx_unsigned_1                  : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL q1_7                             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL q1_unsigned_1                    : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_177                          : unsigned(27 DOWNTO 0);  -- ufix28_En26
  SIGNAL c0_serialOut_0_19                : vector_of_std_logic_vector28(0 TO 3);  -- ufix28 [4]
  SIGNAL tmp_178                          : unsigned(27 DOWNTO 0);  -- ufix28_En26
  SIGNAL tmp_179                          : signed(29 DOWNTO 0);  -- sfix30_En26
  SIGNAL c0_serial_0_40                   : vector_of_signed14(0 TO 3);  -- sfix14_En11 [4]
  SIGNAL c0_serial_0_41                   : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL delayMatch_regrsvd_23            : vector_of_unsigned14(0 TO 2);  -- ufix14 [3]
  SIGNAL q2_11                            : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL delayMatch_regrsvd_24            : vector_of_unsigned14(0 TO 2);  -- ufix14 [3]
  SIGNAL q1_8                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL delayMatch_regrsvd_25            : vector_of_unsigned14(0 TO 2);  -- ufix14 [3]
  SIGNAL q3_13                            : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL delayMatch_regrsvd_26            : vector_of_unsigned14(0 TO 2);  -- ufix14 [3]
  SIGNAL q0_6                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL c0_serial_1_40                   : vector_of_unsigned14(0 TO 3);  -- ufix14_En14 [4]
  SIGNAL c0_serial_1_41                   : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL v2bz_3                           : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL v2bz_signed_2                    : signed(13 DOWNTO 0);  -- sfix14_En11
  SIGNAL q2_12                            : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL q2_unsigned_3                    : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL multiplier_cast_4                : signed(14 DOWNTO 0);  -- sfix15_En14
  SIGNAL multiplier_mul_temp_4            : signed(28 DOWNTO 0);  -- sfix29_En25
  SIGNAL tmp_180                          : signed(27 DOWNTO 0);  -- sfix28_En25
  SIGNAL c0_serialOut_0_20                : vector_of_std_logic_vector28(0 TO 3);  -- ufix28 [4]
  SIGNAL tmp_181                          : signed(27 DOWNTO 0);  -- sfix28_En25
  SIGNAL tmp_182                          : signed(29 DOWNTO 0);  -- sfix30_En26
  SIGNAL c0_serial_0_42                   : vector_of_unsigned14(0 TO 1);  -- ufix14_En12 [2]
  SIGNAL c0_serial_0_43                   : vector_of_std_logic_vector14(0 TO 1);  -- ufix14 [2]
  SIGNAL delayMatch_regrsvd_27            : vector_of_unsigned14(0 TO 3);  -- ufix14 [4]
  SIGNAL q2_13                            : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL c0_serial_1_42                   : vector_of_unsigned14(0 TO 1);  -- ufix14_En14 [2]
  SIGNAL c0_serial_1_43                   : vector_of_std_logic_vector14(0 TO 1);  -- ufix14 [2]
  SIGNAL v2bx_3                           : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL v2bx_unsigned_2                  : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL q2_14                            : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL q2_unsigned_4                    : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_183                          : unsigned(27 DOWNTO 0);  -- ufix28_En26
  SIGNAL c0_serialOut_0_21                : vector_of_std_logic_vector28(0 TO 1);  -- ufix28 [2]
  SIGNAL tmp_184                          : unsigned(27 DOWNTO 0);  -- ufix28_En26
  SIGNAL tmp_185                          : signed(29 DOWNTO 0);  -- sfix30_En26
  SIGNAL tmp_186                          : signed(27 DOWNTO 0);  -- sfix28_En25
  SIGNAL tmp_187                          : signed(29 DOWNTO 0);  -- sfix30_En26
  SIGNAL tmp_188                          : signed(14 DOWNTO 0);  -- sfix15_En12
  SIGNAL p195tmp_cast                     : signed(14 DOWNTO 0);  -- sfix15_En12
  SIGNAL p195tmp_cast_1                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL p195tmp_cast_2                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL tmp_189                          : signed(14 DOWNTO 0);  -- sfix15_En12
  SIGNAL p313tmp_cast                     : signed(14 DOWNTO 0);  -- sfix15_En12
  SIGNAL p313tmp_cast_1                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL p313tmp_cast_2                   : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL c0_serial_0_44                   : vector_of_signed15(0 TO 1);  -- sfix15_En12 [2]
  SIGNAL c0_serial_0_45                   : vector_of_std_logic_vector15(0 TO 1);  -- ufix15 [2]
  SIGNAL delayMatch_regrsvd_28            : vector_of_unsigned14(0 TO 3);  -- ufix14 [4]
  SIGNAL q0_7                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL delayMatch_regrsvd_29            : vector_of_unsigned14(0 TO 3);  -- ufix14 [4]
  SIGNAL q3_14                            : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL c0_serial_1_44                   : vector_of_unsigned14(0 TO 1);  -- ufix14_En14 [2]
  SIGNAL c0_serial_1_45                   : vector_of_std_logic_vector14(0 TO 1);  -- ufix14 [2]
  SIGNAL tmp_190                          : std_logic_vector(14 DOWNTO 0);  -- ufix15
  SIGNAL tmp_signed_7                     : signed(14 DOWNTO 0);  -- sfix15_En12
  SIGNAL q0_8                             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL q0_unsigned_2                    : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL multiplier_cast_5                : signed(14 DOWNTO 0);  -- sfix15_En14
  SIGNAL multiplier_mul_temp_5            : signed(29 DOWNTO 0);  -- sfix30_En26
  SIGNAL tmp_191                          : signed(28 DOWNTO 0);  -- sfix29_En26
  SIGNAL c0_serialOut_0_22                : vector_of_std_logic_vector29(0 TO 1);  -- ufix29 [2]
  SIGNAL tmp_192                          : signed(28 DOWNTO 0);  -- sfix29_En26
  SIGNAL tmp_193                          : signed(29 DOWNTO 0);  -- sfix30_En26
  SIGNAL tmp_194                          : signed(27 DOWNTO 0);  -- sfix28_En25
  SIGNAL tmp_195                          : signed(29 DOWNTO 0);  -- sfix30_En26
  SIGNAL tmp_196                          : signed(28 DOWNTO 0);  -- sfix29_En26
  SIGNAL tmp_197                          : signed(29 DOWNTO 0);  -- sfix30_En26
  SIGNAL tmp_198                          : signed(27 DOWNTO 0);  -- sfix28_En25
  SIGNAL tmp_199                          : signed(29 DOWNTO 0);  -- sfix30_En26
  SIGNAL tmp_200                          : signed(29 DOWNTO 0);  -- sfix30_En26
  SIGNAL tmp_201                          : signed(29 DOWNTO 0);  -- sfix30_En26
  SIGNAL tmp_202                          : signed(29 DOWNTO 0);  -- sfix30_En26
  SIGNAL tmp_203                          : signed(29 DOWNTO 0);  -- sfix30_En26
  SIGNAL tmp_204                          : signed(29 DOWNTO 0);  -- sfix30_En26
  SIGNAL tmp_205                          : signed(29 DOWNTO 0);  -- sfix30_En26
  SIGNAL tmp_206                          : signed(29 DOWNTO 0);  -- sfix30_En26
  SIGNAL tmp_207                          : signed(29 DOWNTO 0);  -- sfix30_En26
  SIGNAL c0_serial_0_46                   : vector_of_signed30(0 TO 3);  -- sfix30_En26 [4]
  SIGNAL c0_serial_0_47                   : vector_of_std_logic_vector30(0 TO 3);  -- ufix30 [4]
  SIGNAL c0_serial_0_48                   : vector_of_unsigned14(0 TO 3);  -- ufix14_En12 [4]
  SIGNAL c0_serial_0_49                   : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL tmp_208                          : unsigned(27 DOWNTO 0);  -- ufix28_En28
  SIGNAL q1q2                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_209                          : unsigned(27 DOWNTO 0);  -- ufix28_En28
  SIGNAL q0q3                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_210                          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p191tmp_sub_cast                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p191tmp_sub_cast_1               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayMatch_regrsvd_30            : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL tmp_211                          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL tmp_212                          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p231tmp_sub_cast                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p231tmp_sub_cast_1               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayMatch_regrsvd_31            : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL tmp_213                          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL tmp_214                          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p271tmp_sub_cast                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p271tmp_sub_cast_1               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayMatch_regrsvd_32            : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL tmp_215                          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL tmp_216                          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p309tmp_sub_cast                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p309tmp_sub_cast_1               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL delayMatch_regrsvd_33            : vector_of_signed16(0 TO 2);  -- sfix16 [3]
  SIGNAL tmp_217                          : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL c0_serial_1_46                   : vector_of_signed16(0 TO 3);  -- sfix16_En14 [4]
  SIGNAL c0_serial_1_47                   : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL v2bx_4                           : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL v2bx_unsigned_3                  : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL tmp_218                          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL tmp_signed_8                     : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL multiplier_cast_6                : signed(14 DOWNTO 0);  -- sfix15_En12
  SIGNAL multiplier_mul_temp_6            : signed(30 DOWNTO 0);  -- sfix31_En26
  SIGNAL tmp_219                          : signed(29 DOWNTO 0);  -- sfix30_En26
  SIGNAL c0_serialOut_0_23                : vector_of_std_logic_vector30(0 TO 3);  -- ufix30 [4]
  SIGNAL tmp_220                          : signed(29 DOWNTO 0);  -- sfix30_En26
  SIGNAL tmp_221                          : signed(30 DOWNTO 0);  -- sfix31_En26
  SIGNAL c0_serial_0_50                   : vector_of_signed14(0 TO 3);  -- sfix14_En11 [4]
  SIGNAL c0_serial_0_51                   : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL tmp_222                          : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL tmp_223                          : unsigned(27 DOWNTO 0);  -- ufix28_En28
  SIGNAL q2q3                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_224                          : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL tmp_225                          : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL delayMatch_regrsvd_34            : vector_of_unsigned15(0 TO 1);  -- ufix15 [2]
  SIGNAL tmp_226                          : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL tmp_227                          : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL tmp_228                          : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL tmp_229                          : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL delayMatch_regrsvd_35            : vector_of_unsigned15(0 TO 1);  -- ufix15 [2]
  SIGNAL tmp_230                          : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL tmp_231                          : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL tmp_232                          : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL tmp_233                          : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL delayMatch_regrsvd_36            : vector_of_unsigned15(0 TO 1);  -- ufix15 [2]
  SIGNAL tmp_234                          : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL tmp_235                          : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL tmp_236                          : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL tmp_237                          : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL delayMatch_regrsvd_37            : vector_of_unsigned15(0 TO 1);  -- ufix15 [2]
  SIGNAL tmp_238                          : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL c0_serial_1_48                   : vector_of_unsigned15(0 TO 3);  -- ufix15_En14 [4]
  SIGNAL c0_serial_1_49                   : vector_of_std_logic_vector15(0 TO 3);  -- ufix15 [4]
  SIGNAL v2bz_4                           : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL v2bz_signed_3                    : signed(13 DOWNTO 0);  -- sfix14_En11
  SIGNAL tmp_239                          : std_logic_vector(14 DOWNTO 0);  -- ufix15
  SIGNAL tmp_unsigned_3                   : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL multiplier_cast_7                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL multiplier_mul_temp_7            : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL tmp_240                          : signed(28 DOWNTO 0);  -- sfix29_En25
  SIGNAL c0_serialOut_0_24                : vector_of_std_logic_vector29(0 TO 3);  -- ufix29 [4]
  SIGNAL tmp_241                          : signed(28 DOWNTO 0);  -- sfix29_En25
  SIGNAL tmp_242                          : signed(30 DOWNTO 0);  -- sfix31_En26
  SIGNAL tmp_243                          : signed(30 DOWNTO 0);  -- sfix31_En26
  SIGNAL tmp_244                          : signed(30 DOWNTO 0);  -- sfix31_En26
  SIGNAL tmp_245                          : signed(29 DOWNTO 0);  -- sfix30_En26
  SIGNAL tmp_246                          : signed(30 DOWNTO 0);  -- sfix31_En26
  SIGNAL tmp_247                          : signed(28 DOWNTO 0);  -- sfix29_En25
  SIGNAL tmp_248                          : signed(30 DOWNTO 0);  -- sfix31_En26
  SIGNAL tmp_249                          : signed(30 DOWNTO 0);  -- sfix31_En26
  SIGNAL tmp_250                          : signed(30 DOWNTO 0);  -- sfix31_En26
  SIGNAL tmp_251                          : signed(29 DOWNTO 0);  -- sfix30_En26
  SIGNAL tmp_252                          : signed(30 DOWNTO 0);  -- sfix31_En26
  SIGNAL tmp_253                          : signed(28 DOWNTO 0);  -- sfix29_En25
  SIGNAL tmp_254                          : signed(30 DOWNTO 0);  -- sfix31_En26
  SIGNAL tmp_255                          : signed(30 DOWNTO 0);  -- sfix31_En26
  SIGNAL tmp_256                          : signed(30 DOWNTO 0);  -- sfix31_En26
  SIGNAL tmp_257                          : signed(29 DOWNTO 0);  -- sfix30_En26
  SIGNAL tmp_258                          : signed(30 DOWNTO 0);  -- sfix31_En26
  SIGNAL tmp_259                          : signed(28 DOWNTO 0);  -- sfix29_En25
  SIGNAL tmp_260                          : signed(30 DOWNTO 0);  -- sfix31_En26
  SIGNAL tmp_261                          : signed(30 DOWNTO 0);  -- sfix31_En26
  SIGNAL tmp_262                          : signed(30 DOWNTO 0);  -- sfix31_En26
  SIGNAL delayMatch_regrsvd_38            : vector_of_unsigned14(0 TO 4);  -- ufix14 [5]
  SIGNAL my_9                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_263                          : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL p225tmp_sub_cast                 : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL p225tmp_sub_cast_1               : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL delayMatch_regrsvd_39            : vector_of_unsigned14(0 TO 4);  -- ufix14 [5]
  SIGNAL my_10                            : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_264                          : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL p265tmp_sub_cast                 : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL p265tmp_sub_cast_1               : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL delayMatch_regrsvd_40            : vector_of_unsigned14(0 TO 4);  -- ufix14 [5]
  SIGNAL my_11                            : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_265                          : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL p185tmp_sub_cast                 : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL p185tmp_sub_cast_1               : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL delayMatch_regrsvd_41            : vector_of_unsigned14(0 TO 4);  -- ufix14 [5]
  SIGNAL my_12                            : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_266                          : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL p303tmp_sub_cast                 : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL p303tmp_sub_cast_1               : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL c0_serial_1_50                   : vector_of_signed32(0 TO 3);  -- sfix32_En26 [4]
  SIGNAL c0_serial_1_51                   : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL tmp_267                          : std_logic_vector(29 DOWNTO 0);  -- ufix30
  SIGNAL tmp_signed_9                     : signed(29 DOWNTO 0);  -- sfix30_En26
  SIGNAL tmp_268                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_signed_10                    : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL tmp_269                          : signed(61 DOWNTO 0);  -- sfix62_En52
  SIGNAL c0_serialOut_0_25                : vector_of_std_logic_vector62(0 TO 3);  -- ufix62 [4]
  SIGNAL c0_serial_0_52                   : vector_of_unsigned28(0 TO 1);  -- ufix28_En26 [2]
  SIGNAL c0_serial_0_53                   : vector_of_std_logic_vector28(0 TO 1);  -- ufix28 [2]
  SIGNAL c0_serial_0_54                   : vector_of_unsigned14(0 TO 3);  -- ufix14_En12 [4]
  SIGNAL c0_serial_0_55                   : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL tmp_270                          : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL tmp_271                          : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL tmp_272                          : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL delayMatch_regrsvd_42            : vector_of_unsigned15(0 TO 2);  -- ufix15 [3]
  SIGNAL tmp_273                          : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL tmp_274                          : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL tmp_275                          : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL tmp_276                          : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL delayMatch_regrsvd_43            : vector_of_unsigned15(0 TO 2);  -- ufix15 [3]
  SIGNAL tmp_277                          : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL tmp_278                          : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL tmp_279                          : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL tmp_280                          : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL delayMatch_regrsvd_44            : vector_of_unsigned15(0 TO 2);  -- ufix15 [3]
  SIGNAL tmp_281                          : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL tmp_282                          : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL tmp_283                          : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL tmp_284                          : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL delayMatch_regrsvd_45            : vector_of_unsigned15(0 TO 2);  -- ufix15 [3]
  SIGNAL tmp_285                          : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL c0_serial_1_52                   : vector_of_unsigned15(0 TO 3);  -- ufix15_En14 [4]
  SIGNAL c0_serial_1_53                   : vector_of_std_logic_vector15(0 TO 3);  -- ufix15 [4]
  SIGNAL v2bx_5                           : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL v2bx_unsigned_4                  : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL tmp_286                          : std_logic_vector(14 DOWNTO 0);  -- ufix15
  SIGNAL tmp_unsigned_4                   : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL tmp_287                          : unsigned(28 DOWNTO 0);  -- ufix29_En26
  SIGNAL c0_serialOut_0_26                : vector_of_std_logic_vector29(0 TO 3);  -- ufix29 [4]
  SIGNAL tmp_288                          : unsigned(28 DOWNTO 0);  -- ufix29_En26
  SIGNAL tmp_289                          : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL c0_serial_0_56                   : vector_of_signed14(0 TO 3);  -- sfix14_En11 [4]
  SIGNAL c0_serial_0_57                   : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL q1q1_1                           : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_290                          : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL p177tmp_sub_cast                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p177tmp_sub_temp                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p177tmp_sub_cast_1               : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL p177tmp_sub_cast_2               : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL tmp_291                          : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL q1q1_2                           : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_292                          : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL p217tmp_sub_cast                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p217tmp_sub_temp                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p217tmp_sub_cast_1               : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL p217tmp_sub_cast_2               : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL tmp_293                          : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL q1q1_3                           : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_294                          : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL p257tmp_sub_cast                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p257tmp_sub_temp                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p257tmp_sub_cast_1               : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL p257tmp_sub_cast_2               : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL tmp_295                          : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL q1q1_4                           : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_296                          : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL p295tmp_sub_cast                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p295tmp_sub_temp                 : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL p295tmp_sub_cast_1               : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL p295tmp_sub_cast_2               : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL tmp_297                          : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL c0_serial_1_54                   : vector_of_signed17(0 TO 3);  -- sfix17_En14 [4]
  SIGNAL c0_serial_1_55                   : vector_of_std_logic_vector17(0 TO 3);  -- ufix17 [4]
  SIGNAL v2bz_5                           : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL v2bz_signed_4                    : signed(13 DOWNTO 0);  -- sfix14_En11
  SIGNAL tmp_298                          : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL tmp_signed_11                    : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL tmp_299                          : signed(30 DOWNTO 0);  -- sfix31_En25
  SIGNAL c0_serialOut_0_27                : vector_of_std_logic_vector31(0 TO 3);  -- ufix31 [4]
  SIGNAL tmp_300                          : signed(30 DOWNTO 0);  -- sfix31_En25
  SIGNAL tmp_301                          : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL tmp_302                          : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL tmp_303                          : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL tmp_304                          : unsigned(28 DOWNTO 0);  -- ufix29_En26
  SIGNAL tmp_305                          : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL tmp_306                          : signed(30 DOWNTO 0);  -- sfix31_En25
  SIGNAL tmp_307                          : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL tmp_308                          : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL tmp_309                          : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL delayMatch_regrsvd_46            : vector_of_unsigned14(0 TO 4);  -- ufix14 [5]
  SIGNAL mz_6                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_310                          : signed(33 DOWNTO 0);  -- sfix34_En26
  SIGNAL p175tmp_sub_cast                 : signed(33 DOWNTO 0);  -- sfix34_En26
  SIGNAL p175tmp_sub_cast_1               : signed(33 DOWNTO 0);  -- sfix34_En26
  SIGNAL delayMatch_regrsvd_47            : vector_of_unsigned14(0 TO 4);  -- ufix14 [5]
  SIGNAL mz_7                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_311                          : signed(33 DOWNTO 0);  -- sfix34_En26
  SIGNAL p293tmp_sub_cast                 : signed(33 DOWNTO 0);  -- sfix34_En26
  SIGNAL p293tmp_sub_cast_1               : signed(33 DOWNTO 0);  -- sfix34_En26
  SIGNAL c0_serial_1_56                   : vector_of_signed34(0 TO 1);  -- sfix34_En26 [2]
  SIGNAL c0_serial_1_57                   : vector_of_std_logic_vector34(0 TO 1);  -- ufix34 [2]
  SIGNAL tmp_312                          : std_logic_vector(27 DOWNTO 0);  -- ufix28
  SIGNAL tmp_unsigned_5                   : unsigned(27 DOWNTO 0);  -- ufix28_En26
  SIGNAL tmp_313                          : std_logic_vector(33 DOWNTO 0);  -- ufix34
  SIGNAL tmp_signed_12                    : signed(33 DOWNTO 0);  -- sfix34_En26
  SIGNAL multiplier_cast_8                : signed(28 DOWNTO 0);  -- sfix29_En26
  SIGNAL multiplier_mul_temp_8            : signed(62 DOWNTO 0);  -- sfix63_En52
  SIGNAL tmp_314                          : signed(61 DOWNTO 0);  -- sfix62_En52
  SIGNAL c0_serialOut_0_28                : vector_of_std_logic_vector62(0 TO 1);  -- ufix62 [2]
  SIGNAL delayMatch_regrsvd_48            : vector_of_signed35(0 TO 3);  -- sfix35 [4]
  SIGNAL tmp_315                          : signed(34 DOWNTO 0);  -- sfix35_En27
  SIGNAL tmp_316                          : signed(60 DOWNTO 0);  -- sfix61_En51
  SIGNAL tmp_317                          : signed(63 DOWNTO 0);  -- sfix64_En52
  SIGNAL p314tmp_sub_cast                 : signed(61 DOWNTO 0);  -- sfix62_En51
  SIGNAL p314tmp_sub_cast_1               : signed(61 DOWNTO 0);  -- sfix62_En51
  SIGNAL p314tmp_sub_temp                 : signed(61 DOWNTO 0);  -- sfix62_En51
  SIGNAL tmp_318                          : signed(61 DOWNTO 0);  -- sfix62_En52
  SIGNAL tmp_319                          : signed(63 DOWNTO 0);  -- sfix64_En52
  SIGNAL tmp_320                          : signed(63 DOWNTO 0);  -- sfix64_En52
  SIGNAL tmp_321                          : signed(64 DOWNTO 0);  -- sfix65_En52
  SIGNAL tmp_322                          : signed(61 DOWNTO 0);  -- sfix62_En52
  SIGNAL tmp_323                          : signed(64 DOWNTO 0);  -- sfix65_En52
  SIGNAL tmp_324                          : signed(64 DOWNTO 0);  -- sfix65_En52
  SIGNAL s0_1                             : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL v2q1_2                           : unsigned(13 DOWNTO 0);  -- ufix14_En13
  SIGNAL v2q3                             : unsigned(13 DOWNTO 0);  -- ufix14_En13
  SIGNAL p385v2q3_cast                    : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL v2q3_1                           : unsigned(13 DOWNTO 0);  -- ufix14_En13
  SIGNAL v2q2_2                           : unsigned(13 DOWNTO 0);  -- ufix14_En13
  SIGNAL c0_serial_0_58                   : vector_of_unsigned14(0 TO 3);  -- ufix14_En13 [4]
  SIGNAL c0_serial_0_59                   : vector_of_std_logic_vector14(0 TO 3);  -- ufix14 [4]
  SIGNAL ax_4                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_325                          : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL p213tmp_sub_cast                 : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL p213tmp_sub_cast_1               : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL p213tmp_sub_cast_2               : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL p213tmp_sub_temp                 : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL p213tmp_sub_cast_3               : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL p213tmp_sub_cast_4               : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL ax_5                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_326                          : unsigned(16 DOWNTO 0);  -- ufix17_En14
  SIGNAL p211tmp_cast                     : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL tmp_327                          : unsigned(16 DOWNTO 0);  -- ufix17_En14
  SIGNAL tmp_328                          : unsigned(16 DOWNTO 0);  -- ufix17_En14
  SIGNAL tmp_329                          : unsigned(16 DOWNTO 0);  -- ufix17_En14
  SIGNAL p250tmp_cast                     : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL tmp_330                          : unsigned(16 DOWNTO 0);  -- ufix17_En14
  SIGNAL tmp_331                          : unsigned(16 DOWNTO 0);  -- ufix17_En14
  SIGNAL tmp_332                          : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL p291tmp_sub_cast                 : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL p291tmp_sub_cast_1               : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL p291tmp_sub_cast_2               : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL p291tmp_sub_temp                 : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL p291tmp_sub_cast_3               : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL p291tmp_sub_cast_4               : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL ay_4                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_333                          : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL p209tmp_sub_cast                 : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL p209tmp_sub_cast_1               : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL ay_5                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_334                          : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL p248tmp_sub_cast                 : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL p248tmp_sub_cast_1               : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL c0_serial_1_58                   : vector_of_signed19(0 TO 3);  -- sfix19_En14 [4]
  SIGNAL c0_serial_1_59                   : vector_of_std_logic_vector19(0 TO 3);  -- ufix19 [4]
  SIGNAL v2q1_3                           : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL v2q1_unsigned                    : unsigned(13 DOWNTO 0);  -- ufix14_En13
  SIGNAL tmp_335                          : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL tmp_signed_13                    : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL multiplier_cast_9                : signed(14 DOWNTO 0);  -- sfix15_En13
  SIGNAL multiplier_mul_temp_9            : signed(33 DOWNTO 0);  -- sfix34_En27
  SIGNAL tmp_336                          : signed(32 DOWNTO 0);  -- sfix33_En27
  SIGNAL c0_serialOut_0_29                : vector_of_std_logic_vector33(0 TO 3);  -- ufix33 [4]
  SIGNAL tmp_337                          : signed(32 DOWNTO 0);  -- sfix33_En27
  SIGNAL tmp_338                          : signed(33 DOWNTO 0);  -- sfix34_En27
  SIGNAL tmp_339                          : signed(32 DOWNTO 0);  -- sfix33_En27
  SIGNAL tmp_340                          : signed(33 DOWNTO 0);  -- sfix34_En27
  SIGNAL tmp_341                          : signed(33 DOWNTO 0);  -- sfix34_En27
  SIGNAL tmp_342                          : unsigned(16 DOWNTO 0);  -- ufix17_En14
  SIGNAL delayMatch_regrsvd_49            : vector_of_unsigned17(0 TO 1);  -- ufix17 [2]
  SIGNAL tmp_343                          : unsigned(16 DOWNTO 0);  -- ufix17_En14
  SIGNAL tmp_344                          : unsigned(16 DOWNTO 0);  -- ufix17_En14
  SIGNAL delayMatch_regrsvd_50            : vector_of_unsigned17(0 TO 1);  -- ufix17 [2]
  SIGNAL tmp_345                          : unsigned(16 DOWNTO 0);  -- ufix17_En14
  SIGNAL c0_serial_0_60                   : vector_of_unsigned17(0 TO 1);  -- ufix17_En14 [2]
  SIGNAL c0_serial_0_61                   : vector_of_std_logic_vector17(0 TO 1);  -- ufix17 [2]
  SIGNAL q1q1_5                           : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL az_regout                        : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL az_regout_1                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL az_regout_2                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL az_regout_3                      : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL az_1                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL delayMatch_regrsvd_51            : vector_of_unsigned14(0 TO 1);  -- ufix14 [2]
  SIGNAL az_2                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_346                          : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL p245tmp_sub_cast                 : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL p245tmp_sub_cast_1               : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL p245tmp_sub_temp                 : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL p245tmp_sub_cast_2               : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL p245tmp_sub_cast_3               : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL p245tmp_sub_cast_4               : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL p245tmp_sub_temp_1               : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL p245tmp_sub_cast_5               : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL p245tmp_sub_cast_6               : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL q1q1_6                           : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL delayMatch_regrsvd_52            : vector_of_unsigned14(0 TO 1);  -- ufix14 [2]
  SIGNAL az_3                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_347                          : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL p284tmp_sub_cast                 : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL p284tmp_sub_cast_1               : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL p284tmp_sub_temp                 : signed(16 DOWNTO 0);  -- sfix17_En14
  SIGNAL p284tmp_sub_cast_2               : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL p284tmp_sub_cast_3               : unsigned(15 DOWNTO 0);  -- ufix16_En14
  SIGNAL p284tmp_sub_cast_4               : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL p284tmp_sub_temp_1               : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL p284tmp_sub_cast_5               : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL p284tmp_sub_cast_6               : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL c0_serial_1_60                   : vector_of_signed19(0 TO 1);  -- sfix19_En14 [2]
  SIGNAL c0_serial_1_61                   : vector_of_std_logic_vector19(0 TO 1);  -- ufix19 [2]
  SIGNAL tmp_348                          : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL tmp_unsigned_6                   : unsigned(16 DOWNTO 0);  -- ufix17_En14
  SIGNAL tmp_349                          : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL tmp_signed_14                    : signed(18 DOWNTO 0);  -- sfix19_En14
  SIGNAL multiplier_cast_10               : signed(17 DOWNTO 0);  -- sfix18_En14
  SIGNAL multiplier_mul_temp_10           : signed(36 DOWNTO 0);  -- sfix37_En28
  SIGNAL tmp_350                          : signed(35 DOWNTO 0);  -- sfix36_En28
  SIGNAL c0_serialOut_0_30                : vector_of_std_logic_vector36(0 TO 1);  -- ufix36 [2]
  SIGNAL tmp_351                          : signed(33 DOWNTO 0);  -- sfix34_En27
  SIGNAL tmp_352                          : signed(35 DOWNTO 0);  -- sfix36_En28
  SIGNAL tmp_353                          : signed(61 DOWNTO 0);  -- sfix62_En51
  SIGNAL p283tmp_sub_cast                 : signed(36 DOWNTO 0);  -- sfix37_En28
  SIGNAL p283tmp_sub_cast_1               : signed(36 DOWNTO 0);  -- sfix37_En28
  SIGNAL p283tmp_sub_temp                 : signed(36 DOWNTO 0);  -- sfix37_En28
  SIGNAL tmp_354                          : unsigned(27 DOWNTO 0);  -- ufix28_En26
  SIGNAL v4bz                             : signed(13 DOWNTO 0);  -- sfix14_En10
  SIGNAL p328v4bz_cast                    : signed(16 DOWNTO 0);  -- sfix17_En11
  SIGNAL p328v4bz_cast_1                  : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL c0_serial_0_62                   : vector_of_signed14(0 TO 1);  -- sfix14_En10 [2]
  SIGNAL c0_serial_0_63                   : vector_of_std_logic_vector14(0 TO 1);  -- ufix14 [2]
  SIGNAL delayMatch_regrsvd_53            : vector_of_unsigned14(0 TO 2);  -- ufix14 [3]
  SIGNAL q2_15                            : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL delayMatch_regrsvd_54            : vector_of_unsigned14(0 TO 2);  -- ufix14 [3]
  SIGNAL q1_9                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL c0_serial_1_62                   : vector_of_unsigned14(0 TO 1);  -- ufix14_En14 [2]
  SIGNAL c0_serial_1_63                   : vector_of_std_logic_vector14(0 TO 1);  -- ufix14 [2]
  SIGNAL v4bz_1                           : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL v4bz_signed                      : signed(13 DOWNTO 0);  -- sfix14_En10
  SIGNAL q2_16                            : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL q2_unsigned_5                    : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL multiplier_cast_11               : signed(14 DOWNTO 0);  -- sfix15_En14
  SIGNAL multiplier_mul_temp_11           : signed(28 DOWNTO 0);  -- sfix29_En24
  SIGNAL tmp_355                          : signed(27 DOWNTO 0);  -- sfix28_En24
  SIGNAL c0_serialOut_0_31                : vector_of_std_logic_vector28(0 TO 1);  -- ufix28 [2]
  SIGNAL tmp_356                          : signed(27 DOWNTO 0);  -- sfix28_En24
  SIGNAL tmp_357                          : unsigned(27 DOWNTO 0);  -- ufix28_En26
  SIGNAL tmp_358                          : signed(27 DOWNTO 0);  -- sfix28_En24
  SIGNAL tmp_359                          : signed(27 DOWNTO 0);  -- sfix28_En24
  SIGNAL tmp_360                          : signed(30 DOWNTO 0);  -- sfix31_En26
  SIGNAL p222tmp_sub_cast                 : signed(30 DOWNTO 0);  -- sfix31_En26
  SIGNAL p222tmp_sub_cast_1               : signed(30 DOWNTO 0);  -- sfix31_En26
  SIGNAL tmp_361                          : signed(27 DOWNTO 0);  -- sfix28_En24
  SIGNAL tmp_362                          : signed(30 DOWNTO 0);  -- sfix31_En26
  SIGNAL p262tmp_sub_cast                 : signed(30 DOWNTO 0);  -- sfix31_En26
  SIGNAL p262tmp_sub_cast_1               : signed(30 DOWNTO 0);  -- sfix31_En26
  SIGNAL c0_serial_0_64                   : vector_of_signed31(0 TO 1);  -- sfix31_En26 [2]
  SIGNAL c0_serial_0_65                   : vector_of_std_logic_vector31(0 TO 1);  -- ufix31 [2]
  SIGNAL tmp_363                          : unsigned(28 DOWNTO 0);  -- ufix29_En26
  SIGNAL tmp_364                          : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL tmp_365                          : signed(30 DOWNTO 0);  -- sfix31_En25
  SIGNAL tmp_366                          : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL tmp_367                          : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL tmp_368                          : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL tmp_369                          : unsigned(28 DOWNTO 0);  -- ufix29_En26
  SIGNAL tmp_370                          : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL tmp_371                          : signed(30 DOWNTO 0);  -- sfix31_En25
  SIGNAL tmp_372                          : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL tmp_373                          : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL tmp_374                          : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL delayMatch_regrsvd_55            : vector_of_unsigned14(0 TO 4);  -- ufix14 [5]
  SIGNAL mz_8                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_375                          : signed(33 DOWNTO 0);  -- sfix34_En26
  SIGNAL p215tmp_sub_cast                 : signed(33 DOWNTO 0);  -- sfix34_En26
  SIGNAL p215tmp_sub_cast_1               : signed(33 DOWNTO 0);  -- sfix34_En26
  SIGNAL delayMatch_regrsvd_56            : vector_of_unsigned14(0 TO 4);  -- ufix14 [5]
  SIGNAL mz_9                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_376                          : signed(33 DOWNTO 0);  -- sfix34_En26
  SIGNAL p255tmp_sub_cast                 : signed(33 DOWNTO 0);  -- sfix34_En26
  SIGNAL p255tmp_sub_cast_1               : signed(33 DOWNTO 0);  -- sfix34_En26
  SIGNAL c0_serial_1_64                   : vector_of_signed34(0 TO 1);  -- sfix34_En26 [2]
  SIGNAL c0_serial_1_65                   : vector_of_std_logic_vector34(0 TO 1);  -- ufix34 [2]
  SIGNAL tmp_377                          : std_logic_vector(30 DOWNTO 0);  -- ufix31
  SIGNAL tmp_signed_15                    : signed(30 DOWNTO 0);  -- sfix31_En26
  SIGNAL tmp_378                          : std_logic_vector(33 DOWNTO 0);  -- ufix34
  SIGNAL tmp_signed_16                    : signed(33 DOWNTO 0);  -- sfix34_En26
  SIGNAL tmp_379                          : signed(64 DOWNTO 0);  -- sfix65_En52
  SIGNAL c0_serialOut_0_32                : vector_of_std_logic_vector65(0 TO 1);  -- ufix65 [2]
  SIGNAL delayMatch_regrsvd_57            : vector_of_signed62(0 TO 2);  -- sfix62 [3]
  SIGNAL tmp_380                          : signed(61 DOWNTO 0);  -- sfix62_En51
  SIGNAL tmp_381                          : signed(60 DOWNTO 0);  -- sfix61_En51
  SIGNAL tmp_382                          : signed(61 DOWNTO 0);  -- sfix62_En51
  SIGNAL tmp_383                          : signed(61 DOWNTO 0);  -- sfix62_En51
  SIGNAL tmp_384                          : signed(63 DOWNTO 0);  -- sfix64_En52
  SIGNAL tmp_385                          : signed(61 DOWNTO 0);  -- sfix62_En52
  SIGNAL tmp_386                          : signed(63 DOWNTO 0);  -- sfix64_En52
  SIGNAL tmp_387                          : signed(63 DOWNTO 0);  -- sfix64_En52
  SIGNAL tmp_388                          : signed(65 DOWNTO 0);  -- sfix66_En52
  SIGNAL tmp_389                          : signed(64 DOWNTO 0);  -- sfix65_En52
  SIGNAL tmp_390                          : signed(65 DOWNTO 0);  -- sfix66_En52
  SIGNAL tmp_391                          : signed(65 DOWNTO 0);  -- sfix66_En52
  SIGNAL s1_1                             : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL tmp_392                          : signed(33 DOWNTO 0);  -- sfix34_En27
  SIGNAL tmp_393                          : signed(34 DOWNTO 0);  -- sfix35_En27
  SIGNAL tmp_394                          : signed(32 DOWNTO 0);  -- sfix33_En27
  SIGNAL tmp_395                          : signed(34 DOWNTO 0);  -- sfix35_En27
  SIGNAL tmp_396                          : signed(34 DOWNTO 0);  -- sfix35_En27
  SIGNAL tmp_397                          : signed(34 DOWNTO 0);  -- sfix35_En27
  SIGNAL tmp_398                          : signed(35 DOWNTO 0);  -- sfix36_En28
  SIGNAL tmp_399                          : signed(63 DOWNTO 0);  -- sfix64_En51
  SIGNAL p244tmp_sub_cast                 : signed(36 DOWNTO 0);  -- sfix37_En28
  SIGNAL p244tmp_sub_cast_1               : signed(36 DOWNTO 0);  -- sfix37_En28
  SIGNAL p244tmp_sub_temp                 : signed(36 DOWNTO 0);  -- sfix37_En28
  SIGNAL v4bx                             : unsigned(13 DOWNTO 0);  -- ufix14_En11
  SIGNAL p329v4bx_cast                    : unsigned(15 DOWNTO 0);  -- ufix16_En12
  SIGNAL tmp_400                          : signed(14 DOWNTO 0);  -- sfix15_En11
  SIGNAL p206tmp_cast                     : signed(14 DOWNTO 0);  -- sfix15_En11
  SIGNAL p206tmp_cast_1                   : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL p206tmp_cast_2                   : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL tmp_401                          : signed(14 DOWNTO 0);  -- sfix15_En11
  SIGNAL p243tmp_cast                     : signed(14 DOWNTO 0);  -- sfix15_En11
  SIGNAL p243tmp_cast_1                   : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL p243tmp_cast_2                   : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL c0_serial_0_66                   : vector_of_signed15(0 TO 1);  -- sfix15_En11 [2]
  SIGNAL c0_serial_0_67                   : vector_of_std_logic_vector15(0 TO 1);  -- ufix15 [2]
  SIGNAL delayMatch_regrsvd_58            : vector_of_unsigned14(0 TO 3);  -- ufix14 [4]
  SIGNAL q3_15                            : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL delayMatch_regrsvd_59            : vector_of_unsigned14(0 TO 3);  -- ufix14 [4]
  SIGNAL q2_17                            : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL c0_serial_1_66                   : vector_of_unsigned14(0 TO 1);  -- ufix14_En14 [2]
  SIGNAL c0_serial_1_67                   : vector_of_std_logic_vector14(0 TO 1);  -- ufix14 [2]
  SIGNAL tmp_402                          : std_logic_vector(14 DOWNTO 0);  -- ufix15
  SIGNAL tmp_signed_17                    : signed(14 DOWNTO 0);  -- sfix15_En11
  SIGNAL q3_16                            : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL q3_unsigned_5                    : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL multiplier_cast_12               : signed(14 DOWNTO 0);  -- sfix15_En14
  SIGNAL multiplier_mul_temp_12           : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL tmp_403                          : signed(28 DOWNTO 0);  -- sfix29_En25
  SIGNAL c0_serialOut_0_33                : vector_of_std_logic_vector29(0 TO 1);  -- ufix29 [2]
  SIGNAL tmp_404                          : signed(28 DOWNTO 0);  -- sfix29_En25
  SIGNAL tmp_405                          : signed(27 DOWNTO 0);  -- sfix28_En25
  SIGNAL tmp_406                          : signed(28 DOWNTO 0);  -- sfix29_En25
  SIGNAL tmp_407                          : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL tmp_408                          : signed(27 DOWNTO 0);  -- sfix28_En25
  SIGNAL tmp_409                          : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL tmp_410                          : signed(27 DOWNTO 0);  -- sfix28_En25
  SIGNAL tmp_411                          : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL p242tmp_sub_cast                 : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL p242tmp_sub_cast_1               : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL tmp_412                          : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL tmp_413                          : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL c0_serial_0_68                   : vector_of_signed30(0 TO 1);  -- sfix30_En25 [2]
  SIGNAL c0_serial_0_69                   : vector_of_std_logic_vector30(0 TO 1);  -- ufix30 [2]
  SIGNAL tmp_414                          : signed(30 DOWNTO 0);  -- sfix31_En26
  SIGNAL tmp_415                          : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL tmp_416                          : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL tmp_417                          : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL tmp_418                          : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL tmp_419                          : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL tmp_420                          : signed(30 DOWNTO 0);  -- sfix31_En26
  SIGNAL tmp_421                          : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL tmp_422                          : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL tmp_423                          : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL tmp_424                          : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL tmp_425                          : signed(31 DOWNTO 0);  -- sfix32_En26
  SIGNAL delayMatch_regrsvd_60            : vector_of_unsigned14(0 TO 4);  -- ufix14 [5]
  SIGNAL mx_8                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_426                          : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL p237tmp_sub_cast                 : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL p237tmp_sub_cast_1               : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL delayMatch_regrsvd_61            : vector_of_unsigned14(0 TO 4);  -- ufix14 [5]
  SIGNAL mx_9                             : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL tmp_427                          : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL p198tmp_sub_cast                 : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL p198tmp_sub_cast_1               : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL c0_serial_1_68                   : vector_of_signed33(0 TO 1);  -- sfix33_En26 [2]
  SIGNAL c0_serial_1_69                   : vector_of_std_logic_vector33(0 TO 1);  -- ufix33 [2]
  SIGNAL tmp_428                          : std_logic_vector(29 DOWNTO 0);  -- ufix30
  SIGNAL tmp_signed_18                    : signed(29 DOWNTO 0);  -- sfix30_En25
  SIGNAL tmp_429                          : std_logic_vector(32 DOWNTO 0);  -- ufix33
  SIGNAL tmp_signed_19                    : signed(32 DOWNTO 0);  -- sfix33_En26
  SIGNAL tmp_430                          : signed(62 DOWNTO 0);  -- sfix63_En51
  SIGNAL c0_serialOut_0_34                : vector_of_std_logic_vector63(0 TO 1);  -- ufix63 [2]
  SIGNAL delayMatch_regrsvd_62            : vector_of_signed64(0 TO 2);  -- sfix64 [3]
  SIGNAL tmp_431                          : signed(63 DOWNTO 0);  -- sfix64_En51
  SIGNAL tmp_432                          : signed(62 DOWNTO 0);  -- sfix63_En51
  SIGNAL tmp_433                          : signed(63 DOWNTO 0);  -- sfix64_En51
  SIGNAL tmp_434                          : signed(63 DOWNTO 0);  -- sfix64_En51
  SIGNAL tmp_435                          : signed(65 DOWNTO 0);  -- sfix66_En52
  SIGNAL tmp_436                          : signed(61 DOWNTO 0);  -- sfix62_En52
  SIGNAL tmp_437                          : signed(65 DOWNTO 0);  -- sfix66_En52
  SIGNAL tmp_438                          : signed(65 DOWNTO 0);  -- sfix66_En52
  SIGNAL tmp_439                          : signed(66 DOWNTO 0);  -- sfix67_En52
  SIGNAL tmp_440                          : signed(64 DOWNTO 0);  -- sfix65_En52
  SIGNAL tmp_441                          : signed(66 DOWNTO 0);  -- sfix67_En52
  SIGNAL tmp_442                          : signed(66 DOWNTO 0);  -- sfix67_En52
  SIGNAL s2_1                             : signed(13 DOWNTO 0);  -- sfix14_En6
  SIGNAL tmp_443                          : signed(32 DOWNTO 0);  -- sfix33_En27
  SIGNAL tmp_444                          : signed(33 DOWNTO 0);  -- sfix34_En27
  SIGNAL tmp_445                          : signed(32 DOWNTO 0);  -- sfix33_En27
  SIGNAL tmp_446                          : signed(33 DOWNTO 0);  -- sfix34_En27
  SIGNAL tmp_447                          : signed(33 DOWNTO 0);  -- sfix34_En27
  SIGNAL tmp_448                          : signed(63 DOWNTO 0);  -- sfix64_En51
  SIGNAL delayMatch_regrsvd_63            : vector_of_signed64(0 TO 3);  -- sfix64 [4]
  SIGNAL tmp_449                          : signed(63 DOWNTO 0);  -- sfix64_En51
  SIGNAL tmp_450                          : signed(62 DOWNTO 0);  -- sfix63_En51
  SIGNAL tmp_451                          : signed(63 DOWNTO 0);  -- sfix64_En51
  SIGNAL tmp_452                          : signed(63 DOWNTO 0);  -- sfix64_En51
  SIGNAL tmp_453                          : signed(65 DOWNTO 0);  -- sfix66_En52
  SIGNAL tmp_454                          : signed(61 DOWNTO 0);  -- sfix62_En52
  SIGNAL tmp_455                          : signed(65 DOWNTO 0);  -- sfix66_En52
  SIGNAL tmp_456                          : signed(65 DOWNTO 0);  -- sfix66_En52
  SIGNAL tmp_457                          : signed(66 DOWNTO 0);  -- sfix67_En52
  SIGNAL tmp_458                          : signed(61 DOWNTO 0);  -- sfix62_En52
  SIGNAL tmp_459                          : signed(66 DOWNTO 0);  -- sfix67_En52
  SIGNAL tmp_460                          : signed(66 DOWNTO 0);  -- sfix67_En52
  SIGNAL s3_1                             : signed(13 DOWNTO 0);  -- sfix14_En7

BEGIN
  UMadgwick_correction_fixpt_e : Madgwick_correction_fixpt_en
    PORT MAP( clk_1 => clk,
              reset_1 => reset,
              clkenable_1 => clkenable,
              clkenable_2 => clkenable_1
              );

  UMadgwick_correction_fixpt_t : Madgwick_correction_fixpt_tc
    PORT MAP( clk => clk,
              reset => reset,
              clkenable => clkenable_regout_3,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              enb_1_2_0 => enb_1_2_0,
              enb_1_2_1 => enb_1_2_1,
              enb_1_4_0 => enb_1_4_0,
              enb_1_4_1 => enb_1_4_1
              );

  Umux1_serializer_1 : mux1_serializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_0_3,  -- ufix14_En14 [4]
              out0 => q1_2  -- ufix14_En14
              );

  Umux1_serializer_2 : mux1_serializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_1_1,  -- ufix14_En14 [4]
              out0 => q3_2  -- ufix14_En14
              );

  Ualpha0_deserializer_1 : alpha0_deserializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb => enb,
              in0 => std_logic_vector(tmp_4),  -- ufix28_En28
              out0 => c0_serialOut_0  -- ufix28_En28 [4]
              );

  Umux1_serializer_3 : mux1_serializer_block
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_0_5,  -- ufix16_En14 [4]
              out0 => tmp_10  -- ufix16_En14
              );

  Umux1_serializer_4 : mux1_serializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_1_3,  -- ufix14_En14 [4]
              out0 => q2_2  -- ufix14_En14
              );

  Ualpha0_deserializer_2 : alpha0_deserializer_block
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb => enb,
              in0 => std_logic_vector(tmp_11),  -- ufix30_En28
              out0 => c0_serialOut_0_1  -- ufix30_En28 [4]
              );

  Umux1_serializer_5 : mux1_serializer_block8
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_1 => enb_1_2_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => c0_serial_0_1,  -- sfix15_En13 [2]
              out0 => tmp_15  -- sfix15_En13
              );

  Umux1_serializer_6 : mux1_serializer_block9
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_1 => enb_1_2_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => c0_serial_1_5,  -- sfix19_En14 [2]
              out0 => tmp_16  -- sfix19_En14
              );

  Ualpha0_deserializer_3 : alpha0_deserializer_block7
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => std_logic_vector(tmp_17),  -- sfix34_En27
              out0 => c0_serialOut_0_2  -- sfix34_En27 [2]
              );

  Umux1_serializer_7 : mux1_serializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_0_9,  -- ufix14_En14 [4]
              out0 => q0_2  -- ufix14_En14
              );

  Umux1_serializer_8 : mux1_serializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_1_7,  -- ufix14_En14 [4]
              out0 => q3_3  -- ufix14_En14
              );

  Ualpha0_deserializer_4 : alpha0_deserializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb => enb,
              in0 => std_logic_vector(tmp_18),  -- ufix28_En28
              out0 => c0_serialOut_0_3  -- ufix28_En28 [4]
              );

  Umux1_serializer_9 : mux1_serializer_block11
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_1 => enb_1_2_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => c0_serial_0_7,  -- ufix14_En13 [2]
              out0 => v2q0_2  -- ufix14_En13
              );

  Umux1_serializer_10 : mux1_serializer_block9
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_1 => enb_1_2_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => c0_serial_1_9,  -- sfix19_En14 [2]
              out0 => tmp_29  -- sfix19_En14
              );

  Ualpha0_deserializer_5 : alpha0_deserializer_block9
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => std_logic_vector(tmp_30),  -- sfix33_En27
              out0 => c0_serialOut_0_4  -- sfix33_En27 [2]
              );

  Umux1_serializer_11 : mux1_serializer_block2
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_1 => enb_1_2_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => c0_serial_0_11,  -- ufix16_En14 [2]
              out0 => tmp_43  -- ufix16_En14
              );

  Umux1_serializer_12 : mux1_serializer_block3
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_1 => enb_1_2_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => c0_serial_1_11,  -- ufix14_En14 [2]
              out0 => my_2  -- ufix14_En14
              );

  Ualpha0_deserializer_6 : alpha0_deserializer_block2
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => std_logic_vector(tmp_44),  -- ufix30_En28
              out0 => c0_serialOut_0_5  -- ufix30_En28 [2]
              );

  Umux1_serializer_13 : mux1_serializer_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_0_13,  -- ufix14_En13 [4]
              out0 => v2q1mx_1  -- ufix14_En13
              );

  Umux1_serializer_14 : mux1_serializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_1_13,  -- ufix14_En14 [4]
              out0 => q3_5  -- ufix14_En14
              );

  Ualpha0_deserializer_7 : alpha0_deserializer_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb => enb,
              in0 => std_logic_vector(tmp_46),  -- ufix28_En27
              out0 => c0_serialOut_0_6  -- ufix28_En27 [4]
              );

  Umux1_serializer_15 : mux1_serializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_0_15,  -- ufix14_En14 [4]
              out0 => q2_6  -- ufix14_En14
              );

  Umux1_serializer_16 : mux1_serializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_1_15,  -- ufix14_En14 [4]
              out0 => q2_7  -- ufix14_En14
              );

  Ualpha0_deserializer_8 : alpha0_deserializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb => enb,
              in0 => std_logic_vector(tmp_48),  -- ufix28_En28
              out0 => c0_serialOut_0_7  -- ufix28_En28 [4]
              );

  Umux1_serializer_17 : mux1_serializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_0_17,  -- ufix14_En14 [4]
              out0 => mx_3  -- ufix14_En14
              );

  Umux1_serializer_18 : mux1_serializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_1_17,  -- ufix14_En14 [4]
              out0 => q0q0_1  -- ufix14_En14
              );

  Ualpha0_deserializer_9 : alpha0_deserializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb => enb,
              in0 => std_logic_vector(tmp_50),  -- ufix28_En28
              out0 => c0_serialOut_0_8  -- ufix28_En28 [4]
              );

  Umux1_serializer_19 : mux1_serializer_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_0_19,  -- ufix14_En13 [4]
              out0 => v2q2_1  -- ufix14_En13
              );

  Umux1_serializer_20 : mux1_serializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_1_19,  -- ufix14_En14 [4]
              out0 => my_5  -- ufix14_En14
              );

  Ualpha0_deserializer_10 : alpha0_deserializer_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb => enb,
              in0 => std_logic_vector(tmp_51),  -- ufix28_En27
              out0 => c0_serialOut_0_9  -- ufix28_En27 [4]
              );

  Umux1_serializer_21 : mux1_serializer_block4
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_0_21,  -- ufix28_En27 [4]
              out0 => tmp_52  -- ufix28_En27
              );

  Umux1_serializer_22 : mux1_serializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_1_21,  -- ufix14_En14 [4]
              out0 => q3_8  -- ufix14_En14
              );

  Ualpha0_deserializer_11 : alpha0_deserializer_block4
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb => enb,
              in0 => std_logic_vector(tmp_53),  -- ufix42_En41
              out0 => c0_serialOut_0_10  -- ufix42_En41 [4]
              );

  Umux1_serializer_23 : mux1_serializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_0_23,  -- ufix14_En14 [4]
              out0 => mz_5  -- ufix14_En14
              );

  Umux1_serializer_24 : mux1_serializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_1_23,  -- ufix14_En14 [4]
              out0 => q2q2_1  -- ufix14_En14
              );

  Ualpha0_deserializer_12 : alpha0_deserializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb => enb,
              in0 => std_logic_vector(tmp_73),  -- ufix28_En28
              out0 => c0_serialOut_0_11  -- ufix28_En28 [4]
              );

  Umux1_serializer_25 : mux1_serializer_block13
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_0_25,  -- sfix14_En11 [4]
              out0 => v2bz_1  -- sfix14_En11
              );

  Umux1_serializer_26 : mux1_serializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_1_25,  -- ufix14_En14 [4]
              out0 => q0_4  -- ufix14_En14
              );

  Ualpha0_deserializer_13 : alpha0_deserializer_block13
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb => enb,
              in0 => std_logic_vector(tmp_80),  -- sfix28_En25
              out0 => c0_serialOut_0_12  -- sfix28_En25 [4]
              );

  Umux1_serializer_27 : mux1_serializer_block5
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_0_29,  -- ufix14_En13 [3]
              out0 => v2q0my_1  -- ufix14_En13
              );

  Umux1_serializer_28 : mux1_serializer_block6
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_1_27,  -- ufix14_En14 [3]
              out0 => q3_11  -- ufix14_En14
              );

  Ualpha0_deserializer_14 : alpha0_deserializer_block5
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb => enb,
              in0 => std_logic_vector(tmp_86),  -- ufix28_En27
              out0 => c0_serialOut_0_13  -- ufix28_En27 [3]
              );

  Umux1_serializer_29 : mux1_serializer_block3
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_1 => enb_1_2_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => c0_serial_0_31,  -- ufix14_En14 [2]
              out0 => my_8  -- ufix14_En14
              );

  Umux1_serializer_30 : mux1_serializer_block3
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_1 => enb_1_2_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => c0_serial_1_29,  -- ufix14_En14 [2]
              out0 => q3q3_1  -- ufix14_En14
              );

  Ualpha0_deserializer_15 : alpha0_deserializer_block3
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => std_logic_vector(tmp_106),  -- ufix28_En28
              out0 => c0_serialOut_0_14  -- ufix28_En28 [2]
              );

  Umux1_serializer_31 : mux1_serializer_block12
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_1 => enb_1_2_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => c0_serial_0_33,  -- sfix14_En11 [2]
              out0 => hy_1  -- sfix14_En11
              );

  Umux1_serializer_32 : mux1_serializer_block12
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_1 => enb_1_2_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => c0_serial_1_31,  -- sfix14_En11 [2]
              out0 => hy_2  -- sfix14_En11
              );

  Ualpha0_deserializer_16 : alpha0_deserializer_block10
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => std_logic_vector(tmp_131),  -- sfix28_En22
              out0 => c0_serialOut_0_15  -- sfix28_En22 [2]
              );

  Umux1_serializer_33 : mux1_serializer_block18
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_0_35,  -- ufix14_En12 [4]
              out0 => v2bx_1  -- ufix14_En12
              );

  Umux1_serializer_34 : mux1_serializer_block14
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_1_33,  -- sfix17_En14 [4]
              out0 => tmp_147  -- sfix17_En14
              );

  Ualpha0_deserializer_17 : alpha0_deserializer_block19
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb => enb,
              in0 => std_logic_vector(tmp_148),  -- sfix31_En26
              out0 => c0_serialOut_0_16  -- sfix31_En26 [4]
              );

  Umux1_serializer_35 : mux1_serializer_block13
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_0_37,  -- sfix14_En11 [4]
              out0 => v2bz_2  -- sfix14_En11
              );

  Umux1_serializer_36 : mux1_serializer_block16
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_1_35,  -- sfix16_En14 [4]
              out0 => tmp_160  -- sfix16_En14
              );

  Ualpha0_deserializer_18 : alpha0_deserializer_block14
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb => enb,
              in0 => std_logic_vector(tmp_161),  -- sfix30_En25
              out0 => c0_serialOut_0_17  -- sfix30_En25 [4]
              );

  Umux1_serializer_37 : mux1_serializer_block29
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_1 => enb_1_2_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => c0_serial_0_27,  -- sfix28_En25 [2]
              out0 => tmp_174  -- sfix28_En25
              );

  Umux1_serializer_38 : mux1_serializer_block28
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_1 => enb_1_2_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => c0_serial_1_37,  -- sfix33_En26 [2]
              out0 => tmp_175  -- sfix33_En26
              );

  Ualpha0_deserializer_19 : alpha0_deserializer_block27
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => std_logic_vector(tmp_176),  -- sfix61_En51
              out0 => c0_serialOut_0_18  -- sfix61_En51 [2]
              );

  Umux1_serializer_39 : mux1_serializer_block18
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_0_39,  -- ufix14_En12 [4]
              out0 => v2bx_2  -- ufix14_En12
              );

  Umux1_serializer_40 : mux1_serializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_1_39,  -- ufix14_En14 [4]
              out0 => q1_7  -- ufix14_En14
              );

  Ualpha0_deserializer_20 : alpha0_deserializer_block17
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb => enb,
              in0 => std_logic_vector(tmp_177),  -- ufix28_En26
              out0 => c0_serialOut_0_19  -- ufix28_En26 [4]
              );

  Umux1_serializer_41 : mux1_serializer_block13
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_0_41,  -- sfix14_En11 [4]
              out0 => v2bz_3  -- sfix14_En11
              );

  Umux1_serializer_42 : mux1_serializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_1_41,  -- ufix14_En14 [4]
              out0 => q2_12  -- ufix14_En14
              );

  Ualpha0_deserializer_21 : alpha0_deserializer_block13
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb => enb,
              in0 => std_logic_vector(tmp_180),  -- sfix28_En25
              out0 => c0_serialOut_0_20  -- sfix28_En25 [4]
              );

  Umux1_serializer_43 : mux1_serializer_block19
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_1 => enb_1_2_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => c0_serial_0_43,  -- ufix14_En12 [2]
              out0 => v2bx_3  -- ufix14_En12
              );

  Umux1_serializer_44 : mux1_serializer_block3
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_1 => enb_1_2_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => c0_serial_1_43,  -- ufix14_En14 [2]
              out0 => q2_14  -- ufix14_En14
              );

  Ualpha0_deserializer_22 : alpha0_deserializer_block20
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => std_logic_vector(tmp_183),  -- ufix28_En26
              out0 => c0_serialOut_0_21  -- ufix28_En26 [2]
              );

  Umux1_serializer_45 : mux1_serializer_block20
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_1 => enb_1_2_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => c0_serial_0_45,  -- sfix15_En12 [2]
              out0 => tmp_190  -- sfix15_En12
              );

  Umux1_serializer_46 : mux1_serializer_block3
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_1 => enb_1_2_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => c0_serial_1_45,  -- ufix14_En14 [2]
              out0 => q0_8  -- ufix14_En14
              );

  Ualpha0_deserializer_23 : alpha0_deserializer_block21
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => std_logic_vector(tmp_191),  -- sfix29_En26
              out0 => c0_serialOut_0_22  -- sfix29_En26 [2]
              );

  Umux1_serializer_47 : mux1_serializer_block18
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_0_49,  -- ufix14_En12 [4]
              out0 => v2bx_4  -- ufix14_En12
              );

  Umux1_serializer_48 : mux1_serializer_block16
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_1_47,  -- sfix16_En14 [4]
              out0 => tmp_218  -- sfix16_En14
              );

  Ualpha0_deserializer_24 : alpha0_deserializer_block18
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb => enb,
              in0 => std_logic_vector(tmp_219),  -- sfix30_En26
              out0 => c0_serialOut_0_23  -- sfix30_En26 [4]
              );

  Umux1_serializer_49 : mux1_serializer_block13
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_0_51,  -- sfix14_En11 [4]
              out0 => v2bz_4  -- sfix14_En11
              );

  Umux1_serializer_50 : mux1_serializer_block15
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_1_49,  -- ufix15_En14 [4]
              out0 => tmp_239  -- ufix15_En14
              );

  Ualpha0_deserializer_25 : alpha0_deserializer_block12
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb => enb,
              in0 => std_logic_vector(tmp_240),  -- sfix29_En25
              out0 => c0_serialOut_0_24  -- sfix29_En25 [4]
              );

  Umux1_serializer_51 : mux1_serializer_block25
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_0_47,  -- sfix30_En26 [4]
              out0 => tmp_267  -- sfix30_En26
              );

  Umux1_serializer_52 : mux1_serializer_block26
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_1_51,  -- sfix32_En26 [4]
              out0 => tmp_268  -- sfix32_En26
              );

  Ualpha0_deserializer_26 : alpha0_deserializer_block25
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb => enb,
              in0 => std_logic_vector(tmp_269),  -- sfix62_En52
              out0 => c0_serialOut_0_25  -- sfix62_En52 [4]
              );

  Umux1_serializer_53 : mux1_serializer_block18
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_0_55,  -- ufix14_En12 [4]
              out0 => v2bx_5  -- ufix14_En12
              );

  Umux1_serializer_54 : mux1_serializer_block15
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_1_53,  -- ufix15_En14 [4]
              out0 => tmp_286  -- ufix15_En14
              );

  Ualpha0_deserializer_27 : alpha0_deserializer_block16
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb => enb,
              in0 => std_logic_vector(tmp_287),  -- ufix29_En26
              out0 => c0_serialOut_0_26  -- ufix29_En26 [4]
              );

  Umux1_serializer_55 : mux1_serializer_block13
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_0_57,  -- sfix14_En11 [4]
              out0 => v2bz_5  -- sfix14_En11
              );

  Umux1_serializer_56 : mux1_serializer_block14
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_1_55,  -- sfix17_En14 [4]
              out0 => tmp_298  -- sfix17_En14
              );

  Ualpha0_deserializer_28 : alpha0_deserializer_block11
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb => enb,
              in0 => std_logic_vector(tmp_299),  -- sfix31_En25
              out0 => c0_serialOut_0_27  -- sfix31_En25 [4]
              );

  Umux1_serializer_57 : mux1_serializer_block22
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_1 => enb_1_2_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => c0_serial_0_53,  -- ufix28_En26 [2]
              out0 => tmp_312  -- ufix28_En26
              );

  Umux1_serializer_58 : mux1_serializer_block23
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_1 => enb_1_2_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => c0_serial_1_57,  -- sfix34_En26 [2]
              out0 => tmp_313  -- sfix34_En26
              );

  Ualpha0_deserializer_29 : alpha0_deserializer_block23
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => std_logic_vector(tmp_314),  -- sfix62_En52
              out0 => c0_serialOut_0_28  -- sfix62_En52 [2]
              );

  Umux1_serializer_59 : mux1_serializer_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_0_59,  -- ufix14_En13 [4]
              out0 => v2q1_3  -- ufix14_En13
              );

  Umux1_serializer_60 : mux1_serializer_block7
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_1_59,  -- sfix19_En14 [4]
              out0 => tmp_335  -- sfix19_En14
              );

  Ualpha0_deserializer_30 : alpha0_deserializer_block6
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb => enb,
              in0 => std_logic_vector(tmp_336),  -- sfix33_En27
              out0 => c0_serialOut_0_29  -- sfix33_En27 [4]
              );

  Umux1_serializer_61 : mux1_serializer_block10
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_1 => enb_1_2_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => c0_serial_0_61,  -- ufix17_En14 [2]
              out0 => tmp_348  -- ufix17_En14
              );

  Umux1_serializer_62 : mux1_serializer_block9
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_1 => enb_1_2_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => c0_serial_1_61,  -- sfix19_En14 [2]
              out0 => tmp_349  -- sfix19_En14
              );

  Ualpha0_deserializer_31 : alpha0_deserializer_block8
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => std_logic_vector(tmp_350),  -- sfix36_En28
              out0 => c0_serialOut_0_30  -- sfix36_En28 [2]
              );

  Umux1_serializer_63 : mux1_serializer_block17
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_1 => enb_1_2_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => c0_serial_0_63,  -- sfix14_En10 [2]
              out0 => v4bz_1  -- sfix14_En10
              );

  Umux1_serializer_64 : mux1_serializer_block3
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_1 => enb_1_2_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => c0_serial_1_63,  -- ufix14_En14 [2]
              out0 => q2_16  -- ufix14_En14
              );

  Ualpha0_deserializer_32 : alpha0_deserializer_block15
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => std_logic_vector(tmp_355),  -- sfix28_En24
              out0 => c0_serialOut_0_31  -- sfix28_En24 [2]
              );

  Umux1_serializer_65 : mux1_serializer_block24
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_1 => enb_1_2_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => c0_serial_0_65,  -- sfix31_En26 [2]
              out0 => tmp_377  -- sfix31_En26
              );

  Umux1_serializer_66 : mux1_serializer_block23
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_1 => enb_1_2_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => c0_serial_1_65,  -- sfix34_En26 [2]
              out0 => tmp_378  -- sfix34_En26
              );

  Ualpha0_deserializer_33 : alpha0_deserializer_block24
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => std_logic_vector(tmp_379),  -- sfix65_En52
              out0 => c0_serialOut_0_32  -- sfix65_En52 [2]
              );

  Umux1_serializer_67 : mux1_serializer_block21
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_1 => enb_1_2_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => c0_serial_0_67,  -- sfix15_En11 [2]
              out0 => tmp_402  -- sfix15_En11
              );

  Umux1_serializer_68 : mux1_serializer_block3
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_1 => enb_1_2_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => c0_serial_1_67,  -- ufix14_En14 [2]
              out0 => q3_16  -- ufix14_En14
              );

  Ualpha0_deserializer_34 : alpha0_deserializer_block22
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => std_logic_vector(tmp_403),  -- sfix29_En25
              out0 => c0_serialOut_0_33  -- sfix29_En25 [2]
              );

  Umux1_serializer_69 : mux1_serializer_block27
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_1 => enb_1_2_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => c0_serial_0_69,  -- sfix30_En25 [2]
              out0 => tmp_428  -- sfix30_En25
              );

  Umux1_serializer_70 : mux1_serializer_block28
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_1 => enb_1_2_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => c0_serial_1_69,  -- sfix33_En26 [2]
              out0 => tmp_429  -- sfix33_En26
              );

  Ualpha0_deserializer_35 : alpha0_deserializer_block26
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_1 => enb_1_4_1,
              enb_1_2_0 => enb_1_2_0,
              in0 => std_logic_vector(tmp_430),  -- sfix63_En51
              out0 => c0_serialOut_0_34  -- sfix63_En51 [2]
              );

  c_c_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q0_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q0_regout <= unsigned(q0);
    END IF;
  END PROCESS c_c_process;

  c_c_1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q0_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q0_regout_1 <= q0_regout;
    END IF;
  END PROCESS c_c_1_process;

  c_c_2_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q0_regout_2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q0_regout_2 <= q0_regout_1;
    END IF;
  END PROCESS c_c_2_process;

  c_c_3_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q0_regout_3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q0_regout_3 <= q0_regout_2;
    END IF;
  END PROCESS c_c_3_process;

  c_c_4_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      clkenable_regout <= '0';
    ELSIF clk'event AND clk = '1' THEN
      clkenable_regout <= clkenable_1;
    END IF;
  END PROCESS c_c_4_process;

  c_c_5_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      clkenable_regout_1 <= '0';
    ELSIF clk'event AND clk = '1' THEN
      clkenable_regout_1 <= clkenable_regout;
    END IF;
  END PROCESS c_c_5_process;

  c_c_6_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      clkenable_regout_2 <= '0';
    ELSIF clk'event AND clk = '1' THEN
      clkenable_regout_2 <= clkenable_regout_1;
    END IF;
  END PROCESS c_c_6_process;

  c_c_7_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      clkenable_regout_3 <= '0';
    ELSIF clk'event AND clk = '1' THEN
      clkenable_regout_3 <= clkenable_regout_2;
    END IF;
  END PROCESS c_c_7_process;

  in_0_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q0_1 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        q0_1 <= q0_regout_3;
      END IF;
    END IF;
  END PROCESS in_0_pipe_process;


  --'Madgwick_correction_fixpt:15' v2q0 = fi(fi(2.0, 0, 2, 0, fm)*q0, 0, 14, 13, fm);
  p388v2q0_cast <= resize(q0_1 & '0', 16);
  v2q0 <= p388v2q0_cast(14 DOWNTO 1);

  
--'Madgwick_correction_fixpt:41' s2 = fi(fi_signed(fi_uminus(v2q0)*(fi_signed(fi_signed(fi(2.0, 0, 2, 0, fm)*q1q3) - v2q0q2) - ax) + v2q3*(fi_signed(fi(2.0, 0, 2, 0, fm)*q0q1 + v2q2q3) - ay)) - fi(4.0, 0, 3, 0, fm)*q2*(fi_signed(fi_signed(fi_signed(fi(1, 0, 1, 0, fm)) - fi(2.0, 0, 2, 0, fm)*q1q1) - fi(2.0, 0, 2, 0, fm)*q2q2) - az) + (fi_signed(fi_uminus(v4bx)*q2) - v2bz*q0)*(fi_signed(v2bx*(fi_signed(fi_signed(fi(0.5, 0, 14, 14, fm)) - q2q2) - q3q3) + v2bz*(fi_signed(q1q3) - q0q2)) - mx) + (v2bx*q1 + v2bz*q3)*(fi_signed(v2bx*(fi_signed(q1q2) - q0q3) + v2bz*(q0q1 + q2q3)) - my) + (fi_signed(v2bx*q0) - v4bz*q2)*(fi_signed(v2bx*(q0q2 + q1q3) + v2bz*(fi_signed(fi_signed(fi(0.5, 0, 14, 14, fm)) - q1q1) - q2q2)) - mz), 1, 14, 6, fm);
  --'Madgwick_correction_fixpt:59' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:60' if isfi( a )
  --'Madgwick_correction_fixpt:61' nt = numerictype( a );
  --'Madgwick_correction_fixpt:62' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  --'Madgwick_correction_fixpt:63' y = -fi( a, new_nt, fimath( a ) );
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:49' nt = numerictype( a );
  --'Madgwick_correction_fixpt:50' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  --'Madgwick_correction_fixpt:51' y = fi( a, new_nt, fimath( a ) );
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:49' nt = numerictype( a );
  --'Madgwick_correction_fixpt:50' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  --'Madgwick_correction_fixpt:51' y = fi( a, new_nt, fimath( a ) );
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  --'Madgwick_correction_fixpt:59' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:60' if isfi( a )
  --'Madgwick_correction_fixpt:61' nt = numerictype( a );
  --'Madgwick_correction_fixpt:62' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  --'Madgwick_correction_fixpt:63' y = -fi( a, new_nt, fimath( a ) );
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:49' nt = numerictype( a );
  --'Madgwick_correction_fixpt:50' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  --'Madgwick_correction_fixpt:51' y = fi( a, new_nt, fimath( a ) );
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:49' nt = numerictype( a );
  --'Madgwick_correction_fixpt:50' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  --'Madgwick_correction_fixpt:51' y = fi( a, new_nt, fimath( a ) );
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:49' nt = numerictype( a );
  --'Madgwick_correction_fixpt:50' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  --'Madgwick_correction_fixpt:51' y = fi( a, new_nt, fimath( a ) );
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  p253tmp_cast <= signed(resize(v2q0, 15));
  p253tmp_cast_1 <= resize(p253tmp_cast, 16);
  p253tmp_cast_2 <=  - (p253tmp_cast_1);
  tmp <= p253tmp_cast_2(14 DOWNTO 0);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_1 <= to_signed(2#000000000000000#, 15);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_1 <= tmp;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  c_c_8_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q2_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q2_regout <= unsigned(q2);
    END IF;
  END PROCESS c_c_8_process;

  c_c_9_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q2_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q2_regout_1 <= q2_regout;
    END IF;
  END PROCESS c_c_9_process;

  c_c_10_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q2_regout_2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q2_regout_2 <= q2_regout_1;
    END IF;
  END PROCESS c_c_10_process;

  c_c_11_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q2_regout_3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q2_regout_3 <= q2_regout_2;
    END IF;
  END PROCESS c_c_11_process;

  in_2_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q2_1 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        q2_1 <= q2_regout_3;
      END IF;
    END IF;
  END PROCESS in_2_pipe_process;


  --'Madgwick_correction_fixpt:17' v2q2 = fi(fi(2.0, 0, 2, 0, fm)*q2, 0, 14, 13, fm);
  p386v2q2_cast <= resize(q2_1 & '0', 16);
  v2q2 <= p386v2q2_cast(14 DOWNTO 1);

  -- Gradient decent algorithm corrective step
  
--'Madgwick_correction_fixpt:39' s0 = fi(fi_signed(fi_uminus(v2q2)*(fi_signed(fi_signed(fi(2.0, 0, 2, 0, fm)*q1q3) - v2q0q2) - ax) + v2q1*(fi_signed(fi(2.0, 0, 2, 0, fm)*q0q1 + v2q2q3) - ay)) - v2bz*q2*(fi_signed(v2bx*(fi_signed(fi_signed(fi(0.5, 0, 14, 14, fm)) - q2q2) - q3q3) + v2bz*(fi_signed(q1q3) - q0q2)) - mx) + (fi_uminus(v2bx)*q3 + v2bz*q1)*(fi_signed(v2bx*(fi_signed(q1q2) - q0q3) + v2bz*(q0q1 + q2q3)) - my) + v2bx*q2*(fi_signed(v2bx*(q0q2 + q1q3) + v2bz*(fi_signed(fi_signed(fi(0.5, 0, 14, 14, fm)) - q1q1) - q2q2)) - mz), 1, 14, 8, fm);
  --'Madgwick_correction_fixpt:59' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:60' if isfi( a )
  --'Madgwick_correction_fixpt:61' nt = numerictype( a );
  --'Madgwick_correction_fixpt:62' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  --'Madgwick_correction_fixpt:63' y = -fi( a, new_nt, fimath( a ) );
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:49' nt = numerictype( a );
  --'Madgwick_correction_fixpt:50' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  --'Madgwick_correction_fixpt:51' y = fi( a, new_nt, fimath( a ) );
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:49' nt = numerictype( a );
  --'Madgwick_correction_fixpt:50' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  --'Madgwick_correction_fixpt:51' y = fi( a, new_nt, fimath( a ) );
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:49' nt = numerictype( a );
  --'Madgwick_correction_fixpt:50' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  --'Madgwick_correction_fixpt:51' y = fi( a, new_nt, fimath( a ) );
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  --'Madgwick_correction_fixpt:59' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:60' if isfi( a )
  --'Madgwick_correction_fixpt:61' nt = numerictype( a );
  --'Madgwick_correction_fixpt:62' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  --'Madgwick_correction_fixpt:63' y = -fi( a, new_nt, fimath( a ) );
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:49' nt = numerictype( a );
  --'Madgwick_correction_fixpt:50' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  --'Madgwick_correction_fixpt:51' y = fi( a, new_nt, fimath( a ) );
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  p327tmp_cast <= signed(resize(v2q2, 15));
  p327tmp_cast_1 <= resize(p327tmp_cast, 16);
  p327tmp_cast_2 <=  - (p327tmp_cast_1);
  tmp_2 <= p327tmp_cast_2(14 DOWNTO 0);

  delayMatch_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_3 <= to_signed(2#000000000000000#, 15);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_3 <= tmp_2;
      END IF;
    END IF;
  END PROCESS delayMatch_1_process;


  c0_serial_0(0) <= tmp_1;
  c0_serial_0(1) <= tmp_3;

  outputgen69: FOR kk IN 0 TO 1 GENERATE
    c0_serial_0_1(kk) <= std_logic_vector(c0_serial_0(kk));
  END GENERATE;

  c_c_12_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q1_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q1_regout <= unsigned(q1);
    END IF;
  END PROCESS c_c_12_process;

  c_c_13_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q1_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q1_regout_1 <= q1_regout;
    END IF;
  END PROCESS c_c_13_process;

  c_c_14_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q1_regout_2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q1_regout_2 <= q1_regout_1;
    END IF;
  END PROCESS c_c_14_process;

  c_c_15_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q1_regout_3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q1_regout_3 <= q1_regout_2;
    END IF;
  END PROCESS c_c_15_process;

  in_1_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q1_1 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        q1_1 <= q1_regout_3;
      END IF;
    END IF;
  END PROCESS in_1_pipe_process;


  c0_serial_0_2(0) <= q1_1;
  c0_serial_0_2(1) <= q1_1;
  c0_serial_0_2(2) <= q1_1;
  c0_serial_0_2(3) <= q2_1;

  outputgen68: FOR kk IN 0 TO 3 GENERATE
    c0_serial_0_3(kk) <= std_logic_vector(c0_serial_0_2(kk));
  END GENERATE;

  c_c_16_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q3_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q3_regout <= unsigned(q3);
    END IF;
  END PROCESS c_c_16_process;

  c_c_17_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q3_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q3_regout_1 <= q3_regout;
    END IF;
  END PROCESS c_c_17_process;

  c_c_18_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q3_regout_2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q3_regout_2 <= q3_regout_1;
    END IF;
  END PROCESS c_c_18_process;

  c_c_19_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q3_regout_3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      q3_regout_3 <= q3_regout_2;
    END IF;
  END PROCESS c_c_19_process;

  in_3_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q3_1 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        q3_1 <= q3_regout_3;
      END IF;
    END IF;
  END PROCESS in_3_pipe_process;


  c0_serial_1(0) <= q3_1;
  c0_serial_1(1) <= q2_1;
  c0_serial_1(2) <= q1_1;
  c0_serial_1(3) <= q3_1;

  outputgen67: FOR kk IN 0 TO 3 GENERATE
    c0_serial_1_1(kk) <= std_logic_vector(c0_serial_1(kk));
  END GENERATE;

  q1_unsigned <= unsigned(q1_2);

  q3_unsigned <= unsigned(q3_2);

  -- 'Madgwick_correction_fixpt:27' q1q3 = fi(q1*q3, 0, 14, 14, fm);
  -- 
  -- 'Madgwick_correction_fixpt:26' q1q2 = fi(q1*q2, 0, 14, 14, fm);
  -- 
  -- 'Madgwick_correction_fixpt:25' q1q1 = fi(q1*q1, 0, 14, 14, fm);
  -- 
  -- 'Madgwick_correction_fixpt:29' q2q3 = fi(q2*q3, 0, 14, 14, fm);
  tmp_4 <= q1_unsigned * q3_unsigned;

  tmp_5 <= unsigned(c0_serialOut_0(0));

  q1q3 <= tmp_5(27 DOWNTO 14);

  --'Madgwick_correction_fixpt:19' v2q0q2 = fi(fi(2.0, 0, 2, 0, fm)*q0*q2, 0, 14, 13, fm);
  tmp_6 <= resize(q0_1 & '0', 16);

  --'Madgwick_correction_fixpt:20' v2q2q3 = fi(fi(2.0, 0, 2, 0, fm)*q2*q3, 0, 14, 13, fm);
  tmp_7 <= resize(q2_1 & '0', 16);

  --'Madgwick_correction_fixpt:14' v2q1mx = fi(fi(2.0, 0, 2, 0, fm)*q1*mx, 0, 14, 13, fm);
  tmp_8 <= resize(q1_1 & '0', 16);

  --HDL code generation from MATLAB function: Madgwick_correction_fixpt
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  --                                                                          %
  --       Generated by MATLAB 8.3, MATLAB Coder 2.6 and HDL Coder 3.4        %
  --                                                                          %
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  
--'Madgwick_correction_fixpt:9' fm = fimath('RoundingMethod', 'Floor', 'OverflowAction', 'Wrap', 'ProductMode', 'FullPrecision', 'MaxProductWordLength', 128, 'SumMode', 'FullPrecision', 'MaxSumWordLength', 128);
  -- Auxiliary variables to avoid repeated arithmetic
  --'Madgwick_correction_fixpt:11' v2q0mx = fi(fi(2.0, 0, 2, 0, fm)*q0*mx, 0, 14, 13, fm);
  tmp_9 <= resize(q0_1 & '0', 16);

  c0_serial_0_4(0) <= tmp_6;
  c0_serial_0_4(1) <= tmp_7;
  c0_serial_0_4(2) <= tmp_8;
  c0_serial_0_4(3) <= tmp_9;

  outputgen66: FOR kk IN 0 TO 3 GENERATE
    c0_serial_0_5(kk) <= std_logic_vector(c0_serial_0_4(kk));
  END GENERATE;

  c_c_20_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mx_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      mx_regout <= unsigned(mx);
    END IF;
  END PROCESS c_c_20_process;

  c_c_21_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mx_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      mx_regout_1 <= mx_regout;
    END IF;
  END PROCESS c_c_21_process;

  c_c_22_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mx_regout_2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      mx_regout_2 <= mx_regout_1;
    END IF;
  END PROCESS c_c_22_process;

  c_c_23_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mx_regout_3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      mx_regout_3 <= mx_regout_2;
    END IF;
  END PROCESS c_c_23_process;

  in_7_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mx_1 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        mx_1 <= mx_regout_3;
      END IF;
    END IF;
  END PROCESS in_7_pipe_process;


  c0_serial_1_2(0) <= q2_1;
  c0_serial_1_2(1) <= q3_1;
  c0_serial_1_2(2) <= mx_1;
  c0_serial_1_2(3) <= mx_1;

  outputgen65: FOR kk IN 0 TO 3 GENERATE
    c0_serial_1_3(kk) <= std_logic_vector(c0_serial_1_2(kk));
  END GENERATE;

  tmp_unsigned <= unsigned(tmp_10);

  q2_unsigned <= unsigned(q2_2);

  tmp_11 <= tmp_unsigned * q2_unsigned;

  tmp_12 <= unsigned(c0_serialOut_0_1(0));

  v2q0q2 <= tmp_12(28 DOWNTO 15);

  c_c_24_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ax_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      ax_regout <= unsigned(ax);
    END IF;
  END PROCESS c_c_24_process;

  c_c_25_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ax_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      ax_regout_1 <= ax_regout;
    END IF;
  END PROCESS c_c_25_process;

  c_c_26_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ax_regout_2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      ax_regout_2 <= ax_regout_1;
    END IF;
  END PROCESS c_c_26_process;

  c_c_27_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ax_regout_3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      ax_regout_3 <= ax_regout_2;
    END IF;
  END PROCESS c_c_27_process;

  in_4_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ax_1 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        ax_1 <= ax_regout_3;
      END IF;
    END IF;
  END PROCESS in_4_pipe_process;


  delayMatch_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ax_2 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        ax_2 <= ax_1;
      END IF;
    END IF;
  END PROCESS delayMatch_2_process;


  p252tmp_sub_cast <= resize(q1q3 & '0', 16);
  p252tmp_sub_cast_1 <= signed(resize(p252tmp_sub_cast, 18));
  p252tmp_sub_cast_2 <= signed(resize(v2q0q2 & '0', 18));
  p252tmp_sub_temp <= p252tmp_sub_cast_1 - p252tmp_sub_cast_2;
  p252tmp_sub_cast_3 <= resize(p252tmp_sub_temp, 19);
  p252tmp_sub_cast_4 <= signed(resize(ax_2, 19));
  tmp_13 <= p252tmp_sub_cast_3 - p252tmp_sub_cast_4;

  delayMatch_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ax_3 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        ax_3 <= ax_1;
      END IF;
    END IF;
  END PROCESS delayMatch_3_process;


  p326tmp_sub_cast <= resize(q1q3 & '0', 16);
  p326tmp_sub_cast_1 <= signed(resize(p326tmp_sub_cast, 18));
  p326tmp_sub_cast_2 <= signed(resize(v2q0q2 & '0', 18));
  p326tmp_sub_temp <= p326tmp_sub_cast_1 - p326tmp_sub_cast_2;
  p326tmp_sub_cast_3 <= resize(p326tmp_sub_temp, 19);
  p326tmp_sub_cast_4 <= signed(resize(ax_3, 19));
  tmp_14 <= p326tmp_sub_cast_3 - p326tmp_sub_cast_4;

  c0_serial_1_4(0) <= tmp_13;
  c0_serial_1_4(1) <= tmp_14;

  outputgen64: FOR kk IN 0 TO 1 GENERATE
    c0_serial_1_5(kk) <= std_logic_vector(c0_serial_1_4(kk));
  END GENERATE;

  tmp_signed <= signed(tmp_15);

  tmp_signed_1 <= signed(tmp_16);

  tmp_17 <= tmp_signed * tmp_signed_1;

  delayMatch_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      v2q0_1 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        v2q0_1 <= v2q0;
      END IF;
    END IF;
  END PROCESS delayMatch_4_process;


  --'Madgwick_correction_fixpt:16' v2q1 = fi(fi(2.0, 0, 2, 0, fm)*q1, 0, 14, 13, fm);
  p387v2q1_cast <= resize(q1_1 & '0', 16);
  v2q1 <= p387v2q1_cast(14 DOWNTO 1);

  delayMatch_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      v2q1_1 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        v2q1_1 <= v2q1;
      END IF;
    END IF;
  END PROCESS delayMatch_5_process;


  c0_serial_0_6(0) <= v2q0_1;
  c0_serial_0_6(1) <= v2q1_1;

  outputgen63: FOR kk IN 0 TO 1 GENERATE
    c0_serial_0_7(kk) <= std_logic_vector(c0_serial_0_6(kk));
  END GENERATE;

  c0_serial_0_8(0) <= q0_1;
  c0_serial_0_8(1) <= q0_1;
  c0_serial_0_8(2) <= q0_1;
  c0_serial_0_8(3) <= q0_1;

  outputgen62: FOR kk IN 0 TO 3 GENERATE
    c0_serial_0_9(kk) <= std_logic_vector(c0_serial_0_8(kk));
  END GENERATE;

  c0_serial_1_6(0) <= q3_1;
  c0_serial_1_6(1) <= q2_1;
  c0_serial_1_6(2) <= q1_1;
  c0_serial_1_6(3) <= q0_1;

  outputgen61: FOR kk IN 0 TO 3 GENERATE
    c0_serial_1_7(kk) <= std_logic_vector(c0_serial_1_6(kk));
  END GENERATE;

  q0_unsigned <= unsigned(q0_2);

  q3_unsigned_1 <= unsigned(q3_3);

  -- 'Madgwick_correction_fixpt:24' q0q3 = fi(q0*q3, 0, 14, 14, fm);
  -- 
  -- 'Madgwick_correction_fixpt:23' q0q2 = fi(q0*q2, 0, 14, 14, fm);
  -- 
  -- 'Madgwick_correction_fixpt:22' q0q1 = fi(q0*q1, 0, 14, 14, fm);
  -- 
  -- 'Madgwick_correction_fixpt:21' q0q0 = fi(q0*q0, 0, 14, 14, fm);
  tmp_18 <= q0_unsigned * q3_unsigned_1;

  tmp_19 <= unsigned(c0_serialOut_0_3(2));

  q0q1 <= tmp_19(27 DOWNTO 14);

  p289tmp_cast <= resize(q0q1 & '0', 16);
  tmp_20 <= resize(p289tmp_cast, 17);

  tmp_21 <= unsigned(c0_serialOut_0_1(1));

  v2q2q3 <= tmp_21(28 DOWNTO 15);

  tmp_22 <= resize(v2q2q3 & '0', 17);

  tmp_23 <= tmp_20 + tmp_22;

  c_c_28_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ay_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      ay_regout <= unsigned(ay);
    END IF;
  END PROCESS c_c_28_process;

  c_c_29_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ay_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      ay_regout_1 <= ay_regout;
    END IF;
  END PROCESS c_c_29_process;

  c_c_30_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ay_regout_2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      ay_regout_2 <= ay_regout_1;
    END IF;
  END PROCESS c_c_30_process;

  c_c_31_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ay_regout_3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      ay_regout_3 <= ay_regout_2;
    END IF;
  END PROCESS c_c_31_process;

  in_5_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ay_1 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        ay_1 <= ay_regout_3;
      END IF;
    END IF;
  END PROCESS in_5_pipe_process;


  p324tmp_cast <= resize(q0q1 & '0', 16);
  tmp_24 <= resize(p324tmp_cast, 17);

  tmp_25 <= resize(v2q2q3 & '0', 17);

  tmp_26 <= tmp_24 + tmp_25;

  delayMatch_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ay_2 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        ay_2 <= ay_1;
      END IF;
    END IF;
  END PROCESS delayMatch_6_process;


  p287tmp_sub_cast <= signed(resize(tmp_23, 19));
  p287tmp_sub_cast_1 <= signed(resize(ay_2, 19));
  tmp_27 <= p287tmp_sub_cast - p287tmp_sub_cast_1;

  delayMatch_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ay_3 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        ay_3 <= ay_1;
      END IF;
    END IF;
  END PROCESS delayMatch_7_process;


  p322tmp_sub_cast <= signed(resize(tmp_26, 19));
  p322tmp_sub_cast_1 <= signed(resize(ay_3, 19));
  tmp_28 <= p322tmp_sub_cast - p322tmp_sub_cast_1;

  c0_serial_1_8(0) <= tmp_27;
  c0_serial_1_8(1) <= tmp_28;

  outputgen60: FOR kk IN 0 TO 1 GENERATE
    c0_serial_1_9(kk) <= std_logic_vector(c0_serial_1_8(kk));
  END GENERATE;

  v2q0_unsigned <= unsigned(v2q0_2);

  tmp_signed_2 <= signed(tmp_29);

  multiplier_cast <= signed(resize(v2q0_unsigned, 15));
  multiplier_mul_temp <= multiplier_cast * tmp_signed_2;
  tmp_30 <= multiplier_mul_temp(32 DOWNTO 0);

  tmp_31 <= signed(c0_serialOut_0_2(1));

  tmp_32 <= resize(tmp_31, 35);

  tmp_33 <= signed(c0_serialOut_0_4(1));

  tmp_34 <= resize(tmp_33, 35);

  tmp_35 <= tmp_32 + tmp_34;

  tmp_36 <= unsigned(c0_serialOut_0_1(3));

  v2q0mx <= tmp_36(28 DOWNTO 15);

  
--'Madgwick_correction_fixpt:35' v2bz = fi(fi_signed(fi_signed(fi_uminus(v2q0mx)*q2 + v2q0my*q1 + mz*q0q0 + v2q1mx*q3) - mz*q1q1 + v2q2*my*q3) - mz*q2q2 + mz*q3q3, 1, 14, 11, fm);
  --'Madgwick_correction_fixpt:59' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:60' if isfi( a )
  --'Madgwick_correction_fixpt:61' nt = numerictype( a );
  --'Madgwick_correction_fixpt:62' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  --'Madgwick_correction_fixpt:63' y = -fi( a, new_nt, fimath( a ) );
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  p342tmp_cast <= signed(resize(v2q0mx, 15));
  p342tmp_cast_1 <= resize(p342tmp_cast, 16);
  p342tmp_cast_2 <=  - (p342tmp_cast_1);
  tmp_37 <= p342tmp_cast_2(14 DOWNTO 0);

  delayMatch_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q2_3 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        q2_3 <= q2_1;
      END IF;
    END IF;
  END PROCESS delayMatch_8_process;


  multiplier_cast_1 <= signed(resize(q2_3, 15));
  multiplier_mul_temp_1 <= tmp_37 * multiplier_cast_1;
  tmp_38 <= multiplier_mul_temp_1(28 DOWNTO 0);

  tmp_39 <= resize(tmp_38, 30);

  tmp_40 <= unsigned(c0_serialOut_0_1(2));

  v2q1mx <= tmp_40(28 DOWNTO 15);

  --'Madgwick_correction_fixpt:12' v2q0my = fi(fi(2.0, 0, 2, 0, fm)*q0*my, 0, 14, 13, fm);
  tmp_41 <= resize(q0_1 & '0', 16);

  --'Madgwick_correction_fixpt:13' v2q0mz = fi(fi(2.0, 0, 2, 0, fm)*q0*mz, 0, 14, 13, fm);
  tmp_42 <= resize(q0_1 & '0', 16);

  c0_serial_0_10(0) <= tmp_41;
  c0_serial_0_10(1) <= tmp_42;

  outputgen59: FOR kk IN 0 TO 1 GENERATE
    c0_serial_0_11(kk) <= std_logic_vector(c0_serial_0_10(kk));
  END GENERATE;

  c_c_32_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      my_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      my_regout <= unsigned(my);
    END IF;
  END PROCESS c_c_32_process;

  c_c_33_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      my_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      my_regout_1 <= my_regout;
    END IF;
  END PROCESS c_c_33_process;

  c_c_34_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      my_regout_2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      my_regout_2 <= my_regout_1;
    END IF;
  END PROCESS c_c_34_process;

  c_c_35_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      my_regout_3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      my_regout_3 <= my_regout_2;
    END IF;
  END PROCESS c_c_35_process;

  in_8_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      my_1 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        my_1 <= my_regout_3;
      END IF;
    END IF;
  END PROCESS in_8_pipe_process;


  c_c_36_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mz_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      mz_regout <= unsigned(mz);
    END IF;
  END PROCESS c_c_36_process;

  c_c_37_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mz_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      mz_regout_1 <= mz_regout;
    END IF;
  END PROCESS c_c_37_process;

  c_c_38_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mz_regout_2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      mz_regout_2 <= mz_regout_1;
    END IF;
  END PROCESS c_c_38_process;

  c_c_39_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mz_regout_3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      mz_regout_3 <= mz_regout_2;
    END IF;
  END PROCESS c_c_39_process;

  in_9_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mz_1 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        mz_1 <= mz_regout_3;
      END IF;
    END IF;
  END PROCESS in_9_pipe_process;


  c0_serial_1_10(0) <= my_1;
  c0_serial_1_10(1) <= mz_1;

  outputgen58: FOR kk IN 0 TO 1 GENERATE
    c0_serial_1_11(kk) <= std_logic_vector(c0_serial_1_10(kk));
  END GENERATE;

  tmp_unsigned_1 <= unsigned(tmp_43);

  my_unsigned <= unsigned(my_2);

  tmp_44 <= tmp_unsigned_1 * my_unsigned;

  tmp_45 <= unsigned(c0_serialOut_0_5(0));

  v2q0my <= tmp_45(28 DOWNTO 15);

  c0_serial_0_12(0) <= v2q1mx;
  c0_serial_0_12(1) <= v2q1mx;
  c0_serial_0_12(2) <= v2q0mx;
  c0_serial_0_12(3) <= v2q0my;

  outputgen57: FOR kk IN 0 TO 3 GENERATE
    c0_serial_0_13(kk) <= std_logic_vector(c0_serial_0_12(kk));
  END GENERATE;

  delayMatch_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q3_4 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        q3_4 <= q3_1;
      END IF;
    END IF;
  END PROCESS delayMatch_9_process;


  delayMatch_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q2_4 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        q2_4 <= q2_1;
      END IF;
    END IF;
  END PROCESS delayMatch_10_process;


  delayMatch_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q1_3 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        q1_3 <= q1_1;
      END IF;
    END IF;
  END PROCESS delayMatch_11_process;


  c0_serial_1_12(0) <= q3_4;
  c0_serial_1_12(1) <= q2_4;
  c0_serial_1_12(2) <= q3_4;
  c0_serial_1_12(3) <= q1_3;

  outputgen56: FOR kk IN 0 TO 3 GENERATE
    c0_serial_1_13(kk) <= std_logic_vector(c0_serial_1_12(kk));
  END GENERATE;

  v2q1mx_unsigned <= unsigned(v2q1mx_1);

  q3_unsigned_2 <= unsigned(q3_5);

  
-- 'Madgwick_correction_fixpt:33' hy = fi(fi_signed(fi_signed(fi_signed(v2q0mx*q3 + my*q0q0) - v2q0mz*q1 + v2q1mx*q2) - my*q1q1 + my*q2q2 + v2q2*mz*q3) - my*q3q3, 1, 14, 11, fm);
  -- 
  -- 'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  -- 
  -- 'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  -- 
  -- 'Madgwick_correction_fixpt:49' nt = numerictype( a );
  -- 
  -- 'Madgwick_correction_fixpt:50' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  -- 
  -- 'Madgwick_correction_fixpt:51' y = fi( a, new_nt, fimath( a ) );
  -- 
  -- 'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  -- 
  -- 'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  -- 
  -- 'Madgwick_correction_fixpt:52' else
  -- 
  -- 'Madgwick_correction_fixpt:53' y = a;
  -- 
  -- 'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  -- 
  -- 'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  -- 
  -- 'Madgwick_correction_fixpt:52' else
  -- 
  -- 'Madgwick_correction_fixpt:53' y = a;
  tmp_46 <= v2q1mx_unsigned * q3_unsigned_2;

  delayMatch_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q2_5 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        q2_5 <= q2_1;
      END IF;
    END IF;
  END PROCESS delayMatch_12_process;


  delayMatch_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q3_6 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        q3_6 <= q3_1;
      END IF;
    END IF;
  END PROCESS delayMatch_13_process;


  delayMatch_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mz_2 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        mz_2 <= mz_1;
      END IF;
    END IF;
  END PROCESS delayMatch_14_process;


  delayMatch_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      my_3 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        my_3 <= my_1;
      END IF;
    END IF;
  END PROCESS delayMatch_15_process;


  c0_serial_0_14(0) <= q2_5;
  c0_serial_0_14(1) <= q3_6;
  c0_serial_0_14(2) <= mz_2;
  c0_serial_0_14(3) <= my_3;

  outputgen55: FOR kk IN 0 TO 3 GENERATE
    c0_serial_0_15(kk) <= std_logic_vector(c0_serial_0_14(kk));
  END GENERATE;

  tmp_47 <= unsigned(c0_serialOut_0_3(3));

  q0q0 <= tmp_47(27 DOWNTO 14);

  c0_serial_1_14(0) <= q2_5;
  c0_serial_1_14(1) <= q3_6;
  c0_serial_1_14(2) <= q0q0;
  c0_serial_1_14(3) <= q0q0;

  outputgen54: FOR kk IN 0 TO 3 GENERATE
    c0_serial_1_15(kk) <= std_logic_vector(c0_serial_1_14(kk));
  END GENERATE;

  q2_unsigned_1 <= unsigned(q2_6);

  q2_unsigned_2 <= unsigned(q2_7);

  -- 'Madgwick_correction_fixpt:28' q2q2 = fi(q2*q2, 0, 14, 14, fm);
  -- 
  -- 'Madgwick_correction_fixpt:30' q3q3 = fi(q3*q3, 0, 14, 14, fm);
  tmp_48 <= q2_unsigned_1 * q2_unsigned_2;

  delayMatch_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mx_2 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        mx_2 <= mx_1;
      END IF;
    END IF;
  END PROCESS delayMatch_16_process;


  delayMatch_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mz_3 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        mz_3 <= mz_1;
      END IF;
    END IF;
  END PROCESS delayMatch_17_process;


  delayMatch_18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      my_4 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        my_4 <= my_1;
      END IF;
    END IF;
  END PROCESS delayMatch_18_process;


  c0_serial_0_16(0) <= mx_2;
  c0_serial_0_16(1) <= mz_3;
  c0_serial_0_16(2) <= my_4;
  c0_serial_0_16(3) <= mx_2;

  outputgen53: FOR kk IN 0 TO 3 GENERATE
    c0_serial_0_17(kk) <= std_logic_vector(c0_serial_0_16(kk));
  END GENERATE;

  tmp_49 <= unsigned(c0_serialOut_0(2));

  q1q1 <= tmp_49(27 DOWNTO 14);

  c0_serial_1_16(0) <= q0q0;
  c0_serial_1_16(1) <= q1q1;
  c0_serial_1_16(2) <= q1q1;
  c0_serial_1_16(3) <= q1q1;

  outputgen52: FOR kk IN 0 TO 3 GENERATE
    c0_serial_1_17(kk) <= std_logic_vector(c0_serial_1_16(kk));
  END GENERATE;

  mx_unsigned <= unsigned(mx_3);

  q0q0_unsigned <= unsigned(q0q0_1);

  -- Reference direction of Earth's magnetic field
  -- 
  
-- 'Madgwick_correction_fixpt:32' hx = fi(fi_signed(fi_signed(fi_signed(mx*q0q0) - v2q0my*q3 + v2q0mz*q2 + mx*q1q1 + v2q1*my*q2 + v2q1*mz*q3) - mx*q2q2) - mx*q3q3, 1, 14, 11, fm);
  -- 
  -- 'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  -- 
  -- 'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  -- 
  -- 'Madgwick_correction_fixpt:49' nt = numerictype( a );
  -- 
  -- 'Madgwick_correction_fixpt:50' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  -- 
  -- 'Madgwick_correction_fixpt:51' y = fi( a, new_nt, fimath( a ) );
  -- 
  -- 'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  -- 
  -- 'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  -- 
  -- 'Madgwick_correction_fixpt:52' else
  -- 
  -- 'Madgwick_correction_fixpt:53' y = a;
  -- 
  -- 'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  -- 
  -- 'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  -- 
  -- 'Madgwick_correction_fixpt:52' else
  -- 
  -- 'Madgwick_correction_fixpt:53' y = a;
  tmp_50 <= mx_unsigned * q0q0_unsigned;

  c0_serial_0_18(0) <= v2q2;
  c0_serial_0_18(1) <= v2q1;
  c0_serial_0_18(2) <= v2q2;
  c0_serial_0_18(3) <= v2q1;

  outputgen51: FOR kk IN 0 TO 3 GENERATE
    c0_serial_0_19(kk) <= std_logic_vector(c0_serial_0_18(kk));
  END GENERATE;

  c0_serial_1_18(0) <= my_1;
  c0_serial_1_18(1) <= my_1;
  c0_serial_1_18(2) <= mz_1;
  c0_serial_1_18(3) <= mz_1;

  outputgen50: FOR kk IN 0 TO 3 GENERATE
    c0_serial_1_19(kk) <= std_logic_vector(c0_serial_1_18(kk));
  END GENERATE;

  v2q2_unsigned <= unsigned(v2q2_1);

  my_unsigned_1 <= unsigned(my_5);

  tmp_51 <= v2q2_unsigned * my_unsigned_1;

  c0_serial_0_20(0) <= unsigned(c0_serialOut_0_9(0));
  c0_serial_0_20(1) <= unsigned(c0_serialOut_0_9(1));
  c0_serial_0_20(2) <= unsigned(c0_serialOut_0_9(2));
  c0_serial_0_20(3) <= unsigned(c0_serialOut_0_9(3));

  outputgen49: FOR kk IN 0 TO 3 GENERATE
    c0_serial_0_21(kk) <= std_logic_vector(c0_serial_0_20(kk));
  END GENERATE;

  delayMatch_19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q3_7 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        q3_7 <= q3_1;
      END IF;
    END IF;
  END PROCESS delayMatch_19_process;


  delayMatch_20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q2_8 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        q2_8 <= q2_1;
      END IF;
    END IF;
  END PROCESS delayMatch_20_process;


  c0_serial_1_20(0) <= q3_7;
  c0_serial_1_20(1) <= q2_8;
  c0_serial_1_20(2) <= q3_7;
  c0_serial_1_20(3) <= q3_7;

  outputgen48: FOR kk IN 0 TO 3 GENERATE
    c0_serial_1_21(kk) <= std_logic_vector(c0_serial_1_20(kk));
  END GENERATE;

  tmp_unsigned_2 <= unsigned(tmp_52);

  q3_unsigned_3 <= unsigned(q3_8);

  tmp_53 <= tmp_unsigned_2 * q3_unsigned_3;

  delayMatch_21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_54 <= to_signed(2#000000000000000000000000000000#, 30);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_54 <= tmp_39;
      END IF;
    END IF;
  END PROCESS delayMatch_21_process;


  tmp_55 <= unsigned(c0_serialOut_0_6(3));

  tmp_56 <= signed(resize(tmp_55, 30));

  tmp_57 <= tmp_54 + tmp_56;

  tmp_58 <= resize(tmp_57 & '0', 32);

  tmp_59 <= unsigned(c0_serialOut_0_7(2));

  tmp_60 <= signed(resize(tmp_59, 32));

  tmp_61 <= tmp_58 + tmp_60;

  tmp_62 <= resize(tmp_61, 33);

  tmp_63 <= unsigned(c0_serialOut_0_6(0));

  tmp_64 <= signed(resize(tmp_63 & '0', 33));

  tmp_65 <= tmp_62 + tmp_64;

  tmp_66 <= unsigned(c0_serialOut_0_8(1));

  p335tmp_sub_cast <= resize(tmp_65, 34);
  p335tmp_sub_cast_1 <= signed(resize(tmp_66, 34));
  p335tmp_sub_temp <= p335tmp_sub_cast - p335tmp_sub_cast_1;
  tmp_67 <= resize(p335tmp_sub_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
    '0', 48);

  tmp_68 <= unsigned(c0_serialOut_0_10(0));

  tmp_69 <= signed(resize(tmp_68, 48));

  tmp_70 <= tmp_67 + tmp_69;

  delayMatch_22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd(0) <= mz_1;
        delayMatch_regrsvd(1) <= delayMatch_regrsvd(0);
      END IF;
    END IF;
  END PROCESS delayMatch_22_process;

  mz_4 <= delayMatch_regrsvd(1);

  delayMatch_23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_1 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_1(0) <= my_1;
        delayMatch_regrsvd_1(1) <= delayMatch_regrsvd_1(0);
      END IF;
    END IF;
  END PROCESS delayMatch_23_process;

  my_6 <= delayMatch_regrsvd_1(1);

  delayMatch_24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_2 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_2(0) <= mx_1;
        delayMatch_regrsvd_2(1) <= delayMatch_regrsvd_2(0);
      END IF;
    END IF;
  END PROCESS delayMatch_24_process;

  mx_4 <= delayMatch_regrsvd_2(1);

  c0_serial_0_22(0) <= mz_4;
  c0_serial_0_22(1) <= my_6;
  c0_serial_0_22(2) <= mx_4;
  c0_serial_0_22(3) <= mz_4;

  outputgen47: FOR kk IN 0 TO 3 GENERATE
    c0_serial_0_23(kk) <= std_logic_vector(c0_serial_0_22(kk));
  END GENERATE;

  tmp_71 <= unsigned(c0_serialOut_0_7(0));

  q2q2 <= tmp_71(27 DOWNTO 14);

  tmp_72 <= unsigned(c0_serialOut_0_7(1));

  q3q3 <= tmp_72(27 DOWNTO 14);

  c0_serial_1_22(0) <= q2q2;
  c0_serial_1_22(1) <= q2q2;
  c0_serial_1_22(2) <= q2q2;
  c0_serial_1_22(3) <= q3q3;

  outputgen46: FOR kk IN 0 TO 3 GENERATE
    c0_serial_1_23(kk) <= std_logic_vector(c0_serial_1_22(kk));
  END GENERATE;

  mz_unsigned <= unsigned(mz_5);

  q2q2_unsigned <= unsigned(q2q2_1);

  tmp_73 <= mz_unsigned * q2q2_unsigned;

  delayMatch_25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_74 <= to_signed(0, 48);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_74 <= tmp_70;
      END IF;
    END IF;
  END PROCESS delayMatch_25_process;


  tmp_75 <= unsigned(c0_serialOut_0_11(0));

  p332tmp_sub_cast <= resize(tmp_74, 49);
  p332tmp_sub_cast_1 <= signed(resize(tmp_75 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
    '0' & '0' & '0', 49));
  p332tmp_sub_temp <= p332tmp_sub_cast - p332tmp_sub_cast_1;
  tmp_76 <= resize(p332tmp_sub_temp, 50);

  tmp_77 <= unsigned(c0_serialOut_0_11(3));

  tmp_78 <= signed(resize(tmp_77 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
    '0', 50));

  tmp_79 <= tmp_76 + tmp_78;

  v2bz <= tmp_79(43 DOWNTO 30);

  c0_serial_0_24(0) <= v2bz;
  c0_serial_0_24(1) <= v2bz;
  c0_serial_0_24(2) <= v2bz;
  c0_serial_0_24(3) <= v2bz;

  outputgen45: FOR kk IN 0 TO 3 GENERATE
    c0_serial_0_25(kk) <= std_logic_vector(c0_serial_0_24(kk));
  END GENERATE;

  delayMatch_26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_3 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_3(0) <= q0_1;
        delayMatch_regrsvd_3(1 TO 2) <= delayMatch_regrsvd_3(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch_26_process;

  q0_3 <= delayMatch_regrsvd_3(2);

  delayMatch_27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_4 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_4(0) <= q3_1;
        delayMatch_regrsvd_4(1 TO 2) <= delayMatch_regrsvd_4(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch_27_process;

  q3_9 <= delayMatch_regrsvd_4(2);

  delayMatch_28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_5 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_5(0) <= q1_1;
        delayMatch_regrsvd_5(1 TO 2) <= delayMatch_regrsvd_5(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch_28_process;

  q1_4 <= delayMatch_regrsvd_5(2);

  delayMatch_29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_6 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_6(0) <= q2_1;
        delayMatch_regrsvd_6(1 TO 2) <= delayMatch_regrsvd_6(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch_29_process;

  q2_9 <= delayMatch_regrsvd_6(2);

  c0_serial_1_24(0) <= q0_3;
  c0_serial_1_24(1) <= q3_9;
  c0_serial_1_24(2) <= q1_4;
  c0_serial_1_24(3) <= q2_9;

  outputgen44: FOR kk IN 0 TO 3 GENERATE
    c0_serial_1_25(kk) <= std_logic_vector(c0_serial_1_24(kk));
  END GENERATE;

  v2bz_signed <= signed(v2bz_1);

  q0_unsigned_1 <= unsigned(q0_4);

  multiplier_cast_2 <= signed(resize(q0_unsigned_1, 15));
  multiplier_mul_temp_2 <= v2bz_signed * multiplier_cast_2;
  tmp_80 <= multiplier_mul_temp_2(27 DOWNTO 0);

  tmp_81 <= signed(c0_serialOut_0_12(1));

  delayMatch_30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_82 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_82 <= tmp_81;
      END IF;
    END IF;
  END PROCESS delayMatch_30_process;


  tmp_83 <= signed(c0_serialOut_0_12(3));

  delayMatch_31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_84 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_84 <= tmp_83;
      END IF;
    END IF;
  END PROCESS delayMatch_31_process;


  c0_serial_0_26(0) <= tmp_82;
  c0_serial_0_26(1) <= tmp_84;

  outputgen43: FOR kk IN 0 TO 1 GENERATE
    c0_serial_0_27(kk) <= std_logic_vector(c0_serial_0_26(kk));
  END GENERATE;

  tmp_85 <= unsigned(c0_serialOut_0_5(1));

  v2q0mz <= tmp_85(28 DOWNTO 15);

  c0_serial_0_28(0) <= v2q0my;
  c0_serial_0_28(1) <= v2q0mz;
  c0_serial_0_28(2) <= v2q0mz;

  outputgen42: FOR kk IN 0 TO 2 GENERATE
    c0_serial_0_29(kk) <= std_logic_vector(c0_serial_0_28(kk));
  END GENERATE;

  delayMatch_32_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q3_10 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        q3_10 <= q3_1;
      END IF;
    END IF;
  END PROCESS delayMatch_32_process;


  delayMatch_33_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q1_5 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        q1_5 <= q1_1;
      END IF;
    END IF;
  END PROCESS delayMatch_33_process;


  delayMatch_34_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q2_10 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        q2_10 <= q2_1;
      END IF;
    END IF;
  END PROCESS delayMatch_34_process;


  c0_serial_1_26(0) <= q3_10;
  c0_serial_1_26(1) <= q1_5;
  c0_serial_1_26(2) <= q2_10;

  outputgen41: FOR kk IN 0 TO 2 GENERATE
    c0_serial_1_27(kk) <= std_logic_vector(c0_serial_1_26(kk));
  END GENERATE;

  v2q0my_unsigned <= unsigned(v2q0my_1);

  q3_unsigned_4 <= unsigned(q3_11);

  tmp_86 <= v2q0my_unsigned * q3_unsigned_4;

  tmp_87 <= unsigned(c0_serialOut_0_6(2));

  tmp_88 <= resize(tmp_87 & '0', 30);

  tmp_89 <= unsigned(c0_serialOut_0_7(3));

  tmp_90 <= resize(tmp_89, 30);

  tmp_91 <= tmp_88 + tmp_90;

  tmp_92 <= unsigned(c0_serialOut_0_13(1));

  p357tmp_sub_cast <= signed(resize(tmp_91, 32));
  p357tmp_sub_cast_1 <= signed(resize(tmp_92 & '0', 32));
  p357tmp_sub_temp <= p357tmp_sub_cast - p357tmp_sub_cast_1;
  tmp_93 <= resize(p357tmp_sub_temp, 33);

  tmp_94 <= unsigned(c0_serialOut_0_6(1));

  tmp_95 <= signed(resize(tmp_94 & '0', 33));

  tmp_96 <= tmp_93 + tmp_95;

  tmp_97 <= unsigned(c0_serialOut_0_8(2));

  p355tmp_sub_cast <= resize(tmp_96, 34);
  p355tmp_sub_cast_1 <= signed(resize(tmp_97, 34));
  p355tmp_sub_temp <= p355tmp_sub_cast - p355tmp_sub_cast_1;
  tmp_98 <= resize(p355tmp_sub_temp, 35);

  delayMatch_35_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_99 <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_99 <= tmp_98;
      END IF;
    END IF;
  END PROCESS delayMatch_35_process;


  tmp_100 <= unsigned(c0_serialOut_0_11(1));

  tmp_101 <= signed(resize(tmp_100, 35));

  tmp_102 <= tmp_99 + tmp_101;

  tmp_103 <= resize(tmp_102 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 
    49);

  tmp_104 <= unsigned(c0_serialOut_0_10(2));

  tmp_105 <= signed(resize(tmp_104, 49));

  delayMatch_36_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_7 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_7(0) <= my_1;
        delayMatch_regrsvd_7(1) <= delayMatch_regrsvd_7(0);
      END IF;
    END IF;
  END PROCESS delayMatch_36_process;

  my_7 <= delayMatch_regrsvd_7(1);

  delayMatch_37_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_8 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_8(0) <= mx_1;
        delayMatch_regrsvd_8(1) <= delayMatch_regrsvd_8(0);
      END IF;
    END IF;
  END PROCESS delayMatch_37_process;

  mx_5 <= delayMatch_regrsvd_8(1);

  c0_serial_0_30(0) <= my_7;
  c0_serial_0_30(1) <= mx_5;

  outputgen40: FOR kk IN 0 TO 1 GENERATE
    c0_serial_0_31(kk) <= std_logic_vector(c0_serial_0_30(kk));
  END GENERATE;

  c0_serial_1_28(0) <= q3q3;
  c0_serial_1_28(1) <= q3q3;

  outputgen39: FOR kk IN 0 TO 1 GENERATE
    c0_serial_1_29(kk) <= std_logic_vector(c0_serial_1_28(kk));
  END GENERATE;

  my_unsigned_2 <= unsigned(my_8);

  q3q3_unsigned <= unsigned(q3q3_1);

  tmp_106 <= my_unsigned_2 * q3q3_unsigned;

  delayMatch_38_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_107 <= to_signed(0, 49);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_107 <= tmp_105;
      END IF;
    END IF;
  END PROCESS delayMatch_38_process;


  tmp_108 <= tmp_103 + tmp_107;

  tmp_109 <= unsigned(c0_serialOut_0_14(0));

  p350hy_sub_cast <= resize(tmp_108, 50);
  p350hy_sub_cast_1 <= signed(resize(tmp_109 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
    '0' & '0' & '0', 50));
  p350hy_sub_temp <= p350hy_sub_cast - p350hy_sub_cast_1;
  hy <= p350hy_sub_temp(43 DOWNTO 30);

  tmp_110 <= unsigned(c0_serialOut_0_8(0));

  tmp_111 <= unsigned(c0_serialOut_0_13(0));

  p370tmp_sub_cast <= signed(resize(tmp_110, 30));
  p370tmp_sub_cast_1 <= signed(resize(tmp_111 & '0', 30));
  p370tmp_sub_temp <= p370tmp_sub_cast - p370tmp_sub_cast_1;
  tmp_112 <= resize(p370tmp_sub_temp, 31);

  tmp_113 <= unsigned(c0_serialOut_0_13(2));

  tmp_114 <= signed(resize(tmp_113 & '0', 31));

  tmp_115 <= tmp_112 + tmp_114;

  tmp_116 <= resize(tmp_115, 32);

  tmp_117 <= unsigned(c0_serialOut_0_8(3));

  tmp_118 <= signed(resize(tmp_117, 32));

  tmp_119 <= tmp_116 + tmp_118;

  tmp_120 <= resize(tmp_119 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 
    46);

  tmp_121 <= unsigned(c0_serialOut_0_10(1));

  tmp_122 <= signed(resize(tmp_121, 46));

  tmp_123 <= tmp_120 + tmp_122;

  tmp_124 <= resize(tmp_123, 47);

  tmp_125 <= unsigned(c0_serialOut_0_10(3));

  tmp_126 <= signed(resize(tmp_125, 47));

  tmp_127 <= tmp_124 + tmp_126;

  delayMatch_39_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_128 <= to_signed(0, 47);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_128 <= tmp_127;
      END IF;
    END IF;
  END PROCESS delayMatch_39_process;


  tmp_129 <= unsigned(c0_serialOut_0_11(2));

  tmp_130 <= unsigned(c0_serialOut_0_14(1));

  p360hx_sub_cast <= resize(tmp_128, 48);
  p360hx_sub_cast_1 <= signed(resize(tmp_129 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
    '0' & '0' & '0', 48));
  p360hx_sub_temp <= p360hx_sub_cast - p360hx_sub_cast_1;
  p360hx_sub_cast_2 <= resize(p360hx_sub_temp, 49);
  p360hx_sub_cast_3 <= signed(resize(tmp_130 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
    '0' & '0' & '0', 49));
  p360hx_sub_temp_1 <= p360hx_sub_cast_2 - p360hx_sub_cast_3;
  hx <= p360hx_sub_temp_1(43 DOWNTO 30);

  c0_serial_0_32(0) <= hy;
  c0_serial_0_32(1) <= hx;

  outputgen38: FOR kk IN 0 TO 1 GENERATE
    c0_serial_0_33(kk) <= std_logic_vector(c0_serial_0_32(kk));
  END GENERATE;

  c0_serial_1_30(0) <= hy;
  c0_serial_1_30(1) <= hx;

  outputgen37: FOR kk IN 0 TO 1 GENERATE
    c0_serial_1_31(kk) <= std_logic_vector(c0_serial_1_30(kk));
  END GENERATE;

  hy_signed <= signed(hy_1);

  hy_signed_1 <= signed(hy_2);

  -- 'Madgwick_correction_fixpt:34' v2bx = fi(sqrt( hx*hx + hy*hy ), 0, 14, 12, fm);
  tmp_131 <= hy_signed * hy_signed_1;

  tmp_132 <= signed(c0_serialOut_0_15(1));

  tmp_133 <= resize(tmp_132, 29);

  tmp_134 <= signed(c0_serialOut_0_15(0));

  tmp_135 <= resize(tmp_134, 29);

  tmp_136 <= tmp_133 + tmp_135;

  
  tmp_137 <= '1' WHEN tmp_136 <= 0 ELSE
      '0';

  y_y <= to_signed(2#000000000000000#, 15);

  delayMatch_40_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y_y_1 <= to_signed(2#000000000000000#, 15);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        y_y_1 <= y_y;
      END IF;
    END IF;
  END PROCESS delayMatch_40_process;


  delayMatch_41_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_9 <= (OTHERS => to_signed(2#000000000000000#, 15));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_9(0) <= y_y_1;
        delayMatch_regrsvd_9(1 TO 3) <= delayMatch_regrsvd_9(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch_41_process;

  y_y_2 <= delayMatch_regrsvd_9(3);

  p344_output : PROCESS (tmp_137, y_y_2, tmp_136)
    VARIABLE yy : signed(14 DOWNTO 0);
    VARIABLE ytemp : signed(14 DOWNTO 0);
    VARIABLE y_0 : signed(14 DOWNTO 0);
    VARIABLE y_1 : signed(14 DOWNTO 0);
    VARIABLE cast : vector_of_unsigned8(0 TO 13);
    VARIABLE sll_temp : vector_of_signed15(0 TO 13);
    VARIABLE mul_temp : vector_of_signed30(0 TO 13);
    VARIABLE cast_0 : vector_of_signed30(0 TO 13);
  BEGIN
    IF tmp_137 = '1' THEN 
      y_1 := to_signed(2#000000000000000#, 15);
    ELSE 
      yy := y_y_2;

      FOR ii IN 13 DOWNTO 0 LOOP
        cast(ii) := unsigned(to_signed(ii, 32)(7 DOWNTO 0));
        sll_temp(ii) := to_signed(2#000000000000001#, 15) sll to_integer(cast(ii));
        ytemp := yy OR sll_temp(ii);
        mul_temp(ii) := ytemp * ytemp;
        cast_0(ii) := resize(tmp_136, 30);
        IF mul_temp(ii) <= cast_0(ii) THEN 
          y_0 := ytemp;
        ELSE 
          y_0 := yy;
        END IF;
        yy := y_0;
      END LOOP;

      y_1 := yy;
    END IF;
    tmp_138 <= y_1;
  END PROCESS p344_output;


  v2bx <= unsigned(tmp_138(12 DOWNTO 0) & '0');

  c0_serial_0_34(0) <= v2bx;
  c0_serial_0_34(1) <= v2bx;
  c0_serial_0_34(2) <= v2bx;
  c0_serial_0_34(3) <= v2bx;

  outputgen36: FOR kk IN 0 TO 3 GENERATE
    c0_serial_0_35(kk) <= std_logic_vector(c0_serial_0_34(kk));
  END GENERATE;

  p202tmp_sub_cast <= signed(resize(q2q2, 16));
  p202tmp_sub_temp <= 8192 - p202tmp_sub_cast;
  p202tmp_sub_cast_1 <= resize(p202tmp_sub_temp, 17);
  p202tmp_sub_cast_2 <= signed(resize(q3q3, 17));
  tmp_139 <= p202tmp_sub_cast_1 - p202tmp_sub_cast_2;

  delayMatch_42_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_10 <= (OTHERS => to_signed(2#00000000000000000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_10(0) <= tmp_139;
        delayMatch_regrsvd_10(1) <= delayMatch_regrsvd_10(0);
      END IF;
    END IF;
  END PROCESS delayMatch_42_process;

  tmp_140 <= delayMatch_regrsvd_10(1);

  p241tmp_sub_cast <= signed(resize(q2q2, 16));
  p241tmp_sub_temp <= 8192 - p241tmp_sub_cast;
  p241tmp_sub_cast_1 <= resize(p241tmp_sub_temp, 17);
  p241tmp_sub_cast_2 <= signed(resize(q3q3, 17));
  tmp_141 <= p241tmp_sub_cast_1 - p241tmp_sub_cast_2;

  delayMatch_43_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_11 <= (OTHERS => to_signed(2#00000000000000000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_11(0) <= tmp_141;
        delayMatch_regrsvd_11(1) <= delayMatch_regrsvd_11(0);
      END IF;
    END IF;
  END PROCESS delayMatch_43_process;

  tmp_142 <= delayMatch_regrsvd_11(1);

  p281tmp_sub_cast <= signed(resize(q2q2, 16));
  p281tmp_sub_temp <= 8192 - p281tmp_sub_cast;
  p281tmp_sub_cast_1 <= resize(p281tmp_sub_temp, 17);
  p281tmp_sub_cast_2 <= signed(resize(q3q3, 17));
  tmp_143 <= p281tmp_sub_cast_1 - p281tmp_sub_cast_2;

  delayMatch_44_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_12 <= (OTHERS => to_signed(2#00000000000000000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_12(0) <= tmp_143;
        delayMatch_regrsvd_12(1) <= delayMatch_regrsvd_12(0);
      END IF;
    END IF;
  END PROCESS delayMatch_44_process;

  tmp_144 <= delayMatch_regrsvd_12(1);

  p319tmp_sub_cast <= signed(resize(q2q2, 16));
  p319tmp_sub_temp <= 8192 - p319tmp_sub_cast;
  p319tmp_sub_cast_1 <= resize(p319tmp_sub_temp, 17);
  p319tmp_sub_cast_2 <= signed(resize(q3q3, 17));
  tmp_145 <= p319tmp_sub_cast_1 - p319tmp_sub_cast_2;

  delayMatch_45_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_13 <= (OTHERS => to_signed(2#00000000000000000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_13(0) <= tmp_145;
        delayMatch_regrsvd_13(1) <= delayMatch_regrsvd_13(0);
      END IF;
    END IF;
  END PROCESS delayMatch_45_process;

  tmp_146 <= delayMatch_regrsvd_13(1);

  c0_serial_1_32(0) <= tmp_140;
  c0_serial_1_32(1) <= tmp_142;
  c0_serial_1_32(2) <= tmp_144;
  c0_serial_1_32(3) <= tmp_146;

  outputgen35: FOR kk IN 0 TO 3 GENERATE
    c0_serial_1_33(kk) <= std_logic_vector(c0_serial_1_32(kk));
  END GENERATE;

  v2bx_unsigned <= unsigned(v2bx_1);

  tmp_signed_3 <= signed(tmp_147);

  multiplier_cast_3 <= signed(resize(v2bx_unsigned, 15));
  multiplier_mul_temp_3 <= multiplier_cast_3 * tmp_signed_3;
  tmp_148 <= multiplier_mul_temp_3(30 DOWNTO 0);

  tmp_149 <= signed(c0_serialOut_0_16(2));

  tmp_150 <= resize(tmp_149, 32);

  c0_serial_0_36(0) <= v2bz;
  c0_serial_0_36(1) <= v2bz;
  c0_serial_0_36(2) <= v2bz;
  c0_serial_0_36(3) <= v2bz;

  outputgen34: FOR kk IN 0 TO 3 GENERATE
    c0_serial_0_37(kk) <= std_logic_vector(c0_serial_0_36(kk));
  END GENERATE;

  tmp_151 <= unsigned(c0_serialOut_0_3(1));

  q0q2 <= tmp_151(27 DOWNTO 14);

  p200tmp_sub_cast <= signed(resize(q1q3, 16));
  p200tmp_sub_cast_1 <= signed(resize(q0q2, 16));
  tmp_152 <= p200tmp_sub_cast - p200tmp_sub_cast_1;

  delayMatch_46_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_14 <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_14(0) <= tmp_152;
        delayMatch_regrsvd_14(1) <= delayMatch_regrsvd_14(0);
      END IF;
    END IF;
  END PROCESS delayMatch_46_process;

  tmp_153 <= delayMatch_regrsvd_14(1);

  p239tmp_sub_cast <= signed(resize(q1q3, 16));
  p239tmp_sub_cast_1 <= signed(resize(q0q2, 16));
  tmp_154 <= p239tmp_sub_cast - p239tmp_sub_cast_1;

  delayMatch_47_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_15 <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_15(0) <= tmp_154;
        delayMatch_regrsvd_15(1) <= delayMatch_regrsvd_15(0);
      END IF;
    END IF;
  END PROCESS delayMatch_47_process;

  tmp_155 <= delayMatch_regrsvd_15(1);

  p279tmp_sub_cast <= signed(resize(q1q3, 16));
  p279tmp_sub_cast_1 <= signed(resize(q0q2, 16));
  tmp_156 <= p279tmp_sub_cast - p279tmp_sub_cast_1;

  delayMatch_48_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_16 <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_16(0) <= tmp_156;
        delayMatch_regrsvd_16(1) <= delayMatch_regrsvd_16(0);
      END IF;
    END IF;
  END PROCESS delayMatch_48_process;

  tmp_157 <= delayMatch_regrsvd_16(1);

  p317tmp_sub_cast <= signed(resize(q1q3, 16));
  p317tmp_sub_cast_1 <= signed(resize(q0q2, 16));
  tmp_158 <= p317tmp_sub_cast - p317tmp_sub_cast_1;

  delayMatch_49_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_17 <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_17(0) <= tmp_158;
        delayMatch_regrsvd_17(1) <= delayMatch_regrsvd_17(0);
      END IF;
    END IF;
  END PROCESS delayMatch_49_process;

  tmp_159 <= delayMatch_regrsvd_17(1);

  c0_serial_1_34(0) <= tmp_153;
  c0_serial_1_34(1) <= tmp_155;
  c0_serial_1_34(2) <= tmp_157;
  c0_serial_1_34(3) <= tmp_159;

  outputgen33: FOR kk IN 0 TO 3 GENERATE
    c0_serial_1_35(kk) <= std_logic_vector(c0_serial_1_34(kk));
  END GENERATE;

  v2bz_signed_1 <= signed(v2bz_2);

  tmp_signed_4 <= signed(tmp_160);

  tmp_161 <= v2bz_signed_1 * tmp_signed_4;

  tmp_162 <= signed(c0_serialOut_0_17(2));

  tmp_163 <= resize(tmp_162 & '0', 32);

  delayMatch_50_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_164 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_164 <= tmp_163;
      END IF;
    END IF;
  END PROCESS delayMatch_50_process;


  tmp_165 <= tmp_150 + tmp_164;

  tmp_166 <= signed(c0_serialOut_0_16(3));

  tmp_167 <= resize(tmp_166, 32);

  tmp_168 <= signed(c0_serialOut_0_17(3));

  tmp_169 <= resize(tmp_168 & '0', 32);

  delayMatch_51_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_170 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_170 <= tmp_169;
      END IF;
    END IF;
  END PROCESS delayMatch_51_process;


  tmp_171 <= tmp_167 + tmp_170;

  delayMatch_52_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_18 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_18(0) <= mx_1;
        delayMatch_regrsvd_18(1 TO 4) <= delayMatch_regrsvd_18(0 TO 3);
      END IF;
    END IF;
  END PROCESS delayMatch_52_process;

  mx_6 <= delayMatch_regrsvd_18(4);

  p277tmp_sub_cast <= resize(tmp_165, 33);
  p277tmp_sub_cast_1 <= signed(resize(mx_6 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' 
    & '0', 33));
  tmp_172 <= p277tmp_sub_cast - p277tmp_sub_cast_1;

  delayMatch_53_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_19 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_19(0) <= mx_1;
        delayMatch_regrsvd_19(1 TO 4) <= delayMatch_regrsvd_19(0 TO 3);
      END IF;
    END IF;
  END PROCESS delayMatch_53_process;

  mx_7 <= delayMatch_regrsvd_19(4);

  p315tmp_sub_cast <= resize(tmp_171, 33);
  p315tmp_sub_cast_1 <= signed(resize(mx_7 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' 
    & '0', 33));
  tmp_173 <= p315tmp_sub_cast - p315tmp_sub_cast_1;

  c0_serial_1_36(0) <= tmp_172;
  c0_serial_1_36(1) <= tmp_173;

  outputgen32: FOR kk IN 0 TO 1 GENERATE
    c0_serial_1_37(kk) <= std_logic_vector(c0_serial_1_36(kk));
  END GENERATE;

  tmp_signed_5 <= signed(tmp_174);

  tmp_signed_6 <= signed(tmp_175);

  tmp_176 <= tmp_signed_5 * tmp_signed_6;

  c0_serial_0_38(0) <= v2bx;
  c0_serial_0_38(1) <= v2bx;
  c0_serial_0_38(2) <= v2bx;
  c0_serial_0_38(3) <= v2bx;

  outputgen31: FOR kk IN 0 TO 3 GENERATE
    c0_serial_0_39(kk) <= std_logic_vector(c0_serial_0_38(kk));
  END GENERATE;

  delayMatch_54_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_20 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_20(0) <= q1_1;
        delayMatch_regrsvd_20(1 TO 3) <= delayMatch_regrsvd_20(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch_54_process;

  q1_6 <= delayMatch_regrsvd_20(3);

  delayMatch_55_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_21 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_21(0) <= q0_1;
        delayMatch_regrsvd_21(1 TO 3) <= delayMatch_regrsvd_21(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch_55_process;

  q0_5 <= delayMatch_regrsvd_21(3);

  delayMatch_56_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_22 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_22(0) <= q3_1;
        delayMatch_regrsvd_22(1 TO 3) <= delayMatch_regrsvd_22(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch_56_process;

  q3_12 <= delayMatch_regrsvd_22(3);

  c0_serial_1_38(0) <= q1_6;
  c0_serial_1_38(1) <= q0_5;
  c0_serial_1_38(2) <= q1_6;
  c0_serial_1_38(3) <= q3_12;

  outputgen30: FOR kk IN 0 TO 3 GENERATE
    c0_serial_1_39(kk) <= std_logic_vector(c0_serial_1_38(kk));
  END GENERATE;

  v2bx_unsigned_1 <= unsigned(v2bx_2);

  q1_unsigned_1 <= unsigned(q1_7);

  tmp_177 <= v2bx_unsigned_1 * q1_unsigned_1;

  tmp_178 <= unsigned(c0_serialOut_0_19(2));

  tmp_179 <= signed(resize(tmp_178, 30));

  c0_serial_0_40(0) <= v2bz;
  c0_serial_0_40(1) <= v2bz;
  c0_serial_0_40(2) <= v2bz;
  c0_serial_0_40(3) <= v2bz;

  outputgen29: FOR kk IN 0 TO 3 GENERATE
    c0_serial_0_41(kk) <= std_logic_vector(c0_serial_0_40(kk));
  END GENERATE;

  delayMatch_57_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_23 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_23(0) <= q2_1;
        delayMatch_regrsvd_23(1 TO 2) <= delayMatch_regrsvd_23(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch_57_process;

  q2_11 <= delayMatch_regrsvd_23(2);

  delayMatch_58_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_24 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_24(0) <= q1_1;
        delayMatch_regrsvd_24(1 TO 2) <= delayMatch_regrsvd_24(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch_58_process;

  q1_8 <= delayMatch_regrsvd_24(2);

  delayMatch_59_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_25 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_25(0) <= q3_1;
        delayMatch_regrsvd_25(1 TO 2) <= delayMatch_regrsvd_25(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch_59_process;

  q3_13 <= delayMatch_regrsvd_25(2);

  delayMatch_60_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_26 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_26(0) <= q0_1;
        delayMatch_regrsvd_26(1 TO 2) <= delayMatch_regrsvd_26(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch_60_process;

  q0_6 <= delayMatch_regrsvd_26(2);

  c0_serial_1_40(0) <= q2_11;
  c0_serial_1_40(1) <= q1_8;
  c0_serial_1_40(2) <= q3_13;
  c0_serial_1_40(3) <= q0_6;

  outputgen28: FOR kk IN 0 TO 3 GENERATE
    c0_serial_1_41(kk) <= std_logic_vector(c0_serial_1_40(kk));
  END GENERATE;

  v2bz_signed_2 <= signed(v2bz_3);

  q2_unsigned_3 <= unsigned(q2_12);

  multiplier_cast_4 <= signed(resize(q2_unsigned_3, 15));
  multiplier_mul_temp_4 <= v2bz_signed_2 * multiplier_cast_4;
  tmp_180 <= multiplier_mul_temp_4(27 DOWNTO 0);

  tmp_181 <= signed(c0_serialOut_0_20(2));

  tmp_182 <= resize(tmp_181 & '0', 30);

  c0_serial_0_42(0) <= v2bx;
  c0_serial_0_42(1) <= v2bx;

  outputgen27: FOR kk IN 0 TO 1 GENERATE
    c0_serial_0_43(kk) <= std_logic_vector(c0_serial_0_42(kk));
  END GENERATE;

  delayMatch_61_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_27 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_27(0) <= q2_1;
        delayMatch_regrsvd_27(1 TO 3) <= delayMatch_regrsvd_27(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch_61_process;

  q2_13 <= delayMatch_regrsvd_27(3);

  c0_serial_1_42(0) <= q2_13;
  c0_serial_1_42(1) <= q2_13;

  outputgen26: FOR kk IN 0 TO 1 GENERATE
    c0_serial_1_43(kk) <= std_logic_vector(c0_serial_1_42(kk));
  END GENERATE;

  v2bx_unsigned_2 <= unsigned(v2bx_3);

  q2_unsigned_4 <= unsigned(q2_14);

  tmp_183 <= v2bx_unsigned_2 * q2_unsigned_4;

  tmp_184 <= unsigned(c0_serialOut_0_21(0));

  tmp_185 <= signed(resize(tmp_184, 30));

  tmp_186 <= signed(c0_serialOut_0_12(0));

  tmp_187 <= resize(tmp_186 & '0', 30);

  p195tmp_cast <= signed(resize(v2bx, 15));
  p195tmp_cast_1 <= resize(p195tmp_cast, 16);
  p195tmp_cast_2 <=  - (p195tmp_cast_1);
  tmp_188 <= p195tmp_cast_2(14 DOWNTO 0);

  p313tmp_cast <= signed(resize(v2bx, 15));
  p313tmp_cast_1 <= resize(p313tmp_cast, 16);
  p313tmp_cast_2 <=  - (p313tmp_cast_1);
  tmp_189 <= p313tmp_cast_2(14 DOWNTO 0);

  c0_serial_0_44(0) <= tmp_188;
  c0_serial_0_44(1) <= tmp_189;

  outputgen25: FOR kk IN 0 TO 1 GENERATE
    c0_serial_0_45(kk) <= std_logic_vector(c0_serial_0_44(kk));
  END GENERATE;

  delayMatch_62_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_28 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_28(0) <= q0_1;
        delayMatch_regrsvd_28(1 TO 3) <= delayMatch_regrsvd_28(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch_62_process;

  q0_7 <= delayMatch_regrsvd_28(3);

  delayMatch_63_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_29 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_29(0) <= q3_1;
        delayMatch_regrsvd_29(1 TO 3) <= delayMatch_regrsvd_29(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch_63_process;

  q3_14 <= delayMatch_regrsvd_29(3);

  c0_serial_1_44(0) <= q0_7;
  c0_serial_1_44(1) <= q3_14;

  outputgen24: FOR kk IN 0 TO 1 GENERATE
    c0_serial_1_45(kk) <= std_logic_vector(c0_serial_1_44(kk));
  END GENERATE;

  tmp_signed_7 <= signed(tmp_190);

  q0_unsigned_2 <= unsigned(q0_8);

  multiplier_cast_5 <= signed(resize(q0_unsigned_2, 15));
  multiplier_mul_temp_5 <= tmp_signed_7 * multiplier_cast_5;
  tmp_191 <= multiplier_mul_temp_5(28 DOWNTO 0);

  tmp_192 <= signed(c0_serialOut_0_22(0));

  tmp_193 <= resize(tmp_192, 30);

  tmp_194 <= signed(c0_serialOut_0_20(0));

  tmp_195 <= resize(tmp_194 & '0', 30);

  tmp_196 <= signed(c0_serialOut_0_22(1));

  tmp_197 <= resize(tmp_196, 30);

  tmp_198 <= signed(c0_serialOut_0_12(2));

  tmp_199 <= resize(tmp_198 & '0', 30);

  delayMatch_64_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_200 <= to_signed(2#000000000000000000000000000000#, 30);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_200 <= tmp_182;
      END IF;
    END IF;
  END PROCESS delayMatch_64_process;


  tmp_201 <= tmp_179 + tmp_200;

  delayMatch_65_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_202 <= to_signed(2#000000000000000000000000000000#, 30);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_202 <= tmp_187;
      END IF;
    END IF;
  END PROCESS delayMatch_65_process;


  tmp_203 <= tmp_185 + tmp_202;

  delayMatch_66_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_204 <= to_signed(2#000000000000000000000000000000#, 30);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_204 <= tmp_195;
      END IF;
    END IF;
  END PROCESS delayMatch_66_process;


  tmp_205 <= tmp_193 + tmp_204;

  delayMatch_67_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_206 <= to_signed(2#000000000000000000000000000000#, 30);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_206 <= tmp_199;
      END IF;
    END IF;
  END PROCESS delayMatch_67_process;


  tmp_207 <= tmp_197 + tmp_206;

  c0_serial_0_46(0) <= tmp_201;
  c0_serial_0_46(1) <= tmp_203;
  c0_serial_0_46(2) <= tmp_205;
  c0_serial_0_46(3) <= tmp_207;

  outputgen23: FOR kk IN 0 TO 3 GENERATE
    c0_serial_0_47(kk) <= std_logic_vector(c0_serial_0_46(kk));
  END GENERATE;

  c0_serial_0_48(0) <= v2bx;
  c0_serial_0_48(1) <= v2bx;
  c0_serial_0_48(2) <= v2bx;
  c0_serial_0_48(3) <= v2bx;

  outputgen22: FOR kk IN 0 TO 3 GENERATE
    c0_serial_0_49(kk) <= std_logic_vector(c0_serial_0_48(kk));
  END GENERATE;

  tmp_208 <= unsigned(c0_serialOut_0(1));

  q1q2 <= tmp_208(27 DOWNTO 14);

  tmp_209 <= unsigned(c0_serialOut_0_3(0));

  q0q3 <= tmp_209(27 DOWNTO 14);

  p191tmp_sub_cast <= signed(resize(q1q2, 16));
  p191tmp_sub_cast_1 <= signed(resize(q0q3, 16));
  tmp_210 <= p191tmp_sub_cast - p191tmp_sub_cast_1;

  delayMatch_68_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_30 <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_30(0) <= tmp_210;
        delayMatch_regrsvd_30(1 TO 2) <= delayMatch_regrsvd_30(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch_68_process;

  tmp_211 <= delayMatch_regrsvd_30(2);

  p231tmp_sub_cast <= signed(resize(q1q2, 16));
  p231tmp_sub_cast_1 <= signed(resize(q0q3, 16));
  tmp_212 <= p231tmp_sub_cast - p231tmp_sub_cast_1;

  delayMatch_69_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_31 <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_31(0) <= tmp_212;
        delayMatch_regrsvd_31(1 TO 2) <= delayMatch_regrsvd_31(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch_69_process;

  tmp_213 <= delayMatch_regrsvd_31(2);

  p271tmp_sub_cast <= signed(resize(q1q2, 16));
  p271tmp_sub_cast_1 <= signed(resize(q0q3, 16));
  tmp_214 <= p271tmp_sub_cast - p271tmp_sub_cast_1;

  delayMatch_70_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_32 <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_32(0) <= tmp_214;
        delayMatch_regrsvd_32(1 TO 2) <= delayMatch_regrsvd_32(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch_70_process;

  tmp_215 <= delayMatch_regrsvd_32(2);

  p309tmp_sub_cast <= signed(resize(q1q2, 16));
  p309tmp_sub_cast_1 <= signed(resize(q0q3, 16));
  tmp_216 <= p309tmp_sub_cast - p309tmp_sub_cast_1;

  delayMatch_71_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_33 <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_33(0) <= tmp_216;
        delayMatch_regrsvd_33(1 TO 2) <= delayMatch_regrsvd_33(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch_71_process;

  tmp_217 <= delayMatch_regrsvd_33(2);

  c0_serial_1_46(0) <= tmp_211;
  c0_serial_1_46(1) <= tmp_213;
  c0_serial_1_46(2) <= tmp_215;
  c0_serial_1_46(3) <= tmp_217;

  outputgen21: FOR kk IN 0 TO 3 GENERATE
    c0_serial_1_47(kk) <= std_logic_vector(c0_serial_1_46(kk));
  END GENERATE;

  v2bx_unsigned_3 <= unsigned(v2bx_4);

  tmp_signed_8 <= signed(tmp_218);

  multiplier_cast_6 <= signed(resize(v2bx_unsigned_3, 15));
  multiplier_mul_temp_6 <= multiplier_cast_6 * tmp_signed_8;
  tmp_219 <= multiplier_mul_temp_6(29 DOWNTO 0);

  tmp_220 <= signed(c0_serialOut_0_23(1));

  tmp_221 <= resize(tmp_220, 31);

  c0_serial_0_50(0) <= v2bz;
  c0_serial_0_50(1) <= v2bz;
  c0_serial_0_50(2) <= v2bz;
  c0_serial_0_50(3) <= v2bz;

  outputgen20: FOR kk IN 0 TO 3 GENERATE
    c0_serial_0_51(kk) <= std_logic_vector(c0_serial_0_50(kk));
  END GENERATE;

  tmp_222 <= resize(q0q1, 15);

  tmp_223 <= unsigned(c0_serialOut_0(3));

  q2q3 <= tmp_223(27 DOWNTO 14);

  tmp_224 <= resize(q2q3, 15);

  tmp_225 <= tmp_222 + tmp_224;

  delayMatch_72_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_34 <= (OTHERS => to_unsigned(2#000000000000000#, 15));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_34(0) <= tmp_225;
        delayMatch_regrsvd_34(1) <= delayMatch_regrsvd_34(0);
      END IF;
    END IF;
  END PROCESS delayMatch_72_process;

  tmp_226 <= delayMatch_regrsvd_34(1);

  tmp_227 <= resize(q0q1, 15);

  tmp_228 <= resize(q2q3, 15);

  tmp_229 <= tmp_227 + tmp_228;

  delayMatch_73_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_35 <= (OTHERS => to_unsigned(2#000000000000000#, 15));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_35(0) <= tmp_229;
        delayMatch_regrsvd_35(1) <= delayMatch_regrsvd_35(0);
      END IF;
    END IF;
  END PROCESS delayMatch_73_process;

  tmp_230 <= delayMatch_regrsvd_35(1);

  tmp_231 <= resize(q0q1, 15);

  tmp_232 <= resize(q2q3, 15);

  tmp_233 <= tmp_231 + tmp_232;

  delayMatch_74_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_36 <= (OTHERS => to_unsigned(2#000000000000000#, 15));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_36(0) <= tmp_233;
        delayMatch_regrsvd_36(1) <= delayMatch_regrsvd_36(0);
      END IF;
    END IF;
  END PROCESS delayMatch_74_process;

  tmp_234 <= delayMatch_regrsvd_36(1);

  tmp_235 <= resize(q0q1, 15);

  tmp_236 <= resize(q2q3, 15);

  tmp_237 <= tmp_235 + tmp_236;

  delayMatch_75_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_37 <= (OTHERS => to_unsigned(2#000000000000000#, 15));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_37(0) <= tmp_237;
        delayMatch_regrsvd_37(1) <= delayMatch_regrsvd_37(0);
      END IF;
    END IF;
  END PROCESS delayMatch_75_process;

  tmp_238 <= delayMatch_regrsvd_37(1);

  c0_serial_1_48(0) <= tmp_226;
  c0_serial_1_48(1) <= tmp_230;
  c0_serial_1_48(2) <= tmp_234;
  c0_serial_1_48(3) <= tmp_238;

  outputgen19: FOR kk IN 0 TO 3 GENERATE
    c0_serial_1_49(kk) <= std_logic_vector(c0_serial_1_48(kk));
  END GENERATE;

  v2bz_signed_3 <= signed(v2bz_4);

  tmp_unsigned_3 <= unsigned(tmp_239);

  multiplier_cast_7 <= signed(resize(tmp_unsigned_3, 16));
  multiplier_mul_temp_7 <= v2bz_signed_3 * multiplier_cast_7;
  tmp_240 <= multiplier_mul_temp_7(28 DOWNTO 0);

  tmp_241 <= signed(c0_serialOut_0_24(1));

  tmp_242 <= resize(tmp_241 & '0', 31);

  delayMatch_76_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_243 <= to_signed(2#0000000000000000000000000000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_243 <= tmp_242;
      END IF;
    END IF;
  END PROCESS delayMatch_76_process;


  tmp_244 <= tmp_221 + tmp_243;

  tmp_245 <= signed(c0_serialOut_0_23(2));

  tmp_246 <= resize(tmp_245, 31);

  tmp_247 <= signed(c0_serialOut_0_24(2));

  tmp_248 <= resize(tmp_247 & '0', 31);

  delayMatch_77_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_249 <= to_signed(2#0000000000000000000000000000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_249 <= tmp_248;
      END IF;
    END IF;
  END PROCESS delayMatch_77_process;


  tmp_250 <= tmp_246 + tmp_249;

  tmp_251 <= signed(c0_serialOut_0_23(0));

  tmp_252 <= resize(tmp_251, 31);

  tmp_253 <= signed(c0_serialOut_0_24(0));

  tmp_254 <= resize(tmp_253 & '0', 31);

  delayMatch_78_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_255 <= to_signed(2#0000000000000000000000000000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_255 <= tmp_254;
      END IF;
    END IF;
  END PROCESS delayMatch_78_process;


  tmp_256 <= tmp_252 + tmp_255;

  tmp_257 <= signed(c0_serialOut_0_23(3));

  tmp_258 <= resize(tmp_257, 31);

  tmp_259 <= signed(c0_serialOut_0_24(3));

  tmp_260 <= resize(tmp_259 & '0', 31);

  delayMatch_79_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_261 <= to_signed(2#0000000000000000000000000000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_261 <= tmp_260;
      END IF;
    END IF;
  END PROCESS delayMatch_79_process;


  tmp_262 <= tmp_258 + tmp_261;

  delayMatch_80_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_38 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_38(0) <= my_1;
        delayMatch_regrsvd_38(1 TO 4) <= delayMatch_regrsvd_38(0 TO 3);
      END IF;
    END IF;
  END PROCESS delayMatch_80_process;

  my_9 <= delayMatch_regrsvd_38(4);

  p225tmp_sub_cast <= resize(tmp_244, 32);
  p225tmp_sub_cast_1 <= signed(resize(my_9 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' 
    & '0', 32));
  tmp_263 <= p225tmp_sub_cast - p225tmp_sub_cast_1;

  delayMatch_81_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_39 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_39(0) <= my_1;
        delayMatch_regrsvd_39(1 TO 4) <= delayMatch_regrsvd_39(0 TO 3);
      END IF;
    END IF;
  END PROCESS delayMatch_81_process;

  my_10 <= delayMatch_regrsvd_39(4);

  p265tmp_sub_cast <= resize(tmp_250, 32);
  p265tmp_sub_cast_1 <= signed(resize(my_10 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' 
    & '0', 32));
  tmp_264 <= p265tmp_sub_cast - p265tmp_sub_cast_1;

  delayMatch_82_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_40 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_40(0) <= my_1;
        delayMatch_regrsvd_40(1 TO 4) <= delayMatch_regrsvd_40(0 TO 3);
      END IF;
    END IF;
  END PROCESS delayMatch_82_process;

  my_11 <= delayMatch_regrsvd_40(4);

  p185tmp_sub_cast <= resize(tmp_256, 32);
  p185tmp_sub_cast_1 <= signed(resize(my_11 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' 
    & '0', 32));
  tmp_265 <= p185tmp_sub_cast - p185tmp_sub_cast_1;

  delayMatch_83_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_41 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_41(0) <= my_1;
        delayMatch_regrsvd_41(1 TO 4) <= delayMatch_regrsvd_41(0 TO 3);
      END IF;
    END IF;
  END PROCESS delayMatch_83_process;

  my_12 <= delayMatch_regrsvd_41(4);

  p303tmp_sub_cast <= resize(tmp_262, 32);
  p303tmp_sub_cast_1 <= signed(resize(my_12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' 
    & '0', 32));
  tmp_266 <= p303tmp_sub_cast - p303tmp_sub_cast_1;

  c0_serial_1_50(0) <= tmp_263;
  c0_serial_1_50(1) <= tmp_264;
  c0_serial_1_50(2) <= tmp_265;
  c0_serial_1_50(3) <= tmp_266;

  outputgen18: FOR kk IN 0 TO 3 GENERATE
    c0_serial_1_51(kk) <= std_logic_vector(c0_serial_1_50(kk));
  END GENERATE;

  tmp_signed_9 <= signed(tmp_267);

  tmp_signed_10 <= signed(tmp_268);

  tmp_269 <= tmp_signed_9 * tmp_signed_10;

  c0_serial_0_52(0) <= unsigned(c0_serialOut_0_19(0));
  c0_serial_0_52(1) <= unsigned(c0_serialOut_0_21(1));

  outputgen17: FOR kk IN 0 TO 1 GENERATE
    c0_serial_0_53(kk) <= std_logic_vector(c0_serial_0_52(kk));
  END GENERATE;

  c0_serial_0_54(0) <= v2bx;
  c0_serial_0_54(1) <= v2bx;
  c0_serial_0_54(2) <= v2bx;
  c0_serial_0_54(3) <= v2bx;

  outputgen16: FOR kk IN 0 TO 3 GENERATE
    c0_serial_0_55(kk) <= std_logic_vector(c0_serial_0_54(kk));
  END GENERATE;

  tmp_270 <= resize(q0q2, 15);

  tmp_271 <= resize(q1q3, 15);

  tmp_272 <= tmp_270 + tmp_271;

  delayMatch_84_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_42 <= (OTHERS => to_unsigned(2#000000000000000#, 15));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_42(0) <= tmp_272;
        delayMatch_regrsvd_42(1 TO 2) <= delayMatch_regrsvd_42(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch_84_process;

  tmp_273 <= delayMatch_regrsvd_42(2);

  tmp_274 <= resize(q0q2, 15);

  tmp_275 <= resize(q1q3, 15);

  tmp_276 <= tmp_274 + tmp_275;

  delayMatch_85_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_43 <= (OTHERS => to_unsigned(2#000000000000000#, 15));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_43(0) <= tmp_276;
        delayMatch_regrsvd_43(1 TO 2) <= delayMatch_regrsvd_43(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch_85_process;

  tmp_277 <= delayMatch_regrsvd_43(2);

  tmp_278 <= resize(q0q2, 15);

  tmp_279 <= resize(q1q3, 15);

  tmp_280 <= tmp_278 + tmp_279;

  delayMatch_86_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_44 <= (OTHERS => to_unsigned(2#000000000000000#, 15));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_44(0) <= tmp_280;
        delayMatch_regrsvd_44(1 TO 2) <= delayMatch_regrsvd_44(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch_86_process;

  tmp_281 <= delayMatch_regrsvd_44(2);

  tmp_282 <= resize(q0q2, 15);

  tmp_283 <= resize(q1q3, 15);

  tmp_284 <= tmp_282 + tmp_283;

  delayMatch_87_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_45 <= (OTHERS => to_unsigned(2#000000000000000#, 15));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_45(0) <= tmp_284;
        delayMatch_regrsvd_45(1 TO 2) <= delayMatch_regrsvd_45(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch_87_process;

  tmp_285 <= delayMatch_regrsvd_45(2);

  c0_serial_1_52(0) <= tmp_273;
  c0_serial_1_52(1) <= tmp_277;
  c0_serial_1_52(2) <= tmp_281;
  c0_serial_1_52(3) <= tmp_285;

  outputgen15: FOR kk IN 0 TO 3 GENERATE
    c0_serial_1_53(kk) <= std_logic_vector(c0_serial_1_52(kk));
  END GENERATE;

  v2bx_unsigned_4 <= unsigned(v2bx_5);

  tmp_unsigned_4 <= unsigned(tmp_286);

  tmp_287 <= v2bx_unsigned_4 * tmp_unsigned_4;

  tmp_288 <= unsigned(c0_serialOut_0_26(0));

  tmp_289 <= signed(resize(tmp_288, 33));

  c0_serial_0_56(0) <= v2bz;
  c0_serial_0_56(1) <= v2bz;
  c0_serial_0_56(2) <= v2bz;
  c0_serial_0_56(3) <= v2bz;

  outputgen14: FOR kk IN 0 TO 3 GENERATE
    c0_serial_0_57(kk) <= std_logic_vector(c0_serial_0_56(kk));
  END GENERATE;

  delayMatch_88_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q1q1_1 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        q1q1_1 <= q1q1;
      END IF;
    END IF;
  END PROCESS delayMatch_88_process;


  p177tmp_sub_cast <= signed(resize(q1q1_1, 16));
  p177tmp_sub_temp <= 8192 - p177tmp_sub_cast;
  p177tmp_sub_cast_1 <= resize(p177tmp_sub_temp, 17);
  p177tmp_sub_cast_2 <= signed(resize(q2q2, 17));
  tmp_290 <= p177tmp_sub_cast_1 - p177tmp_sub_cast_2;

  delayMatch_89_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_291 <= to_signed(2#00000000000000000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_291 <= tmp_290;
      END IF;
    END IF;
  END PROCESS delayMatch_89_process;


  delayMatch_90_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q1q1_2 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        q1q1_2 <= q1q1;
      END IF;
    END IF;
  END PROCESS delayMatch_90_process;


  p217tmp_sub_cast <= signed(resize(q1q1_2, 16));
  p217tmp_sub_temp <= 8192 - p217tmp_sub_cast;
  p217tmp_sub_cast_1 <= resize(p217tmp_sub_temp, 17);
  p217tmp_sub_cast_2 <= signed(resize(q2q2, 17));
  tmp_292 <= p217tmp_sub_cast_1 - p217tmp_sub_cast_2;

  delayMatch_91_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_293 <= to_signed(2#00000000000000000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_293 <= tmp_292;
      END IF;
    END IF;
  END PROCESS delayMatch_91_process;


  delayMatch_92_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q1q1_3 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        q1q1_3 <= q1q1;
      END IF;
    END IF;
  END PROCESS delayMatch_92_process;


  p257tmp_sub_cast <= signed(resize(q1q1_3, 16));
  p257tmp_sub_temp <= 8192 - p257tmp_sub_cast;
  p257tmp_sub_cast_1 <= resize(p257tmp_sub_temp, 17);
  p257tmp_sub_cast_2 <= signed(resize(q2q2, 17));
  tmp_294 <= p257tmp_sub_cast_1 - p257tmp_sub_cast_2;

  delayMatch_93_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_295 <= to_signed(2#00000000000000000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_295 <= tmp_294;
      END IF;
    END IF;
  END PROCESS delayMatch_93_process;


  delayMatch_94_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q1q1_4 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        q1q1_4 <= q1q1;
      END IF;
    END IF;
  END PROCESS delayMatch_94_process;


  p295tmp_sub_cast <= signed(resize(q1q1_4, 16));
  p295tmp_sub_temp <= 8192 - p295tmp_sub_cast;
  p295tmp_sub_cast_1 <= resize(p295tmp_sub_temp, 17);
  p295tmp_sub_cast_2 <= signed(resize(q2q2, 17));
  tmp_296 <= p295tmp_sub_cast_1 - p295tmp_sub_cast_2;

  delayMatch_95_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_297 <= to_signed(2#00000000000000000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_297 <= tmp_296;
      END IF;
    END IF;
  END PROCESS delayMatch_95_process;


  c0_serial_1_54(0) <= tmp_291;
  c0_serial_1_54(1) <= tmp_293;
  c0_serial_1_54(2) <= tmp_295;
  c0_serial_1_54(3) <= tmp_297;

  outputgen13: FOR kk IN 0 TO 3 GENERATE
    c0_serial_1_55(kk) <= std_logic_vector(c0_serial_1_54(kk));
  END GENERATE;

  v2bz_signed_4 <= signed(v2bz_5);

  tmp_signed_11 <= signed(tmp_298);

  tmp_299 <= v2bz_signed_4 * tmp_signed_11;

  tmp_300 <= signed(c0_serialOut_0_27(0));

  tmp_301 <= resize(tmp_300 & '0', 33);

  delayMatch_96_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_302 <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_302 <= tmp_301;
      END IF;
    END IF;
  END PROCESS delayMatch_96_process;


  tmp_303 <= tmp_289 + tmp_302;

  tmp_304 <= unsigned(c0_serialOut_0_26(3));

  tmp_305 <= signed(resize(tmp_304, 33));

  tmp_306 <= signed(c0_serialOut_0_27(3));

  tmp_307 <= resize(tmp_306 & '0', 33);

  delayMatch_97_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_308 <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_308 <= tmp_307;
      END IF;
    END IF;
  END PROCESS delayMatch_97_process;


  tmp_309 <= tmp_305 + tmp_308;

  delayMatch_98_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_46 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_46(0) <= mz_1;
        delayMatch_regrsvd_46(1 TO 4) <= delayMatch_regrsvd_46(0 TO 3);
      END IF;
    END IF;
  END PROCESS delayMatch_98_process;

  mz_6 <= delayMatch_regrsvd_46(4);

  p175tmp_sub_cast <= resize(tmp_303, 34);
  p175tmp_sub_cast_1 <= signed(resize(mz_6 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' 
    & '0', 34));
  tmp_310 <= p175tmp_sub_cast - p175tmp_sub_cast_1;

  delayMatch_99_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_47 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_47(0) <= mz_1;
        delayMatch_regrsvd_47(1 TO 4) <= delayMatch_regrsvd_47(0 TO 3);
      END IF;
    END IF;
  END PROCESS delayMatch_99_process;

  mz_7 <= delayMatch_regrsvd_47(4);

  p293tmp_sub_cast <= resize(tmp_309, 34);
  p293tmp_sub_cast_1 <= signed(resize(mz_7 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' 
    & '0', 34));
  tmp_311 <= p293tmp_sub_cast - p293tmp_sub_cast_1;

  c0_serial_1_56(0) <= tmp_310;
  c0_serial_1_56(1) <= tmp_311;

  outputgen12: FOR kk IN 0 TO 1 GENERATE
    c0_serial_1_57(kk) <= std_logic_vector(c0_serial_1_56(kk));
  END GENERATE;

  tmp_unsigned_5 <= unsigned(tmp_312);

  tmp_signed_12 <= signed(tmp_313);

  multiplier_cast_8 <= signed(resize(tmp_unsigned_5, 29));
  multiplier_mul_temp_8 <= multiplier_cast_8 * tmp_signed_12;
  tmp_314 <= multiplier_mul_temp_8(61 DOWNTO 0);

  delayMatch_100_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_48 <= (OTHERS => to_signed(0, 35));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_48(0) <= tmp_35;
        delayMatch_regrsvd_48(1 TO 3) <= delayMatch_regrsvd_48(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch_100_process;

  tmp_315 <= delayMatch_regrsvd_48(3);

  tmp_316 <= signed(c0_serialOut_0_18(1));

  p314tmp_sub_cast <= resize(tmp_315 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' 
    & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 62);
  p314tmp_sub_cast_1 <= resize(tmp_316, 62);
  p314tmp_sub_temp <= p314tmp_sub_cast - p314tmp_sub_cast_1;
  tmp_317 <= resize(p314tmp_sub_temp & '0', 64);

  tmp_318 <= signed(c0_serialOut_0_25(3));

  tmp_319 <= resize(tmp_318, 64);

  tmp_320 <= tmp_317 + tmp_319;

  tmp_321 <= resize(tmp_320, 65);

  tmp_322 <= signed(c0_serialOut_0_28(1));

  tmp_323 <= resize(tmp_322, 65);

  tmp_324 <= tmp_321 + tmp_323;

  s0_1 <= tmp_324(57 DOWNTO 44);

  s0 <= std_logic_vector(s0_1);

  delayMatch_101_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      v2q1_2 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        v2q1_2 <= v2q1;
      END IF;
    END IF;
  END PROCESS delayMatch_101_process;


  --'Madgwick_correction_fixpt:18' v2q3 = fi(fi(2.0, 0, 2, 0, fm)*q3, 0, 14, 13, fm);
  p385v2q3_cast <= resize(q3_1 & '0', 16);
  v2q3 <= p385v2q3_cast(14 DOWNTO 1);

  delayMatch_102_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      v2q3_1 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        v2q3_1 <= v2q3;
      END IF;
    END IF;
  END PROCESS delayMatch_102_process;


  delayMatch_103_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      v2q2_2 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        v2q2_2 <= v2q2;
      END IF;
    END IF;
  END PROCESS delayMatch_103_process;


  c0_serial_0_58(0) <= v2q1_2;
  c0_serial_0_58(1) <= v2q3_1;
  c0_serial_0_58(2) <= v2q2_2;
  c0_serial_0_58(3) <= v2q3_1;

  outputgen11: FOR kk IN 0 TO 3 GENERATE
    c0_serial_0_59(kk) <= std_logic_vector(c0_serial_0_58(kk));
  END GENERATE;

  delayMatch_104_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ax_4 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        ax_4 <= ax_1;
      END IF;
    END IF;
  END PROCESS delayMatch_104_process;


  
--'Madgwick_correction_fixpt:42' s3 = fi(v2q1*(fi_signed(fi_signed(fi(2.0, 0, 2, 0, fm)*q1q3) - v2q0q2) - ax) + v2q2*(fi_signed(fi(2.0, 0, 2, 0, fm)*q0q1 + v2q2q3) - ay) + (fi_uminus(v4bx)*q3 + v2bz*q1)*(fi_signed(v2bx*(fi_signed(fi_signed(fi(0.5, 0, 14, 14, fm)) - q2q2) - q3q3) + v2bz*(fi_signed(q1q3) - q0q2)) - mx) + (fi_uminus(v2bx)*q0 + v2bz*q2)*(fi_signed(v2bx*(fi_signed(q1q2) - q0q3) + v2bz*(q0q1 + q2q3)) - my) + v2bx*q1*(fi_signed(v2bx*(q0q2 + q1q3) + v2bz*(fi_signed(fi_signed(fi(0.5, 0, 14, 14, fm)) - q1q1) - q2q2)) - mz), 1, 14, 7, fm);
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:49' nt = numerictype( a );
  --'Madgwick_correction_fixpt:50' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  --'Madgwick_correction_fixpt:51' y = fi( a, new_nt, fimath( a ) );
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:49' nt = numerictype( a );
  --'Madgwick_correction_fixpt:50' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  --'Madgwick_correction_fixpt:51' y = fi( a, new_nt, fimath( a ) );
  --'Madgwick_correction_fixpt:59' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:60' if isfi( a )
  --'Madgwick_correction_fixpt:61' nt = numerictype( a );
  --'Madgwick_correction_fixpt:62' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  --'Madgwick_correction_fixpt:63' y = -fi( a, new_nt, fimath( a ) );
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:49' nt = numerictype( a );
  --'Madgwick_correction_fixpt:50' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  --'Madgwick_correction_fixpt:51' y = fi( a, new_nt, fimath( a ) );
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  --'Madgwick_correction_fixpt:59' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:60' if isfi( a )
  --'Madgwick_correction_fixpt:61' nt = numerictype( a );
  --'Madgwick_correction_fixpt:62' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  --'Madgwick_correction_fixpt:63' y = -fi( a, new_nt, fimath( a ) );
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:49' nt = numerictype( a );
  --'Madgwick_correction_fixpt:50' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  --'Madgwick_correction_fixpt:51' y = fi( a, new_nt, fimath( a ) );
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  p213tmp_sub_cast <= resize(q1q3 & '0', 16);
  p213tmp_sub_cast_1 <= signed(resize(p213tmp_sub_cast, 18));
  p213tmp_sub_cast_2 <= signed(resize(v2q0q2 & '0', 18));
  p213tmp_sub_temp <= p213tmp_sub_cast_1 - p213tmp_sub_cast_2;
  p213tmp_sub_cast_3 <= resize(p213tmp_sub_temp, 19);
  p213tmp_sub_cast_4 <= signed(resize(ax_4, 19));
  tmp_325 <= p213tmp_sub_cast_3 - p213tmp_sub_cast_4;

  delayMatch_105_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ax_5 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        ax_5 <= ax_1;
      END IF;
    END IF;
  END PROCESS delayMatch_105_process;


  p211tmp_cast <= resize(q0q1 & '0', 16);
  tmp_326 <= resize(p211tmp_cast, 17);

  tmp_327 <= resize(v2q2q3 & '0', 17);

  tmp_328 <= tmp_326 + tmp_327;

  p250tmp_cast <= resize(q0q1 & '0', 16);
  tmp_329 <= resize(p250tmp_cast, 17);

  tmp_330 <= resize(v2q2q3 & '0', 17);

  tmp_331 <= tmp_329 + tmp_330;

  
--'Madgwick_correction_fixpt:40' s1 = fi(fi_signed(v2q3*(fi_signed(fi_signed(fi(2.0, 0, 2, 0, fm)*q1q3) - v2q0q2) - ax) + v2q0*(fi_signed(fi(2.0, 0, 2, 0, fm)*q0q1 + v2q2q3) - ay)) - fi(4.0, 0, 3, 0, fm)*q1*(fi_signed(fi_signed(fi_signed(fi(1, 0, 1, 0, fm)) - fi(2.0, 0, 2, 0, fm)*q1q1) - fi(2.0, 0, 2, 0, fm)*q2q2) - az) + v2bz*q3*(fi_signed(v2bx*(fi_signed(fi_signed(fi(0.5, 0, 14, 14, fm)) - q2q2) - q3q3) + v2bz*(fi_signed(q1q3) - q0q2)) - mx) + (v2bx*q2 + v2bz*q0)*(fi_signed(v2bx*(fi_signed(q1q2) - q0q3) + v2bz*(q0q1 + q2q3)) - my) + (fi_signed(v2bx*q3) - v4bz*q1)*(fi_signed(v2bx*(q0q2 + q1q3) + v2bz*(fi_signed(fi_signed(fi(0.5, 0, 14, 14, fm)) - q1q1) - q2q2)) - mz), 1, 14, 8, fm);
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:49' nt = numerictype( a );
  --'Madgwick_correction_fixpt:50' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  --'Madgwick_correction_fixpt:51' y = fi( a, new_nt, fimath( a ) );
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:49' nt = numerictype( a );
  --'Madgwick_correction_fixpt:50' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  --'Madgwick_correction_fixpt:51' y = fi( a, new_nt, fimath( a ) );
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:49' nt = numerictype( a );
  --'Madgwick_correction_fixpt:50' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  --'Madgwick_correction_fixpt:51' y = fi( a, new_nt, fimath( a ) );
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:49' nt = numerictype( a );
  --'Madgwick_correction_fixpt:50' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  --'Madgwick_correction_fixpt:51' y = fi( a, new_nt, fimath( a ) );
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:49' nt = numerictype( a );
  --'Madgwick_correction_fixpt:50' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
  --'Madgwick_correction_fixpt:51' y = fi( a, new_nt, fimath( a ) );
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  --'Madgwick_correction_fixpt:47' coder.inline( 'always' );
  --'Madgwick_correction_fixpt:48' if isfi( a ) && ~(issigned( a ))
  --'Madgwick_correction_fixpt:52' else
  --'Madgwick_correction_fixpt:53' y = a;
  p291tmp_sub_cast <= resize(q1q3 & '0', 16);
  p291tmp_sub_cast_1 <= signed(resize(p291tmp_sub_cast, 18));
  p291tmp_sub_cast_2 <= signed(resize(v2q0q2 & '0', 18));
  p291tmp_sub_temp <= p291tmp_sub_cast_1 - p291tmp_sub_cast_2;
  p291tmp_sub_cast_3 <= resize(p291tmp_sub_temp, 19);
  p291tmp_sub_cast_4 <= signed(resize(ax_5, 19));
  tmp_332 <= p291tmp_sub_cast_3 - p291tmp_sub_cast_4;

  delayMatch_106_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ay_4 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        ay_4 <= ay_1;
      END IF;
    END IF;
  END PROCESS delayMatch_106_process;


  p209tmp_sub_cast <= signed(resize(tmp_328, 19));
  p209tmp_sub_cast_1 <= signed(resize(ay_4, 19));
  tmp_333 <= p209tmp_sub_cast - p209tmp_sub_cast_1;

  delayMatch_107_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ay_5 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        ay_5 <= ay_1;
      END IF;
    END IF;
  END PROCESS delayMatch_107_process;


  p248tmp_sub_cast <= signed(resize(tmp_331, 19));
  p248tmp_sub_cast_1 <= signed(resize(ay_5, 19));
  tmp_334 <= p248tmp_sub_cast - p248tmp_sub_cast_1;

  c0_serial_1_58(0) <= tmp_325;
  c0_serial_1_58(1) <= tmp_332;
  c0_serial_1_58(2) <= tmp_333;
  c0_serial_1_58(3) <= tmp_334;

  outputgen10: FOR kk IN 0 TO 3 GENERATE
    c0_serial_1_59(kk) <= std_logic_vector(c0_serial_1_58(kk));
  END GENERATE;

  v2q1_unsigned <= unsigned(v2q1_3);

  tmp_signed_13 <= signed(tmp_335);

  multiplier_cast_9 <= signed(resize(v2q1_unsigned, 15));
  multiplier_mul_temp_9 <= multiplier_cast_9 * tmp_signed_13;
  tmp_336 <= multiplier_mul_temp_9(32 DOWNTO 0);

  tmp_337 <= signed(c0_serialOut_0_29(1));

  tmp_338 <= resize(tmp_337, 34);

  tmp_339 <= signed(c0_serialOut_0_4(0));

  tmp_340 <= resize(tmp_339, 34);

  tmp_341 <= tmp_338 + tmp_340;

  tmp_342 <= resize(q2_1 & '0' & '0', 17);

  delayMatch_108_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_49 <= (OTHERS => to_unsigned(2#00000000000000000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_49(0) <= tmp_342;
        delayMatch_regrsvd_49(1) <= delayMatch_regrsvd_49(0);
      END IF;
    END IF;
  END PROCESS delayMatch_108_process;

  tmp_343 <= delayMatch_regrsvd_49(1);

  tmp_344 <= resize(q1_1 & '0' & '0', 17);

  delayMatch_109_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_50 <= (OTHERS => to_unsigned(2#00000000000000000#, 17));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_50(0) <= tmp_344;
        delayMatch_regrsvd_50(1) <= delayMatch_regrsvd_50(0);
      END IF;
    END IF;
  END PROCESS delayMatch_109_process;

  tmp_345 <= delayMatch_regrsvd_50(1);

  c0_serial_0_60(0) <= tmp_343;
  c0_serial_0_60(1) <= tmp_345;

  outputgen9: FOR kk IN 0 TO 1 GENERATE
    c0_serial_0_61(kk) <= std_logic_vector(c0_serial_0_60(kk));
  END GENERATE;

  delayMatch_110_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q1q1_5 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        q1q1_5 <= q1q1;
      END IF;
    END IF;
  END PROCESS delayMatch_110_process;


  c_c_40_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      az_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      az_regout <= unsigned(az);
    END IF;
  END PROCESS c_c_40_process;

  c_c_41_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      az_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      az_regout_1 <= az_regout;
    END IF;
  END PROCESS c_c_41_process;

  c_c_42_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      az_regout_2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      az_regout_2 <= az_regout_1;
    END IF;
  END PROCESS c_c_42_process;

  c_c_43_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      az_regout_3 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      az_regout_3 <= az_regout_2;
    END IF;
  END PROCESS c_c_43_process;

  in_6_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      az_1 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        az_1 <= az_regout_3;
      END IF;
    END IF;
  END PROCESS in_6_pipe_process;


  delayMatch_111_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_51 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_51(0) <= az_1;
        delayMatch_regrsvd_51(1) <= delayMatch_regrsvd_51(0);
      END IF;
    END IF;
  END PROCESS delayMatch_111_process;

  az_2 <= delayMatch_regrsvd_51(1);

  p245tmp_sub_cast <= resize(q1q1_5 & '0', 16);
  p245tmp_sub_cast_1 <= signed(resize(p245tmp_sub_cast, 17));
  p245tmp_sub_temp <= 16384 - p245tmp_sub_cast_1;
  p245tmp_sub_cast_2 <= resize(p245tmp_sub_temp, 18);
  p245tmp_sub_cast_3 <= resize(q2q2 & '0', 16);
  p245tmp_sub_cast_4 <= signed(resize(p245tmp_sub_cast_3, 18));
  p245tmp_sub_temp_1 <= p245tmp_sub_cast_2 - p245tmp_sub_cast_4;
  p245tmp_sub_cast_5 <= resize(p245tmp_sub_temp_1, 19);
  p245tmp_sub_cast_6 <= signed(resize(az_2, 19));
  tmp_346 <= p245tmp_sub_cast_5 - p245tmp_sub_cast_6;

  delayMatch_112_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q1q1_6 <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        q1q1_6 <= q1q1;
      END IF;
    END IF;
  END PROCESS delayMatch_112_process;


  delayMatch_113_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_52 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_52(0) <= az_1;
        delayMatch_regrsvd_52(1) <= delayMatch_regrsvd_52(0);
      END IF;
    END IF;
  END PROCESS delayMatch_113_process;

  az_3 <= delayMatch_regrsvd_52(1);

  p284tmp_sub_cast <= resize(q1q1_6 & '0', 16);
  p284tmp_sub_cast_1 <= signed(resize(p284tmp_sub_cast, 17));
  p284tmp_sub_temp <= 16384 - p284tmp_sub_cast_1;
  p284tmp_sub_cast_2 <= resize(p284tmp_sub_temp, 18);
  p284tmp_sub_cast_3 <= resize(q2q2 & '0', 16);
  p284tmp_sub_cast_4 <= signed(resize(p284tmp_sub_cast_3, 18));
  p284tmp_sub_temp_1 <= p284tmp_sub_cast_2 - p284tmp_sub_cast_4;
  p284tmp_sub_cast_5 <= resize(p284tmp_sub_temp_1, 19);
  p284tmp_sub_cast_6 <= signed(resize(az_3, 19));
  tmp_347 <= p284tmp_sub_cast_5 - p284tmp_sub_cast_6;

  c0_serial_1_60(0) <= tmp_346;
  c0_serial_1_60(1) <= tmp_347;

  outputgen8: FOR kk IN 0 TO 1 GENERATE
    c0_serial_1_61(kk) <= std_logic_vector(c0_serial_1_60(kk));
  END GENERATE;

  tmp_unsigned_6 <= unsigned(tmp_348);

  tmp_signed_14 <= signed(tmp_349);

  multiplier_cast_10 <= signed(resize(tmp_unsigned_6, 18));
  multiplier_mul_temp_10 <= multiplier_cast_10 * tmp_signed_14;
  tmp_350 <= multiplier_mul_temp_10(35 DOWNTO 0);

  delayMatch_114_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_351 <= to_signed(0, 34);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_351 <= tmp_341;
      END IF;
    END IF;
  END PROCESS delayMatch_114_process;


  tmp_352 <= signed(c0_serialOut_0_30(1));

  p283tmp_sub_cast <= resize(tmp_351 & '0', 37);
  p283tmp_sub_cast_1 <= resize(tmp_352, 37);
  p283tmp_sub_temp <= p283tmp_sub_cast - p283tmp_sub_cast_1;
  tmp_353 <= resize(p283tmp_sub_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' 
    & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 62);

  tmp_354 <= unsigned(c0_serialOut_0_19(1));

  --'Madgwick_correction_fixpt:37' v4bz = fi(fi(2.0, 0, 2, 0, fm)*v2bz, 1, 14, 10, fm);
  p328v4bz_cast <= resize(v2bz & '0', 17);
  p328v4bz_cast_1 <= p328v4bz_cast(15 DOWNTO 0);
  v4bz <= p328v4bz_cast_1(14 DOWNTO 1);

  c0_serial_0_62(0) <= v4bz;
  c0_serial_0_62(1) <= v4bz;

  outputgen7: FOR kk IN 0 TO 1 GENERATE
    c0_serial_0_63(kk) <= std_logic_vector(c0_serial_0_62(kk));
  END GENERATE;

  delayMatch_115_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_53 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_53(0) <= q2_1;
        delayMatch_regrsvd_53(1 TO 2) <= delayMatch_regrsvd_53(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch_115_process;

  q2_15 <= delayMatch_regrsvd_53(2);

  delayMatch_116_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_54 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_54(0) <= q1_1;
        delayMatch_regrsvd_54(1 TO 2) <= delayMatch_regrsvd_54(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch_116_process;

  q1_9 <= delayMatch_regrsvd_54(2);

  c0_serial_1_62(0) <= q2_15;
  c0_serial_1_62(1) <= q1_9;

  outputgen6: FOR kk IN 0 TO 1 GENERATE
    c0_serial_1_63(kk) <= std_logic_vector(c0_serial_1_62(kk));
  END GENERATE;

  v4bz_signed <= signed(v4bz_1);

  q2_unsigned_5 <= unsigned(q2_16);

  multiplier_cast_11 <= signed(resize(q2_unsigned_5, 15));
  multiplier_mul_temp_11 <= v4bz_signed * multiplier_cast_11;
  tmp_355 <= multiplier_mul_temp_11(27 DOWNTO 0);

  tmp_356 <= signed(c0_serialOut_0_31(0));

  tmp_357 <= unsigned(c0_serialOut_0_19(3));

  tmp_358 <= signed(c0_serialOut_0_31(1));

  delayMatch_117_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_359 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_359 <= tmp_356;
      END IF;
    END IF;
  END PROCESS delayMatch_117_process;


  p222tmp_sub_cast <= signed(resize(tmp_354, 31));
  p222tmp_sub_cast_1 <= resize(tmp_359 & '0' & '0', 31);
  tmp_360 <= p222tmp_sub_cast - p222tmp_sub_cast_1;

  delayMatch_118_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_361 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_361 <= tmp_358;
      END IF;
    END IF;
  END PROCESS delayMatch_118_process;


  p262tmp_sub_cast <= signed(resize(tmp_357, 31));
  p262tmp_sub_cast_1 <= resize(tmp_361 & '0' & '0', 31);
  tmp_362 <= p262tmp_sub_cast - p262tmp_sub_cast_1;

  c0_serial_0_64(0) <= tmp_360;
  c0_serial_0_64(1) <= tmp_362;

  outputgen5: FOR kk IN 0 TO 1 GENERATE
    c0_serial_0_65(kk) <= std_logic_vector(c0_serial_0_64(kk));
  END GENERATE;

  tmp_363 <= unsigned(c0_serialOut_0_26(1));

  tmp_364 <= signed(resize(tmp_363, 33));

  tmp_365 <= signed(c0_serialOut_0_27(1));

  tmp_366 <= resize(tmp_365 & '0', 33);

  delayMatch_119_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_367 <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_367 <= tmp_366;
      END IF;
    END IF;
  END PROCESS delayMatch_119_process;


  tmp_368 <= tmp_364 + tmp_367;

  tmp_369 <= unsigned(c0_serialOut_0_26(2));

  tmp_370 <= signed(resize(tmp_369, 33));

  tmp_371 <= signed(c0_serialOut_0_27(2));

  tmp_372 <= resize(tmp_371 & '0', 33);

  delayMatch_120_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_373 <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_373 <= tmp_372;
      END IF;
    END IF;
  END PROCESS delayMatch_120_process;


  tmp_374 <= tmp_370 + tmp_373;

  delayMatch_121_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_55 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_55(0) <= mz_1;
        delayMatch_regrsvd_55(1 TO 4) <= delayMatch_regrsvd_55(0 TO 3);
      END IF;
    END IF;
  END PROCESS delayMatch_121_process;

  mz_8 <= delayMatch_regrsvd_55(4);

  p215tmp_sub_cast <= resize(tmp_368, 34);
  p215tmp_sub_cast_1 <= signed(resize(mz_8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' 
    & '0', 34));
  tmp_375 <= p215tmp_sub_cast - p215tmp_sub_cast_1;

  delayMatch_122_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_56 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_56(0) <= mz_1;
        delayMatch_regrsvd_56(1 TO 4) <= delayMatch_regrsvd_56(0 TO 3);
      END IF;
    END IF;
  END PROCESS delayMatch_122_process;

  mz_9 <= delayMatch_regrsvd_56(4);

  p255tmp_sub_cast <= resize(tmp_374, 34);
  p255tmp_sub_cast_1 <= signed(resize(mz_9 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' 
    & '0', 34));
  tmp_376 <= p255tmp_sub_cast - p255tmp_sub_cast_1;

  c0_serial_1_64(0) <= tmp_375;
  c0_serial_1_64(1) <= tmp_376;

  outputgen4: FOR kk IN 0 TO 1 GENERATE
    c0_serial_1_65(kk) <= std_logic_vector(c0_serial_1_64(kk));
  END GENERATE;

  tmp_signed_15 <= signed(tmp_377);

  tmp_signed_16 <= signed(tmp_378);

  tmp_379 <= tmp_signed_15 * tmp_signed_16;

  delayMatch_123_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_57 <= (OTHERS => to_signed(0, 62));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_57(0) <= tmp_353;
        delayMatch_regrsvd_57(1 TO 2) <= delayMatch_regrsvd_57(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch_123_process;

  tmp_380 <= delayMatch_regrsvd_57(2);

  tmp_381 <= signed(c0_serialOut_0_18(0));

  tmp_382 <= resize(tmp_381, 62);

  tmp_383 <= tmp_380 + tmp_382;

  tmp_384 <= resize(tmp_383 & '0', 64);

  tmp_385 <= signed(c0_serialOut_0_25(1));

  tmp_386 <= resize(tmp_385, 64);

  tmp_387 <= tmp_384 + tmp_386;

  tmp_388 <= resize(tmp_387, 66);

  tmp_389 <= signed(c0_serialOut_0_32(1));

  tmp_390 <= resize(tmp_389, 66);

  tmp_391 <= tmp_388 + tmp_390;

  s1_1 <= tmp_391(57 DOWNTO 44);

  s1 <= std_logic_vector(s1_1);

  tmp_392 <= signed(c0_serialOut_0_2(0));

  tmp_393 <= resize(tmp_392, 35);

  tmp_394 <= signed(c0_serialOut_0_29(3));

  tmp_395 <= resize(tmp_394, 35);

  tmp_396 <= tmp_393 + tmp_395;

  delayMatch_124_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_397 <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_397 <= tmp_396;
      END IF;
    END IF;
  END PROCESS delayMatch_124_process;


  tmp_398 <= signed(c0_serialOut_0_30(0));

  p244tmp_sub_cast <= resize(tmp_397 & '0', 37);
  p244tmp_sub_cast_1 <= resize(tmp_398, 37);
  p244tmp_sub_temp <= p244tmp_sub_cast - p244tmp_sub_cast_1;
  tmp_399 <= resize(p244tmp_sub_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' 
    & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);

  --'Madgwick_correction_fixpt:36' v4bx = fi(fi(2.0, 0, 2, 0, fm)*v2bx, 0, 14, 11, fm);
  p329v4bx_cast <= resize(v2bx & '0', 16);
  v4bx <= p329v4bx_cast(14 DOWNTO 1);

  p206tmp_cast <= signed(resize(v4bx, 15));
  p206tmp_cast_1 <= resize(p206tmp_cast, 16);
  p206tmp_cast_2 <=  - (p206tmp_cast_1);
  tmp_400 <= p206tmp_cast_2(14 DOWNTO 0);

  p243tmp_cast <= signed(resize(v4bx, 15));
  p243tmp_cast_1 <= resize(p243tmp_cast, 16);
  p243tmp_cast_2 <=  - (p243tmp_cast_1);
  tmp_401 <= p243tmp_cast_2(14 DOWNTO 0);

  c0_serial_0_66(0) <= tmp_400;
  c0_serial_0_66(1) <= tmp_401;

  outputgen3: FOR kk IN 0 TO 1 GENERATE
    c0_serial_0_67(kk) <= std_logic_vector(c0_serial_0_66(kk));
  END GENERATE;

  delayMatch_125_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_58 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_58(0) <= q3_1;
        delayMatch_regrsvd_58(1 TO 3) <= delayMatch_regrsvd_58(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch_125_process;

  q3_15 <= delayMatch_regrsvd_58(3);

  delayMatch_126_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_59 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_59(0) <= q2_1;
        delayMatch_regrsvd_59(1 TO 3) <= delayMatch_regrsvd_59(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch_126_process;

  q2_17 <= delayMatch_regrsvd_59(3);

  c0_serial_1_66(0) <= q3_15;
  c0_serial_1_66(1) <= q2_17;

  outputgen2: FOR kk IN 0 TO 1 GENERATE
    c0_serial_1_67(kk) <= std_logic_vector(c0_serial_1_66(kk));
  END GENERATE;

  tmp_signed_17 <= signed(tmp_402);

  q3_unsigned_5 <= unsigned(q3_16);

  multiplier_cast_12 <= signed(resize(q3_unsigned_5, 15));
  multiplier_mul_temp_12 <= tmp_signed_17 * multiplier_cast_12;
  tmp_403 <= multiplier_mul_temp_12(28 DOWNTO 0);

  tmp_404 <= signed(c0_serialOut_0_33(1));

  tmp_405 <= signed(c0_serialOut_0_20(3));

  tmp_406 <= signed(c0_serialOut_0_33(0));

  tmp_407 <= resize(tmp_406, 30);

  tmp_408 <= signed(c0_serialOut_0_20(1));

  tmp_409 <= resize(tmp_408, 30);

  delayMatch_127_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_410 <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_410 <= tmp_405;
      END IF;
    END IF;
  END PROCESS delayMatch_127_process;


  p242tmp_sub_cast <= resize(tmp_404, 30);
  p242tmp_sub_cast_1 <= resize(tmp_410, 30);
  tmp_411 <= p242tmp_sub_cast - p242tmp_sub_cast_1;

  delayMatch_128_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_412 <= to_signed(2#000000000000000000000000000000#, 30);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_412 <= tmp_409;
      END IF;
    END IF;
  END PROCESS delayMatch_128_process;


  tmp_413 <= tmp_407 + tmp_412;

  c0_serial_0_68(0) <= tmp_411;
  c0_serial_0_68(1) <= tmp_413;

  outputgen1: FOR kk IN 0 TO 1 GENERATE
    c0_serial_0_69(kk) <= std_logic_vector(c0_serial_0_68(kk));
  END GENERATE;

  tmp_414 <= signed(c0_serialOut_0_16(1));

  tmp_415 <= resize(tmp_414, 32);

  tmp_416 <= signed(c0_serialOut_0_17(1));

  tmp_417 <= resize(tmp_416 & '0', 32);

  delayMatch_129_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_418 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_418 <= tmp_417;
      END IF;
    END IF;
  END PROCESS delayMatch_129_process;


  tmp_419 <= tmp_415 + tmp_418;

  tmp_420 <= signed(c0_serialOut_0_16(0));

  tmp_421 <= resize(tmp_420, 32);

  tmp_422 <= signed(c0_serialOut_0_17(0));

  tmp_423 <= resize(tmp_422 & '0', 32);

  delayMatch_130_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_424 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        tmp_424 <= tmp_423;
      END IF;
    END IF;
  END PROCESS delayMatch_130_process;


  tmp_425 <= tmp_421 + tmp_424;

  delayMatch_131_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_60 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_60(0) <= mx_1;
        delayMatch_regrsvd_60(1 TO 4) <= delayMatch_regrsvd_60(0 TO 3);
      END IF;
    END IF;
  END PROCESS delayMatch_131_process;

  mx_8 <= delayMatch_regrsvd_60(4);

  p237tmp_sub_cast <= resize(tmp_419, 33);
  p237tmp_sub_cast_1 <= signed(resize(mx_8 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' 
    & '0', 33));
  tmp_426 <= p237tmp_sub_cast - p237tmp_sub_cast_1;

  delayMatch_132_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_61 <= (OTHERS => to_unsigned(2#00000000000000#, 14));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_61(0) <= mx_1;
        delayMatch_regrsvd_61(1 TO 4) <= delayMatch_regrsvd_61(0 TO 3);
      END IF;
    END IF;
  END PROCESS delayMatch_132_process;

  mx_9 <= delayMatch_regrsvd_61(4);

  p198tmp_sub_cast <= resize(tmp_425, 33);
  p198tmp_sub_cast_1 <= signed(resize(mx_9 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' 
    & '0', 33));
  tmp_427 <= p198tmp_sub_cast - p198tmp_sub_cast_1;

  c0_serial_1_68(0) <= tmp_426;
  c0_serial_1_68(1) <= tmp_427;

  outputgen: FOR kk IN 0 TO 1 GENERATE
    c0_serial_1_69(kk) <= std_logic_vector(c0_serial_1_68(kk));
  END GENERATE;

  tmp_signed_18 <= signed(tmp_428);

  tmp_signed_19 <= signed(tmp_429);

  tmp_430 <= tmp_signed_18 * tmp_signed_19;

  delayMatch_133_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_62 <= (OTHERS => to_signed(0, 64));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_62(0) <= tmp_399;
        delayMatch_regrsvd_62(1 TO 2) <= delayMatch_regrsvd_62(0 TO 1);
      END IF;
    END IF;
  END PROCESS delayMatch_133_process;

  tmp_431 <= delayMatch_regrsvd_62(2);

  tmp_432 <= signed(c0_serialOut_0_34(0));

  tmp_433 <= resize(tmp_432, 64);

  tmp_434 <= tmp_431 + tmp_433;

  tmp_435 <= resize(tmp_434 & '0', 66);

  tmp_436 <= signed(c0_serialOut_0_25(0));

  tmp_437 <= resize(tmp_436, 66);

  tmp_438 <= tmp_435 + tmp_437;

  tmp_439 <= resize(tmp_438, 67);

  tmp_440 <= signed(c0_serialOut_0_32(0));

  tmp_441 <= resize(tmp_440, 67);

  tmp_442 <= tmp_439 + tmp_441;

  s2_1 <= tmp_442(59 DOWNTO 46);

  s2 <= std_logic_vector(s2_1);

  tmp_443 <= signed(c0_serialOut_0_29(0));

  tmp_444 <= resize(tmp_443, 34);

  tmp_445 <= signed(c0_serialOut_0_29(2));

  tmp_446 <= resize(tmp_445, 34);

  tmp_447 <= tmp_444 + tmp_446;

  tmp_448 <= resize(tmp_447 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
    '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 64);

  delayMatch_134_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_regrsvd_63 <= (OTHERS => to_signed(0, 64));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        delayMatch_regrsvd_63(0) <= tmp_448;
        delayMatch_regrsvd_63(1 TO 3) <= delayMatch_regrsvd_63(0 TO 2);
      END IF;
    END IF;
  END PROCESS delayMatch_134_process;

  tmp_449 <= delayMatch_regrsvd_63(3);

  tmp_450 <= signed(c0_serialOut_0_34(1));

  tmp_451 <= resize(tmp_450, 64);

  tmp_452 <= tmp_449 + tmp_451;

  tmp_453 <= resize(tmp_452 & '0', 66);

  tmp_454 <= signed(c0_serialOut_0_25(2));

  tmp_455 <= resize(tmp_454, 66);

  tmp_456 <= tmp_453 + tmp_455;

  tmp_457 <= resize(tmp_456, 67);

  tmp_458 <= signed(c0_serialOut_0_28(0));

  tmp_459 <= resize(tmp_458, 67);

  tmp_460 <= tmp_457 + tmp_459;

  s3_1 <= tmp_460(58 DOWNTO 45);

  s3 <= std_logic_vector(s3_1);

  ceout <= enb_1_4_1;

END rtl;

