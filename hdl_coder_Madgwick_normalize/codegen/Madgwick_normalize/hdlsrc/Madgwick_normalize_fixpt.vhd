-- -------------------------------------------------------------
-- 

-- File Name: C:\Users\z68j959\Documents\GitHub\EELE466\hdl_coder_Madgwick_normalize\codegen\Madgwick_normalize\hdlsrc\Madgwick_normalize_fixpt.vhd
-- Created: 2015-03-31 12:35:49
-- 
-- Generated by MATLAB 8.3, MATLAB Coder 2.6 and HDL Coder 3.4
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 0.5
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ceout         1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ax                            ceout         1
-- ay                            ceout         1
-- az                            ceout         1
-- aw                            ceout         1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Madgwick_normalize_fixpt
-- Source Path: Madgwick_normalize_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Madgwick_normalize_fixpt_pac.ALL;

ENTITY Madgwick_normalize_fixpt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clkenable                         :   IN    std_logic;
        ax1                               :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En8
        ay1                               :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En9
        az1                               :   IN    std_logic_vector(13 DOWNTO 0);  -- sfix14_En9
        aw1                               :   IN    std_logic;  -- ufix1
        ceout                             :   OUT   std_logic;
        ax                                :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En8
        ay                                :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En9
        az                                :   OUT   std_logic_vector(13 DOWNTO 0);  -- sfix14_En9
        aw                                :   OUT   std_logic  -- ufix1
        );
END Madgwick_normalize_fixpt;


ARCHITECTURE rtl OF Madgwick_normalize_fixpt IS

  -- Component Declarations
  COMPONENT Madgwick_normalize_fixpt_enb
    PORT( clk_1                           :   IN    std_logic;
          reset_1                         :   IN    std_logic;
          clkenable_1                     :   IN    std_logic;
          clkenable_2                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Madgwick_normalize_fixpt_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clkenable                       :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_1_1                       :   OUT   std_logic;
          enb_1_2_0                       :   OUT   std_logic;
          enb_1_2_1                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT mux1_serializer
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          enb_1_1_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    vector_of_std_logic_vector14(0 TO 1);  -- sfix14_En9 [2]
          out0                            :   OUT   std_logic_vector(13 DOWNTO 0)  -- sfix14_En9
          );
  END COMPONENT;

  COMPONENT alpha0_deserializer
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(27 DOWNTO 0);  -- sfix28_En18
          out0                            :   OUT   vector_of_std_logic_vector28(0 TO 1)  -- sfix28_En18 [2]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Madgwick_normalize_fixpt_enb
    USE ENTITY work.Madgwick_normalize_fixpt_enb(rtl);

  FOR ALL : Madgwick_normalize_fixpt_tc
    USE ENTITY work.Madgwick_normalize_fixpt_tc(rtl);

  FOR ALL : mux1_serializer
    USE ENTITY work.mux1_serializer(rtl);

  FOR ALL : alpha0_deserializer
    USE ENTITY work.alpha0_deserializer(rtl);

  -- Signals
  SIGNAL enb_1_2_1                        : std_logic;
  SIGNAL enb_1_1_1                        : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_2_0                        : std_logic;
  SIGNAL ax_1_regout                      : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL ax_1_regout_1                    : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL clkenable_1                      : std_logic;
  SIGNAL clkenable_regout                 : std_logic;
  SIGNAL clkenable_regout_1               : std_logic;
  SIGNAL ax_1                             : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL ax_2                             : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL tmp                              : signed(27 DOWNTO 0);  -- sfix28_En16
  SIGNAL tmp_1                            : signed(30 DOWNTO 0);  -- sfix31_En18
  SIGNAL ay_1_regout                      : signed(13 DOWNTO 0);  -- sfix14_En9
  SIGNAL ay_1_regout_1                    : signed(13 DOWNTO 0);  -- sfix14_En9
  SIGNAL ay_1                             : signed(13 DOWNTO 0);  -- sfix14_En9
  SIGNAL ay_2                             : signed(13 DOWNTO 0);  -- sfix14_En9
  SIGNAL az_1_regout                      : signed(13 DOWNTO 0);  -- sfix14_En9
  SIGNAL az_1_regout_1                    : signed(13 DOWNTO 0);  -- sfix14_En9
  SIGNAL az_1                             : signed(13 DOWNTO 0);  -- sfix14_En9
  SIGNAL az_2                             : signed(13 DOWNTO 0);  -- sfix14_En9
  SIGNAL c0_serial_0                      : vector_of_signed14(0 TO 1);  -- sfix14_En9 [2]
  SIGNAL c0_serial_0_1                    : vector_of_std_logic_vector14(0 TO 1);  -- ufix14 [2]
  SIGNAL c0_serial_1                      : vector_of_signed14(0 TO 1);  -- sfix14_En9 [2]
  SIGNAL c0_serial_1_1                    : vector_of_std_logic_vector14(0 TO 1);  -- ufix14 [2]
  SIGNAL ay_3                             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL ay_signed                        : signed(13 DOWNTO 0);  -- sfix14_En9
  SIGNAL ay_4                             : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL ay_signed_1                      : signed(13 DOWNTO 0);  -- sfix14_En9
  SIGNAL tmp_2                            : signed(27 DOWNTO 0);  -- sfix28_En18
  SIGNAL c0_serialOut_0                   : vector_of_std_logic_vector28(0 TO 1);  -- ufix28 [2]
  SIGNAL tmp_3                            : signed(30 DOWNTO 0);  -- sfix31_En18
  SIGNAL tmp_4                            : signed(27 DOWNTO 0);  -- sfix28_En18
  SIGNAL tmp_5                            : signed(30 DOWNTO 0);  -- sfix31_En18
  SIGNAL tmp_6                            : signed(30 DOWNTO 0);  -- sfix31_En18
  SIGNAL tmp_7                            : signed(31 DOWNTO 0);  -- sfix32_En18
  SIGNAL tmp_8                            : signed(27 DOWNTO 0);  -- sfix28_En18
  SIGNAL tmp_9                            : signed(31 DOWNTO 0);  -- sfix32_En18
  SIGNAL tmp_10                           : signed(31 DOWNTO 0);  -- sfix32_En18
  SIGNAL tmp_11                           : signed(32 DOWNTO 0);  -- sfix33_En18
  SIGNAL aw_1_regout                      : std_logic;  -- ufix1
  SIGNAL aw_1_regout_1                    : std_logic;  -- ufix1
  SIGNAL aw_1                             : std_logic;  -- ufix1
  SIGNAL aw_2                             : std_logic;  -- ufix1
  SIGNAL multiplier_in0                   : std_logic;  -- ufix1
  SIGNAL tmp_12                           : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_13                           : signed(32 DOWNTO 0);  -- sfix33_En18
  SIGNAL tmp_14                           : signed(32 DOWNTO 0);  -- sfix33_En18
  SIGNAL tmp_15                           : signed(32 DOWNTO 0);  -- sfix33_En18
  SIGNAL dotproduct                       : unsigned(13 DOWNTO 0);  -- ufix14_En4
  SIGNAL tmp_16                           : std_logic;
  SIGNAL tmp_17                           : std_logic;
  SIGNAL y_y                              : unsigned(6 DOWNTO 0);  -- ufix7_En2
  SIGNAL y_y_1                            : unsigned(6 DOWNTO 0);  -- ufix7_En2
  SIGNAL y_y_2                            : unsigned(6 DOWNTO 0);  -- ufix7_En2
  SIGNAL tmp_18                           : unsigned(6 DOWNTO 0);  -- ufix7_En2
  SIGNAL ax_3                             : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL tmp_19                           : signed(13 DOWNTO 0);  -- sfix14_En8
  SIGNAL p17_cast                         : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL p17_cast_1                       : signed(14 DOWNTO 0);  -- sfix15_En14
  SIGNAL p17_mul_temp                     : signed(28 DOWNTO 0);  -- sfix29_En22
  SIGNAL p17_cast_2                       : signed(27 DOWNTO 0);  -- sfix28_En22
  SIGNAL tmp_20                           : std_logic;
  SIGNAL ay_5                             : signed(13 DOWNTO 0);  -- sfix14_En9
  SIGNAL tmp_21                           : signed(13 DOWNTO 0);  -- sfix14_En9
  SIGNAL p15_cast                         : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL p15_cast_1                       : signed(14 DOWNTO 0);  -- sfix15_En14
  SIGNAL p15_mul_temp                     : signed(28 DOWNTO 0);  -- sfix29_En23
  SIGNAL p15_cast_2                       : signed(27 DOWNTO 0);  -- sfix28_En23
  SIGNAL tmp_22                           : std_logic;
  SIGNAL az_3                             : signed(13 DOWNTO 0);  -- sfix14_En9
  SIGNAL tmp_23                           : signed(13 DOWNTO 0);  -- sfix14_En9
  SIGNAL p13_cast                         : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL p13_cast_1                       : signed(14 DOWNTO 0);  -- sfix15_En14
  SIGNAL p13_mul_temp                     : signed(28 DOWNTO 0);  -- sfix29_En23
  SIGNAL p13_cast_2                       : signed(27 DOWNTO 0);  -- sfix28_En23
  SIGNAL tmp_24                           : std_logic;
  SIGNAL aw_3                             : std_logic;  -- ufix1
  SIGNAL tmp_25                           : std_logic;  -- ufix1
  SIGNAL p11_cast                         : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL p11_1                            : unsigned(13 DOWNTO 0);  -- ufix14_En14
  SIGNAL p11_cast_1                       : unsigned(14 DOWNTO 0);  -- ufix15_En14
  SIGNAL aw_4                             : std_logic;  -- ufix1

BEGIN
  UMadgwick_normalize_fixpt_en : Madgwick_normalize_fixpt_enb
    PORT MAP( clk_1 => clk,
              reset_1 => reset,
              clkenable_1 => clkenable,
              clkenable_2 => clkenable_1
              );

  UMadgwick_normalize_fixpt_tc : Madgwick_normalize_fixpt_tc
    PORT MAP( clk => clk,
              reset => reset,
              clkenable => clkenable_regout_1,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              enb_1_2_0 => enb_1_2_0,
              enb_1_2_1 => enb_1_2_1
              );

  Umux1_serializer_1 : mux1_serializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2_1 => enb_1_2_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_0_1,  -- sfix14_En9 [2]
              out0 => ay_3  -- sfix14_En9
              );

  Umux1_serializer_2 : mux1_serializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2_1 => enb_1_2_1,
              enb_1_1_1 => enb_1_1_1,
              enb => enb,
              in0 => c0_serial_1_1,  -- sfix14_En9 [2]
              out0 => ay_4  -- sfix14_En9
              );

  Ualpha0_deserializer_1 : alpha0_deserializer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2_1 => enb_1_2_1,
              enb => enb,
              in0 => std_logic_vector(tmp_2),  -- sfix28_En18
              out0 => c0_serialOut_0  -- sfix28_En18 [2]
              );

  c_c_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ax_1_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      ax_1_regout <= signed(ax1);
    END IF;
  END PROCESS c_c_process;

  c_c_1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ax_1_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      ax_1_regout_1 <= ax_1_regout;
    END IF;
  END PROCESS c_c_1_process;

  c_c_2_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      clkenable_regout <= '0';
    ELSIF clk'event AND clk = '1' THEN
      clkenable_regout <= clkenable_1;
    END IF;
  END PROCESS c_c_2_process;

  c_c_3_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      clkenable_regout_1 <= '0';
    ELSIF clk'event AND clk = '1' THEN
      clkenable_regout_1 <= clkenable_regout;
    END IF;
  END PROCESS c_c_3_process;

  in_0_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ax_1 <= to_signed(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        ax_1 <= ax_1_regout_1;
      END IF;
    END IF;
  END PROCESS in_0_pipe_process;


  --'Madgwick_normalize_fixpt:12' ax = fi(ax_1, 1, 14, 8, fm);
  ax_2 <= ax_1;

  -- 'Madgwick_normalize_fixpt:16' dotproduct = fi(ax*ax + ay*ay + az*az + aw*aw, 0, 14, 4, fm);
  tmp <= ax_2 * ax_2;

  tmp_1 <= resize(tmp & '0' & '0', 31);

  c_c_4_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ay_1_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      ay_1_regout <= signed(ay1);
    END IF;
  END PROCESS c_c_4_process;

  c_c_5_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ay_1_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      ay_1_regout_1 <= ay_1_regout;
    END IF;
  END PROCESS c_c_5_process;

  in_1_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ay_1 <= to_signed(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        ay_1 <= ay_1_regout_1;
      END IF;
    END IF;
  END PROCESS in_1_pipe_process;


  --'Madgwick_normalize_fixpt:13' ay = fi(ay_1, 1, 14, 9, fm);
  ay_2 <= ay_1;

  c_c_6_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      az_1_regout <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      az_1_regout <= signed(az1);
    END IF;
  END PROCESS c_c_6_process;

  c_c_7_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      az_1_regout_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      az_1_regout_1 <= az_1_regout;
    END IF;
  END PROCESS c_c_7_process;

  in_2_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      az_1 <= to_signed(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        az_1 <= az_1_regout_1;
      END IF;
    END IF;
  END PROCESS in_2_pipe_process;


  --'Madgwick_normalize_fixpt:14' az = fi(az_1, 1, 14, 9, fm);
  az_2 <= az_1;

  c0_serial_0(0) <= ay_2;
  c0_serial_0(1) <= az_2;

  outputgen1: FOR kk IN 0 TO 1 GENERATE
    c0_serial_0_1(kk) <= std_logic_vector(c0_serial_0(kk));
  END GENERATE;

  c0_serial_1(0) <= ay_2;
  c0_serial_1(1) <= az_2;

  outputgen: FOR kk IN 0 TO 1 GENERATE
    c0_serial_1_1(kk) <= std_logic_vector(c0_serial_1(kk));
  END GENERATE;

  ay_signed <= signed(ay_3);

  ay_signed_1 <= signed(ay_4);

  tmp_2 <= ay_signed * ay_signed_1;

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_3 <= to_signed(2#0000000000000000000000000000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        tmp_3 <= tmp_1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  tmp_4 <= signed(c0_serialOut_0(0));

  tmp_5 <= resize(tmp_4, 31);

  tmp_6 <= tmp_3 + tmp_5;

  tmp_7 <= resize(tmp_6, 32);

  tmp_8 <= signed(c0_serialOut_0(1));

  tmp_9 <= resize(tmp_8, 32);

  tmp_10 <= tmp_7 + tmp_9;

  tmp_11 <= resize(tmp_10, 33);

  c_c_8_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      aw_1_regout <= '0';
    ELSIF clk'event AND clk = '1' THEN
      aw_1_regout <= aw1;
    END IF;
  END PROCESS c_c_8_process;

  c_c_9_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      aw_1_regout_1 <= '0';
    ELSIF clk'event AND clk = '1' THEN
      aw_1_regout_1 <= aw_1_regout;
    END IF;
  END PROCESS c_c_9_process;

  in_3_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      aw_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        aw_1 <= aw_1_regout_1;
      END IF;
    END IF;
  END PROCESS in_3_pipe_process;


  
--'Madgwick_normalize_fixpt:18' recipNorm = fi(fi_div(fi(1, 0, 1, 0, fm), sqrt( dotproduct )), 0, 14, 14, fm);
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  --                                                                          %
  --       Generated by MATLAB 8.3, MATLAB Coder 2.6 and HDL Coder 3.4        %
  --                                                                          %
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  
--'Madgwick_normalize_fixpt:9' fm = fimath('RoundingMethod', 'Floor', 'OverflowAction', 'Wrap', 'ProductMode', 'FullPrecision', 'MaxProductWordLength', 128, 'SumMode', 'FullPrecision', 'MaxSumWordLength', 128);
  --'Madgwick_normalize_fixpt:11' aw = fi(aw_1, 0, 1, 0, fm);
  aw_2 <= aw_1;

  
  multiplier_in0 <= aw_2 WHEN aw_2 = '1' ELSE
      '0';
  tmp_12 <= '0' & multiplier_in0;

  tmp_13 <= signed(resize(tmp_12 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
    '0' & '0' & '0' & '0' & '0' & '0', 33));

  delayMatch_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_14 <= to_signed(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        tmp_14 <= tmp_13;
      END IF;
    END IF;
  END PROCESS delayMatch_1_process;


  tmp_15 <= tmp_11 + tmp_14;

  dotproduct <= unsigned(tmp_15(27 DOWNTO 14));

  --'Madgwick_normalize_fixpt:17' if dotproduct~=fi(0, 0, 1, 0, fm)
  
  tmp_16 <= '1' WHEN dotproduct /= 0 ELSE
      '0';

  
  tmp_17 <= '1' WHEN dotproduct <= 0 ELSE
      '0';

  --HDL code generation from MATLAB function: Madgwick_normalize_fixpt
  --'Madgwick_normalize_fixpt:22' aw = fi(aw*recipNorm, 0, 1, 0, fm);
  --'Madgwick_normalize_fixpt:21' az = fi(az*recipNorm, 1, 14, 9, fm);
  --'Madgwick_normalize_fixpt:20' ay = fi(ay*recipNorm, 1, 14, 9, fm);
  --'Madgwick_normalize_fixpt:19' ax = fi(ax*recipNorm, 1, 14, 8, fm);
  --'Madgwick_normalize_fixpt:33' c = fi( c1, numerictype( c1 ), fimath( a ) );
  --'Madgwick_normalize_fixpt:32' c1 = divide( divideType( a1, b1 ), a1, b1 );
  --'Madgwick_normalize_fixpt:31' b1 = fi( b, 'RoundMode', 'fix' );
  --'Madgwick_normalize_fixpt:30' a1 = fi( a, 'RoundMode', 'fix' );
  --'Madgwick_normalize_fixpt:29' if isfi( a ) && isfi( b )
  --'Madgwick_normalize_fixpt:28' coder.inline( 'always' );
  y_y <= to_unsigned(2#0000000#, 7);

  delayMatch_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y_y_1 <= to_unsigned(2#0000000#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        y_y_1 <= y_y;
      END IF;
    END IF;
  END PROCESS delayMatch_2_process;


  delayMatch_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      y_y_2 <= to_unsigned(2#0000000#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        y_y_2 <= y_y_1;
      END IF;
    END IF;
  END PROCESS delayMatch_3_process;


  p20_output : PROCESS (tmp_17, y_y_2, dotproduct)
    VARIABLE yy : unsigned(6 DOWNTO 0);
    VARIABLE ytemp : unsigned(6 DOWNTO 0);
    VARIABLE y_0 : unsigned(6 DOWNTO 0);
    VARIABLE y_1 : unsigned(6 DOWNTO 0);
    VARIABLE cast : vector_of_unsigned8(0 TO 6);
    VARIABLE sll_temp : vector_of_unsigned7(0 TO 6);
    VARIABLE mul_temp : vector_of_unsigned14(0 TO 6);
  BEGIN
    IF tmp_17 = '1' THEN 
      y_1 := to_unsigned(2#0000000#, 7);
    ELSE 
      yy := y_y_2;

      FOR ii IN 6 DOWNTO 0 LOOP
        cast(ii) := unsigned(to_signed(ii, 32)(7 DOWNTO 0));
        sll_temp(ii) := to_unsigned(2#0000001#, 7) sll to_integer(cast(ii));
        ytemp := yy OR sll_temp(ii);
        mul_temp(ii) := ytemp * ytemp;
        IF mul_temp(ii) <= dotproduct THEN 
          y_0 := ytemp;
        ELSE 
          y_0 := yy;
        END IF;
        yy := y_0;
      END LOOP;

      y_1 := yy;
    END IF;
    tmp_18 <= y_1;
  END PROCESS p20_output;


  delayMatch_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ax_3 <= to_signed(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        ax_3 <= ax_2;
      END IF;
    END IF;
  END PROCESS delayMatch_4_process;


  p17_cast <= to_unsigned(2#00000000000000#, 14);
  p17_cast_1 <= signed(resize(p17_cast, 15));
  p17_mul_temp <= ax_3 * p17_cast_1;
  p17_cast_2 <= p17_mul_temp(27 DOWNTO 0);
  
  tmp_19 <= p17_cast_2(27 DOWNTO 14) WHEN tmp_16 = '1' ELSE
      ax_3;

  ax <= std_logic_vector(tmp_19);

  
  tmp_20 <= '1' WHEN dotproduct /= 0 ELSE
      '0';

  delayMatch_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ay_5 <= to_signed(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        ay_5 <= ay_2;
      END IF;
    END IF;
  END PROCESS delayMatch_5_process;


  p15_cast <= to_unsigned(2#00000000000000#, 14);
  p15_cast_1 <= signed(resize(p15_cast, 15));
  p15_mul_temp <= ay_5 * p15_cast_1;
  p15_cast_2 <= p15_mul_temp(27 DOWNTO 0);
  
  tmp_21 <= p15_cast_2(27 DOWNTO 14) WHEN tmp_20 = '1' ELSE
      ay_5;

  ay <= std_logic_vector(tmp_21);

  
  tmp_22 <= '1' WHEN dotproduct /= 0 ELSE
      '0';

  delayMatch_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      az_3 <= to_signed(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        az_3 <= az_2;
      END IF;
    END IF;
  END PROCESS delayMatch_6_process;


  p13_cast <= to_unsigned(2#00000000000000#, 14);
  p13_cast_1 <= signed(resize(p13_cast, 15));
  p13_mul_temp <= az_3 * p13_cast_1;
  p13_cast_2 <= p13_mul_temp(27 DOWNTO 0);
  
  tmp_23 <= p13_cast_2(27 DOWNTO 14) WHEN tmp_22 = '1' ELSE
      az_3;

  az <= std_logic_vector(tmp_23);

  
  tmp_24 <= '1' WHEN dotproduct /= 0 ELSE
      '0';

  delayMatch_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      aw_3 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        aw_3 <= aw_2;
      END IF;
    END IF;
  END PROCESS delayMatch_7_process;


  p11_cast <= to_unsigned(2#00000000000000#, 14);
  
  p11_1 <= p11_cast WHEN aw_3 = '1' ELSE
      to_unsigned(2#00000000000000#, 14);
  p11_cast_1 <= resize(p11_1, 15);
  
  tmp_25 <= p11_cast_1(14) WHEN tmp_24 = '1' ELSE
      aw_3;

  aw_4 <= tmp_25;

  aw <= aw_4;

  ceout <= enb_1_2_1;

END rtl;

