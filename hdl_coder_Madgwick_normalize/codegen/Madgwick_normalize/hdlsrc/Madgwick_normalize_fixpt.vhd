-- -------------------------------------------------------------
-- 

-- File Name: C:\Users\w92p177\Documents\GitHub\EELE466\hdl_coder_Madgwick_normalize\codegen\Madgwick_normalize\hdlsrc\Madgwick_normalize_fixpt.vhd
-- Created: 2015-04-10 14:52:48
-- 
-- Generated by MATLAB 8.3, MATLAB Coder 2.6 and HDL Coder 3.4
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ceout         1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ax                            ceout         1
-- ay                            ceout         1
-- az                            ceout         1
-- aw                            ceout         1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Madgwick_normalize_fixpt
-- Source Path: Madgwick_normalize_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Madgwick_normalize_fixpt_pac.ALL;

ENTITY Madgwick_normalize_fixpt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clkenable                         :   IN    std_logic;
        ax1                               :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        ay1                               :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        az1                               :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        aw1                               :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        ceout                             :   OUT   std_logic;
        ax                                :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        ay                                :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        az                                :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        aw                                :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En12
        );
END Madgwick_normalize_fixpt;


ARCHITECTURE rtl OF Madgwick_normalize_fixpt IS

  -- Constants
  CONSTANT One                            : signed(2 DOWNTO 0) := to_signed(2#010#, 3);  -- sfix3
  CONSTANT C_divbyzero_p                  : signed(2 DOWNTO 0) := to_signed(2#011#, 3);  -- sfix3

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL ax1_signed                       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL ax_1                             : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL ay1_signed                       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL ay_1                             : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL az1_signed                       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL az_1                             : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL aw1_signed                       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL aw_1                             : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL ax_tmp                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL ay_tmp                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL az_tmp                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL aw_tmp                           : signed(23 DOWNTO 0);  -- sfix24_En12

BEGIN
  ax1_signed <= signed(ax1);

  enb <= clkenable;

  in_0_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ax_1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        ax_1 <= ax1_signed;
      END IF;
    END IF;
  END PROCESS in_0_pipe_process;


  ay1_signed <= signed(ay1);

  in_1_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ay_1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        ay_1 <= ay1_signed;
      END IF;
    END IF;
  END PROCESS in_1_pipe_process;


  az1_signed <= signed(az1);

  in_2_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      az_1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        az_1 <= az1_signed;
      END IF;
    END IF;
  END PROCESS in_2_pipe_process;


  aw1_signed <= signed(aw1);

  in_3_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      aw_1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        aw_1 <= aw1_signed;
      END IF;
    END IF;
  END PROCESS in_3_pipe_process;


  Madgwick_normalize_fixpt_1_output : PROCESS (ax_1, ay_1, az_1, aw_1)
    VARIABLE dotproduct : signed(23 DOWNTO 0);
    VARIABLE ytemp : signed(11 DOWNTO 0);
    VARIABLE yy : signed(11 DOWNTO 0);
    VARIABLE div_temp : signed(2 DOWNTO 0);
    VARIABLE div_temp_0 : signed(2 DOWNTO 0);
    VARIABLE div_temp_1 : signed(2 DOWNTO 0);
    VARIABLE div_temp_2 : signed(2 DOWNTO 0);
    VARIABLE mul_temp : signed(47 DOWNTO 0);
    VARIABLE add_cast : signed(48 DOWNTO 0);
    VARIABLE mul_temp_0 : signed(47 DOWNTO 0);
    VARIABLE add_cast_0 : signed(48 DOWNTO 0);
    VARIABLE add_temp : signed(48 DOWNTO 0);
    VARIABLE add_cast_1 : signed(49 DOWNTO 0);
    VARIABLE mul_temp_1 : signed(47 DOWNTO 0);
    VARIABLE add_cast_2 : signed(49 DOWNTO 0);
    VARIABLE add_temp_0 : signed(49 DOWNTO 0);
    VARIABLE add_cast_3 : signed(50 DOWNTO 0);
    VARIABLE mul_temp_2 : signed(47 DOWNTO 0);
    VARIABLE add_cast_4 : signed(50 DOWNTO 0);
    VARIABLE add_temp_1 : signed(50 DOWNTO 0);
    VARIABLE cast : vector_of_unsigned8(0 TO 10);
    VARIABLE sll_temp : vector_of_signed12(0 TO 10);
    VARIABLE mul_temp_3 : vector_of_signed24(0 TO 10);
    VARIABLE cast_0 : signed(12 DOWNTO 0);
    VARIABLE cast_1 : signed(23 DOWNTO 0);
    VARIABLE mul_temp_4 : signed(47 DOWNTO 0);
    VARIABLE cast_2 : signed(12 DOWNTO 0);
    VARIABLE cast_3 : signed(23 DOWNTO 0);
    VARIABLE mul_temp_5 : signed(47 DOWNTO 0);
    VARIABLE cast_4 : signed(12 DOWNTO 0);
    VARIABLE cast_5 : signed(23 DOWNTO 0);
    VARIABLE mul_temp_6 : signed(47 DOWNTO 0);
    VARIABLE cast_6 : signed(12 DOWNTO 0);
    VARIABLE cast_7 : signed(23 DOWNTO 0);
    VARIABLE mul_temp_7 : signed(47 DOWNTO 0);
  BEGIN
    --HDL code generation from MATLAB function: Madgwick_normalize_fixpt
    --'Madgwick_normalize_fixpt:22' aw = fi(aw*recipNorm, 1, 24, 12, fm);
    --'Madgwick_normalize_fixpt:21' az = fi(az*recipNorm, 1, 24, 12, fm);
    --'Madgwick_normalize_fixpt:20' ay = fi(ay*recipNorm, 1, 24, 12, fm);
    --'Madgwick_normalize_fixpt:19' ax = fi(ax*recipNorm, 1, 24, 12, fm);
    --'Madgwick_normalize_fixpt:33' c = fi( c1, numerictype( c1 ), fimath( a ) );
    --'Madgwick_normalize_fixpt:32' c1 = divide( divideType( a1, b1 ), a1, b1 );
    --'Madgwick_normalize_fixpt:31' b1 = fi( b, 'RoundMode', 'fix' );
    --'Madgwick_normalize_fixpt:30' a1 = fi( a, 'RoundMode', 'fix' );
    --'Madgwick_normalize_fixpt:29' if isfi( a ) && isfi( b )
    --'Madgwick_normalize_fixpt:28' coder.inline( 'always' );
    
--'Madgwick_normalize_fixpt:18' recipNorm = fi(fi_div(fi(1, 0, 1, 0, fm), sqrt( dotproduct )), 1, 24, 12, fm);
    --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    --                                                                          %
    --       Generated by MATLAB 8.3, MATLAB Coder 2.6 and HDL Coder 3.4        %
    --                                                                          %
    --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
--'Madgwick_normalize_fixpt:9' fm = fimath('RoundingMethod', 'Floor', 'OverflowAction', 'Wrap', 'ProductMode', 'FullPrecision', 'MaxProductWordLength', 128, 'SumMode', 'FullPrecision', 'MaxSumWordLength', 128);
    --'Madgwick_normalize_fixpt:11' aw = fi(aw_1, 1, 24, 12, fm);
    --'Madgwick_normalize_fixpt:12' ax = fi(ax_1, 1, 24, 12, fm);
    --'Madgwick_normalize_fixpt:13' ay = fi(ay_1, 1, 24, 12, fm);
    --'Madgwick_normalize_fixpt:14' az = fi(az_1, 1, 24, 12, fm);
    --'Madgwick_normalize_fixpt:16' dotproduct = fi(ax*ax + ay*ay + az*az + aw*aw, 1, 24, 12, fm);
    mul_temp := ax_1 * ax_1;
    add_cast := resize(mul_temp, 49);
    mul_temp_0 := ay_1 * ay_1;
    add_cast_0 := resize(mul_temp_0, 49);
    add_temp := add_cast + add_cast_0;
    add_cast_1 := resize(add_temp, 50);
    mul_temp_1 := az_1 * az_1;
    add_cast_2 := resize(mul_temp_1, 50);
    add_temp_0 := add_cast_1 + add_cast_2;
    add_cast_3 := resize(add_temp_0, 51);
    mul_temp_2 := aw_1 * aw_1;
    add_cast_4 := resize(mul_temp_2, 51);
    add_temp_1 := add_cast_3 + add_cast_4;
    dotproduct := add_temp_1(35 DOWNTO 12);
    IF dotproduct <= 0 THEN 
      yy := to_signed(2#000000000000#, 12);
    ELSE 
      yy := to_signed(2#000000000000#, 12);

      FOR ii IN 10 DOWNTO 0 LOOP
        cast(ii) := unsigned(to_signed(ii, 32)(7 DOWNTO 0));
        sll_temp(ii) := to_signed(2#000000000001#, 12) sll to_integer(cast(ii));
        ytemp := yy OR sll_temp(ii);
        mul_temp_3(ii) := ytemp * ytemp;
        IF mul_temp_3(ii) <= dotproduct THEN 
          yy := ytemp;
        END IF;
      END LOOP;

    END IF;
    --'Madgwick_normalize_fixpt:17' if dotproduct~=fi(0, 0, 1, 0, fm)
    IF dotproduct /= 0 THEN 
      IF yy = 0 THEN 
        div_temp := C_divbyzero_p;
      ELSE 
        div_temp := One / yy;
      END IF;
      cast_0 := resize(div_temp, 13);
      cast_1 := cast_0(6 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
        '0' & '0' & '0' & '0' & '0';
      mul_temp_4 := ax_1 * cast_1;
      ax_tmp <= mul_temp_4(35 DOWNTO 12);
    ELSE 
      ax_tmp <= ax_1;
    END IF;
    IF dotproduct /= 0 THEN 
      IF yy = 0 THEN 
        div_temp_0 := C_divbyzero_p;
      ELSE 
        div_temp_0 := One / yy;
      END IF;
      cast_2 := resize(div_temp_0, 13);
      cast_3 := cast_2(6 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
        '0' & '0' & '0' & '0' & '0';
      mul_temp_5 := ay_1 * cast_3;
      ay_tmp <= mul_temp_5(35 DOWNTO 12);
    ELSE 
      ay_tmp <= ay_1;
    END IF;
    IF dotproduct /= 0 THEN 
      IF yy = 0 THEN 
        div_temp_1 := C_divbyzero_p;
      ELSE 
        div_temp_1 := One / yy;
      END IF;
      cast_4 := resize(div_temp_1, 13);
      cast_5 := cast_4(6 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
        '0' & '0' & '0' & '0' & '0';
      mul_temp_6 := az_1 * cast_5;
      az_tmp <= mul_temp_6(35 DOWNTO 12);
    ELSE 
      az_tmp <= az_1;
    END IF;
    IF dotproduct /= 0 THEN 
      IF yy = 0 THEN 
        div_temp_2 := C_divbyzero_p;
      ELSE 
        div_temp_2 := One / yy;
      END IF;
      cast_6 := resize(div_temp_2, 13);
      cast_7 := cast_6(6 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & 
        '0' & '0' & '0' & '0' & '0';
      mul_temp_7 := aw_1 * cast_7;
      aw_tmp <= mul_temp_7(35 DOWNTO 12);
    ELSE 
      aw_tmp <= aw_1;
    END IF;
  END PROCESS Madgwick_normalize_fixpt_1_output;


  ax <= std_logic_vector(ax_tmp);

  ay <= std_logic_vector(ay_tmp);

  az <= std_logic_vector(az_tmp);

  aw <= std_logic_vector(aw_tmp);

  ceout <= clkenable;

END rtl;

