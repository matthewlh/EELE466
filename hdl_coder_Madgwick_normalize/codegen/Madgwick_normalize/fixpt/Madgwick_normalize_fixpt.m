%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                          %
%       Generated by MATLAB 8.3, MATLAB Coder 2.6 and HDL Coder 3.4        %
%                                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#codegen
function [ax,ay,az,aw] = Madgwick_normalize_fixpt(ax_1,ay_1,az_1,aw_1)

fm = fimath('RoundingMethod', 'Floor', 'OverflowAction', 'Wrap', 'ProductMode', 'FullPrecision', 'MaxProductWordLength', 128, 'SumMode', 'FullPrecision', 'MaxSumWordLength', 128);

aw = fi(aw_1, 1, 24, 12, fm);
ax = fi(ax_1, 1, 24, 12, fm);
ay = fi(ay_1, 1, 24, 12, fm);
az = fi(az_1, 1, 24, 12, fm);

dotproduct = fi(ax*ax + ay*ay + az*az + aw*aw, 0, 32, 16, fm);
if dotproduct~=fi(0, 0, 1, 0, fm)
    rsr_result = fi(f13_RSR( dotproduct ), 0, 32, 16, fm);
    ax = fi(ax*rsr_result, 1, 24, 12, fm);
    ay = fi(ay*rsr_result, 1, 24, 12, fm);
    az = fi(az*rsr_result, 1, 24, 12, fm);
    aw = fi(aw*rsr_result, 1, 24, 12, fm);
end
end
function OUTPUT_Y = f13_RSR(INPUT_X)

fm = fimath('RoundingMethod', 'Floor', 'OverflowAction', 'Wrap', 'ProductMode', 'FullPrecision', 'MaxProductWordLength', 128, 'SumMode', 'FullPrecision', 'MaxSumWordLength', 128);
% recipricol square root
OUTPUT_Y = fi(fi_div(fi(1, 0, 1, 0, fm), sqrt( INPUT_X )), 0, 24, 25, fm);
end


function c = fi_div(a,b)
coder.inline( 'always' );
if isfi( a ) && isfi( b )
    a1 = fi( a, 'RoundMode', 'fix' );
    b1 = fi( b, 'RoundMode', 'fix' );
    c1 = divide( divideType( a1, b1 ), a1, b1 );
    c = fi( c1, numerictype( c1 ), fimath( a ) );
else
    c = a/b;
end
end


function ntype = divideType(a,b)
coder.inline( 'always' );
nt1 = numerictype( a );
nt2 = numerictype( b );
ntype = numerictype( nt1.Signed || nt2.Signed, nt1.WordLength + nt2.WordLength, (nt1.FractionLength - nt2.FractionLength + nt1.WordLength + nt2.WordLength - max( nt1.WordLength, nt2.WordLength )) );
end
