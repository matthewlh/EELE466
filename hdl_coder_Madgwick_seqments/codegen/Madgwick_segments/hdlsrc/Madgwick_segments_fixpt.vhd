-- -------------------------------------------------------------
-- 

-- File Name: C:\Users\w92p177\Documents\GitHub\EELE466\hdl_coder_Madgwick_seqments\codegen\Madgwick_segments\hdlsrc\Madgwick_segments_fixpt.vhd
-- Created: 2015-04-10 15:04:15
-- 
-- Generated by MATLAB 8.3, MATLAB Coder 2.6 and HDL Coder 3.4
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ceout         1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- q0                            ceout         1
-- q1                            ceout         1
-- q2                            ceout         1
-- q3                            ceout         1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Madgwick_segments_fixpt
-- Source Path: Madgwick_segments_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Madgwick_segments_fixpt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clkenable                         :   IN    std_logic;
        q01                               :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        q11                               :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        q21                               :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        q31                               :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        gx                                :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        gy                                :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        gz                                :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        ax1                               :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        ay1                               :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        az1                               :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        mx1                               :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        my1                               :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        mz1                               :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        ceout                             :   OUT   std_logic;
        q0                                :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        q1                                :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        q2                                :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        q3                                :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En12
        );
END Madgwick_segments_fixpt;


ARCHITECTURE rtl OF Madgwick_segments_fixpt IS

  -- Constants
  CONSTANT One                            : unsigned(1 DOWNTO 0) := to_unsigned(2#10#, 2);  -- ufix2
  CONSTANT C_divbyzero_p                  : unsigned(1 DOWNTO 0) := to_unsigned(2#11#, 2);  -- ufix2

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL q01_signed                       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL q0_1                             : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL q11_signed                       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL q1_1                             : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL q21_signed                       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL q2_1                             : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL q31_signed                       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL q3_1                             : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL gx_signed                        : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL gx_1                             : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL gy_signed                        : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL gy_1                             : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL gz_signed                        : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL gz_1                             : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL ax1_signed                       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL ax_1                             : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL ay1_signed                       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL ay_1                             : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL az1_signed                       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL az_1                             : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL mx1_signed                       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL mx_1                             : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL my1_signed                       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL my_1                             : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL mz1_signed                       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL mz_1                             : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL q0_tmp                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL q1_tmp                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL q2_tmp                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL q3_tmp                           : signed(23 DOWNTO 0);  -- sfix24_En12

BEGIN
  q01_signed <= signed(q01);

  enb <= clkenable;

  in_0_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q0_1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        q0_1 <= q01_signed;
      END IF;
    END IF;
  END PROCESS in_0_pipe_process;


  q11_signed <= signed(q11);

  in_1_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q1_1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        q1_1 <= q11_signed;
      END IF;
    END IF;
  END PROCESS in_1_pipe_process;


  q21_signed <= signed(q21);

  in_2_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q2_1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        q2_1 <= q21_signed;
      END IF;
    END IF;
  END PROCESS in_2_pipe_process;


  q31_signed <= signed(q31);

  in_3_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q3_1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        q3_1 <= q31_signed;
      END IF;
    END IF;
  END PROCESS in_3_pipe_process;


  gx_signed <= signed(gx);

  in_4_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      gx_1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        gx_1 <= gx_signed;
      END IF;
    END IF;
  END PROCESS in_4_pipe_process;


  gy_signed <= signed(gy);

  in_5_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      gy_1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        gy_1 <= gy_signed;
      END IF;
    END IF;
  END PROCESS in_5_pipe_process;


  gz_signed <= signed(gz);

  in_6_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      gz_1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        gz_1 <= gz_signed;
      END IF;
    END IF;
  END PROCESS in_6_pipe_process;


  ax1_signed <= signed(ax1);

  in_7_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ax_1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        ax_1 <= ax1_signed;
      END IF;
    END IF;
  END PROCESS in_7_pipe_process;


  ay1_signed <= signed(ay1);

  in_8_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ay_1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        ay_1 <= ay1_signed;
      END IF;
    END IF;
  END PROCESS in_8_pipe_process;


  az1_signed <= signed(az1);

  in_9_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      az_1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        az_1 <= az1_signed;
      END IF;
    END IF;
  END PROCESS in_9_pipe_process;


  mx1_signed <= signed(mx1);

  in_10_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mx_1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        mx_1 <= mx1_signed;
      END IF;
    END IF;
  END PROCESS in_10_pipe_process;


  my1_signed <= signed(my1);

  in_11_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      my_1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        my_1 <= my1_signed;
      END IF;
    END IF;
  END PROCESS in_11_pipe_process;


  mz1_signed <= signed(mz1);

  in_12_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mz_1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        mz_1 <= mz1_signed;
      END IF;
    END IF;
  END PROCESS in_12_pipe_process;


  Madgwick_segments_fixpt_1_output : PROCESS (q0_1, q1_1, q2_1, q3_1)
    VARIABLE fmo_28 : signed(23 DOWNTO 0);
    VARIABLE fmo_25 : signed(23 DOWNTO 0);
    VARIABLE fmo_26 : signed(23 DOWNTO 0);
    VARIABLE fmo_27 : signed(23 DOWNTO 0);
    VARIABLE dotproduct : unsigned(23 DOWNTO 0);
    VARIABLE cast : signed(23 DOWNTO 0);
    VARIABLE cast_0 : signed(23 DOWNTO 0);
    VARIABLE cast_1 : signed(23 DOWNTO 0);
    VARIABLE cast_2 : signed(23 DOWNTO 0);
    VARIABLE cast_3 : signed(23 DOWNTO 0);
    VARIABLE cast_4 : signed(23 DOWNTO 0);
    VARIABLE cast_5 : signed(23 DOWNTO 0);
    VARIABLE cast_6 : signed(23 DOWNTO 0);
    VARIABLE mul_temp : signed(47 DOWNTO 0);
    VARIABLE add_cast : signed(50 DOWNTO 0);
    VARIABLE mul_temp_0 : signed(47 DOWNTO 0);
    VARIABLE add_cast_0 : signed(50 DOWNTO 0);
    VARIABLE add_temp : signed(50 DOWNTO 0);
    VARIABLE add_cast_1 : signed(51 DOWNTO 0);
    VARIABLE mul_temp_1 : signed(47 DOWNTO 0);
    VARIABLE add_cast_2 : signed(51 DOWNTO 0);
    VARIABLE add_temp_0 : signed(51 DOWNTO 0);
    VARIABLE add_cast_3 : signed(52 DOWNTO 0);
    VARIABLE mul_temp_2 : signed(47 DOWNTO 0);
    VARIABLE add_cast_4 : signed(52 DOWNTO 0);
    VARIABLE add_temp_1 : signed(52 DOWNTO 0);
    VARIABLE cast_7 : unsigned(23 DOWNTO 0);
    VARIABLE cast_8 : signed(24 DOWNTO 0);
    VARIABLE mul_temp_3 : signed(48 DOWNTO 0);
    VARIABLE cast_9 : signed(47 DOWNTO 0);
    VARIABLE cast_10 : unsigned(23 DOWNTO 0);
    VARIABLE cast_11 : signed(24 DOWNTO 0);
    VARIABLE mul_temp_4 : signed(48 DOWNTO 0);
    VARIABLE cast_12 : signed(47 DOWNTO 0);
    VARIABLE cast_13 : unsigned(23 DOWNTO 0);
    VARIABLE cast_14 : signed(24 DOWNTO 0);
    VARIABLE mul_temp_5 : signed(48 DOWNTO 0);
    VARIABLE cast_15 : signed(47 DOWNTO 0);
    VARIABLE cast_16 : unsigned(23 DOWNTO 0);
    VARIABLE cast_17 : signed(24 DOWNTO 0);
    VARIABLE mul_temp_6 : signed(48 DOWNTO 0);
    VARIABLE cast_18 : signed(47 DOWNTO 0);
  BEGIN
    --HDL code generation from MATLAB function: Madgwick_segments_fixpt
    --'Madgwick_segments_fixpt:102' aw = fi(aw*recipNorm, 1, 24, 16, fm);
    --'Madgwick_segments_fixpt:101' az = fi(az*recipNorm, 1, 24, 16, fm);
    --'Madgwick_segments_fixpt:100' ay = fi(ay*recipNorm, 1, 24, 16, fm);
    --'Madgwick_segments_fixpt:99' ax = fi(ax*recipNorm, 1, 24, 17, fm);
    --'Madgwick_segments_fixpt:174' c = fi( c1, numerictype( c1 ), fimath( a ) );
    --'Madgwick_segments_fixpt:173' c1 = divide( divideType( a1, b1 ), a1, b1 );
    --'Madgwick_segments_fixpt:172' b1 = fi( b, 'RoundMode', 'fix' );
    --'Madgwick_segments_fixpt:171' a1 = fi( a, 'RoundMode', 'fix' );
    --'Madgwick_segments_fixpt:170' if isfi( a ) && isfi( b )
    --'Madgwick_segments_fixpt:169' coder.inline( 'always' );
    
--'Madgwick_segments_fixpt:98' recipNorm = fi(fi_div(fi(1, 0, 1, 0, fm), sqrt( dotproduct )), 0, 24, 21, fm);
    --'Madgwick_segments_fixpt:102' aw = fi(aw*recipNorm, 1, 24, 16, fm);
    --'Madgwick_segments_fixpt:101' az = fi(az*recipNorm, 1, 24, 16, fm);
    --'Madgwick_segments_fixpt:100' ay = fi(ay*recipNorm, 1, 24, 16, fm);
    --'Madgwick_segments_fixpt:99' ax = fi(ax*recipNorm, 1, 24, 17, fm);
    --'Madgwick_segments_fixpt:174' c = fi( c1, numerictype( c1 ), fimath( a ) );
    --'Madgwick_segments_fixpt:173' c1 = divide( divideType( a1, b1 ), a1, b1 );
    --'Madgwick_segments_fixpt:172' b1 = fi( b, 'RoundMode', 'fix' );
    --'Madgwick_segments_fixpt:171' a1 = fi( a, 'RoundMode', 'fix' );
    --'Madgwick_segments_fixpt:170' if isfi( a ) && isfi( b )
    --'Madgwick_segments_fixpt:169' coder.inline( 'always' );
    
--'Madgwick_segments_fixpt:98' recipNorm = fi(fi_div(fi(1, 0, 1, 0, fm), sqrt( dotproduct )), 0, 24, 21, fm);
    --'Madgwick_segments_fixpt:102' aw = fi(aw*recipNorm, 1, 24, 16, fm);
    --'Madgwick_segments_fixpt:101' az = fi(az*recipNorm, 1, 24, 16, fm);
    --'Madgwick_segments_fixpt:100' ay = fi(ay*recipNorm, 1, 24, 16, fm);
    --'Madgwick_segments_fixpt:99' ax = fi(ax*recipNorm, 1, 24, 17, fm);
    --'Madgwick_segments_fixpt:174' c = fi( c1, numerictype( c1 ), fimath( a ) );
    --'Madgwick_segments_fixpt:173' c1 = divide( divideType( a1, b1 ), a1, b1 );
    --'Madgwick_segments_fixpt:172' b1 = fi( b, 'RoundMode', 'fix' );
    --'Madgwick_segments_fixpt:171' a1 = fi( a, 'RoundMode', 'fix' );
    --'Madgwick_segments_fixpt:170' if isfi( a ) && isfi( b )
    --'Madgwick_segments_fixpt:169' coder.inline( 'always' );
    
--'Madgwick_segments_fixpt:98' recipNorm = fi(fi_div(fi(1, 0, 1, 0, fm), sqrt( dotproduct )), 0, 24, 21, fm);
    --'Madgwick_segments_fixpt:102' aw = fi(aw*recipNorm, 1, 24, 16, fm);
    --'Madgwick_segments_fixpt:101' az = fi(az*recipNorm, 1, 24, 16, fm);
    --'Madgwick_segments_fixpt:100' ay = fi(ay*recipNorm, 1, 24, 16, fm);
    --'Madgwick_segments_fixpt:99' ax = fi(ax*recipNorm, 1, 24, 17, fm);
    --'Madgwick_segments_fixpt:174' c = fi( c1, numerictype( c1 ), fimath( a ) );
    --'Madgwick_segments_fixpt:173' c1 = divide( divideType( a1, b1 ), a1, b1 );
    --'Madgwick_segments_fixpt:172' b1 = fi( b, 'RoundMode', 'fix' );
    --'Madgwick_segments_fixpt:171' a1 = fi( a, 'RoundMode', 'fix' );
    --'Madgwick_segments_fixpt:170' if isfi( a ) && isfi( b )
    --'Madgwick_segments_fixpt:169' coder.inline( 'always' );
    
--'Madgwick_segments_fixpt:98' recipNorm = fi(fi_div(fi(1, 0, 1, 0, fm), sqrt( dotproduct )), 0, 24, 21, fm);
    --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    --                                                                          %
    --       Generated by MATLAB 8.3, MATLAB Coder 2.6 and HDL Coder 3.4        %
    --                                                                          %
    --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    --=====================================================================================================
    -- Madgwick.m is a direct Matlab port of MadgwickAHRS.c
    --=====================================================================================================
    --
    -- sampleFreq	= 512.0;		% sample frequency in Hz
    -- sampleTime    = 1/sampleFreq;
    -- betaDef		= 0.1;		% 2 * proportional gain
    -- beta = betaDef;     % 2 * proportional gain (Kp)
    --
    -- % quaternion of sensor frame relative to auxiliary frame
    -- q0 = 1.0;
    -- q1 = 0.0;
    -- q2 = 0.0;
    -- q3 = 0.0;
    --
    
--'Madgwick_segments_fixpt:24' fm = fimath('RoundingMethod', 'Floor', 'OverflowAction', 'Wrap', 'ProductMode', 'FullPrecision', 'MaxProductWordLength', 128, 'SumMode', 'FullPrecision', 'MaxSumWordLength', 128);
    --'Madgwick_segments_fixpt:26' ax = fi(ax_1, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:27' ay = fi(ay_1, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:28' az = fi(az_1, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:29' mx = fi(mx_1, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:30' my = fi(my_1, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:31' mz = fi(mz_1, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:32' q0 = fi(q0_1, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:33' q1 = fi(q1_1, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:34' q2 = fi(q2_1, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:35' q3 = fi(q3_1, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:37' sampleFreq = fi(512.0, 0, 10, 0, fm);
    -- sample frequency in Hz
    --'Madgwick_segments_fixpt:39' sampleTime = fi(fi_div(fi(1, 0, 1, 0, fm), sampleFreq), 0, 24, 12, fm);
    --'Madgwick_segments_fixpt:40' betaDef = fi(0.1, 0, 24, 12, fm);
    -- 2 * proportional gain
    --'Madgwick_segments_fixpt:41' beta = fi(betaDef, 0, 24, 12, fm);
    -- 2 * proportional gain (Kp)
    
--'Madgwick_segments_fixpt:42' [fmo_1,fmo_2,fmo_3,fmo_4] = f10_Madgwick_qDot( q0, q1, q2, q3, gx, gy, gz );
    
--'Madgwick_segments_fixpt:80' fm = fimath('RoundingMethod', 'Floor', 'OverflowAction', 'Wrap', 'ProductMode', 'FullPrecision', 'MaxProductWordLength', 128, 'SumMode', 'FullPrecision', 'MaxSumWordLength', 128);
    -- Rate of change of quaternion from gyroscope
    
--'Madgwick_segments_fixpt:82' qDot1 = fi(fi(0.5, 0, 24, 24, fm)*(fi_signed(fi_signed(fi_uminus(q1)*gx) - q2*gy) - q3*gz), 1, 24, 17, fm);
    --'Madgwick_segments_fixpt:202' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:203' if isfi( a )
    --'Madgwick_segments_fixpt:204' nt = numerictype( a );
    --'Madgwick_segments_fixpt:205' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
    --'Madgwick_segments_fixpt:206' y = -fi( a, new_nt, fimath( a ) );
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    
--'Madgwick_segments_fixpt:83' qDot2 = fi(fi(0.5, 0, 24, 24, fm)*(fi_signed(q0*gx + q2*gz) - q3*gy), 1, 24, 17, fm);
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    
--'Madgwick_segments_fixpt:84' qDot3 = fi(fi(0.5, 0, 24, 24, fm)*(fi_signed(q0*gy) - q1*gz + q3*gx), 1, 24, 17, fm);
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    
--'Madgwick_segments_fixpt:85' qDot4 = fi(fi(0.5, 0, 24, 24, fm)*(fi_signed(q0*gz + q1*gy) - q2*gx), 1, 24, 17, fm);
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:43' qDot1 = fi(fmo_1, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:44' qDot2 = fi(fmo_2, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:45' qDot3 = fi(fmo_3, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:46' qDot4 = fi(fmo_4, 1, 24, 12, fm);
    
--'Madgwick_segments_fixpt:47' [fmo_5,fmo_6,fmo_7,fmo_8] = f14_Madgwick_normalize( ax, ay, az, fi(0, 0, 1, 0, fm) );
    
--'Madgwick_segments_fixpt:89' fm = fimath('RoundingMethod', 'Floor', 'OverflowAction', 'Wrap', 'ProductMode', 'FullPrecision', 'MaxProductWordLength', 128, 'SumMode', 'FullPrecision', 'MaxSumWordLength', 128);
    --'Madgwick_segments_fixpt:91' aw = fi(aw_1, 1, 24, 16, fm);
    --'Madgwick_segments_fixpt:92' ax = fi(ax_1, 1, 24, 17, fm);
    --'Madgwick_segments_fixpt:93' ay = fi(ay_1, 1, 24, 16, fm);
    --'Madgwick_segments_fixpt:94' az = fi(az_1, 1, 24, 16, fm);
    --'Madgwick_segments_fixpt:96' dotproduct = fi(ax*ax + ay*ay + az*az + aw*aw, 0, 24, 9, fm);
    --'Madgwick_segments_fixpt:97' if dotproduct~=fi(0, 0, 1, 0, fm)
    --'Madgwick_segments_fixpt:48' ax = fi(fmo_5, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:49' ay = fi(fmo_6, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:50' az = fi(fmo_7, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:51' unused1 = fi(fmo_8, 0, 1, 0, fm);
    
--'Madgwick_segments_fixpt:52' [fmo_9,fmo_10,fmo_11,fmo_12] = f14_Madgwick_normalize( mx, my, mz, fi(0, 0, 1, 0, fm) );
    
--'Madgwick_segments_fixpt:89' fm = fimath('RoundingMethod', 'Floor', 'OverflowAction', 'Wrap', 'ProductMode', 'FullPrecision', 'MaxProductWordLength', 128, 'SumMode', 'FullPrecision', 'MaxSumWordLength', 128);
    --'Madgwick_segments_fixpt:91' aw = fi(aw_1, 1, 24, 16, fm);
    --'Madgwick_segments_fixpt:92' ax = fi(ax_1, 1, 24, 17, fm);
    --'Madgwick_segments_fixpt:93' ay = fi(ay_1, 1, 24, 16, fm);
    --'Madgwick_segments_fixpt:94' az = fi(az_1, 1, 24, 16, fm);
    --'Madgwick_segments_fixpt:96' dotproduct = fi(ax*ax + ay*ay + az*az + aw*aw, 0, 24, 9, fm);
    --'Madgwick_segments_fixpt:97' if dotproduct~=fi(0, 0, 1, 0, fm)
    --'Madgwick_segments_fixpt:53' mx = fi(fmo_9, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:54' my = fi(fmo_10, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:55' mz = fi(fmo_11, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:56' unused1 = fi(fmo_12, 0, 1, 0, fm);
    
--'Madgwick_segments_fixpt:57' [fmo_13,fmo_14,fmo_15,fmo_16] = f15_Madgwick_correction( q0, q1, q2, q3, ax, ay, az, mx, my, mz );
    
--'Madgwick_segments_fixpt:107' fm = fimath('RoundingMethod', 'Floor', 'OverflowAction', 'Wrap', 'ProductMode', 'FullPrecision', 'MaxProductWordLength', 128, 'SumMode', 'FullPrecision', 'MaxSumWordLength', 128);
    -- Auxiliary variables to avoid repeated arithmetic
    --'Madgwick_segments_fixpt:109' v2q0mx = fi(fi(2.0, 0, 2, 0, fm)*q0*mx, 1, 24, 22, fm);
    --'Madgwick_segments_fixpt:110' v2q0my = fi(fi(2.0, 0, 2, 0, fm)*q0*my, 1, 24, 22, fm);
    --'Madgwick_segments_fixpt:111' v2q0mz = fi(fi(2.0, 0, 2, 0, fm)*q0*mz, 1, 24, 22, fm);
    --'Madgwick_segments_fixpt:112' v2q1mx = fi(fi(2.0, 0, 2, 0, fm)*q1*mx, 1, 24, 22, fm);
    --'Madgwick_segments_fixpt:113' v2q0 = fi(fi(2.0, 0, 2, 0, fm)*q0, 0, 24, 23, fm);
    --'Madgwick_segments_fixpt:114' v2q1 = fi(fi(2.0, 0, 2, 0, fm)*q1, 0, 24, 23, fm);
    --'Madgwick_segments_fixpt:115' v2q2 = fi(fi(2.0, 0, 2, 0, fm)*q2, 0, 24, 23, fm);
    --'Madgwick_segments_fixpt:116' v2q3 = fi(fi(2.0, 0, 2, 0, fm)*q3, 0, 24, 23, fm);
    --'Madgwick_segments_fixpt:117' v2q0q2 = fi(fi(2.0, 0, 2, 0, fm)*q0*q2, 0, 24, 23, fm);
    --'Madgwick_segments_fixpt:118' v2q2q3 = fi(fi(2.0, 0, 2, 0, fm)*q2*q3, 0, 24, 23, fm);
    --'Madgwick_segments_fixpt:119' q0q0 = fi(q0*q0, 0, 24, 24, fm);
    --'Madgwick_segments_fixpt:120' q0q1 = fi(q0*q1, 0, 24, 24, fm);
    --'Madgwick_segments_fixpt:121' q0q2 = fi(q0*q2, 0, 24, 24, fm);
    --'Madgwick_segments_fixpt:122' q0q3 = fi(q0*q3, 0, 24, 24, fm);
    --'Madgwick_segments_fixpt:123' q1q1 = fi(q1*q1, 0, 24, 24, fm);
    --'Madgwick_segments_fixpt:124' q1q2 = fi(q1*q2, 0, 24, 24, fm);
    --'Madgwick_segments_fixpt:125' q1q3 = fi(q1*q3, 0, 24, 24, fm);
    --'Madgwick_segments_fixpt:126' q2q2 = fi(q2*q2, 0, 24, 24, fm);
    --'Madgwick_segments_fixpt:127' q2q3 = fi(q2*q3, 0, 24, 24, fm);
    --'Madgwick_segments_fixpt:128' q3q3 = fi(q3*q3, 0, 24, 24, fm);
    -- Reference direction of Earth's magnetic field
    
--'Madgwick_segments_fixpt:130' hx = fi(fi_signed(fi_signed(fi_signed(mx*q0q0) - v2q0my*q3 + v2q0mz*q2 + mx*q1q1 + v2q1*my*q2 + v2q1*mz*q3) - mx*q2q2) - mx*q3q3, 1, 24, 21, fm);
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    
--'Madgwick_segments_fixpt:131' hy = fi(fi_signed(fi_signed(fi_signed(v2q0mx*q3 + my*q0q0) - v2q0mz*q1 + v2q1mx*q2) - my*q1q1 + my*q2q2 + v2q2*mz*q3) - my*q3q3, 1, 24, 21, fm);
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:132' v2bx = fi(sqrt( hx*hx + hy*hy ), 0, 24, 22, fm);
    
--'Madgwick_segments_fixpt:133' v2bz = fi(fi_signed(fi_signed(fi_uminus(v2q0mx)*q2 + v2q0my*q1 + mz*q0q0 + v2q1mx*q3) - mz*q1q1 + v2q2*my*q3) - mz*q2q2 + mz*q3q3, 1, 24, 21, fm);
    --'Madgwick_segments_fixpt:202' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:203' if isfi( a )
    --'Madgwick_segments_fixpt:204' nt = numerictype( a );
    --'Madgwick_segments_fixpt:205' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
    --'Madgwick_segments_fixpt:206' y = -fi( a, new_nt, fimath( a ) );
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:134' v4bx = fi(fi(2.0, 0, 2, 0, fm)*v2bx, 0, 24, 21, fm);
    --'Madgwick_segments_fixpt:135' v4bz = fi(fi(2.0, 0, 2, 0, fm)*v2bz, 1, 24, 20, fm);
    -- Gradient decent algorithm corrective step
    
--'Madgwick_segments_fixpt:137' s0 = fi(fi_signed(fi_uminus(v2q2)*(fi_signed(fi_signed(fi(2.0, 0, 2, 0, fm)*q1q3) - v2q0q2) - ax) + v2q1*(fi_signed(fi(2.0, 0, 2, 0, fm)*q0q1 + v2q2q3) - ay)) - v2bz*q2*(fi_signed(v2bx*(fi_signed(fi_signed(fi(0.5, 0, 24, 24, fm)) - q2q2) - q3q3) + v2bz*(fi_signed(q1q3) - q0q2)) - mx) + (fi_uminus(v2bx)*q3 + v2bz*q1)*(fi_signed(v2bx*(fi_signed(q1q2) - q0q3) + v2bz*(q0q1 + q2q3)) - my) + v2bx*q2*(fi_signed(v2bx*(q0q2 + q1q3) + v2bz*(fi_signed(fi_signed(fi(0.5, 0, 24, 24, fm)) - q1q1) - q2q2)) - mz), 1, 24, 17, fm);
    --'Madgwick_segments_fixpt:202' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:203' if isfi( a )
    --'Madgwick_segments_fixpt:204' nt = numerictype( a );
    --'Madgwick_segments_fixpt:205' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
    --'Madgwick_segments_fixpt:206' y = -fi( a, new_nt, fimath( a ) );
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:192' nt = numerictype( a );
    --'Madgwick_segments_fixpt:193' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
    --'Madgwick_segments_fixpt:194' y = fi( a, new_nt, fimath( a ) );
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:192' nt = numerictype( a );
    --'Madgwick_segments_fixpt:193' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
    --'Madgwick_segments_fixpt:194' y = fi( a, new_nt, fimath( a ) );
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:192' nt = numerictype( a );
    --'Madgwick_segments_fixpt:193' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
    --'Madgwick_segments_fixpt:194' y = fi( a, new_nt, fimath( a ) );
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:202' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:203' if isfi( a )
    --'Madgwick_segments_fixpt:204' nt = numerictype( a );
    --'Madgwick_segments_fixpt:205' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
    --'Madgwick_segments_fixpt:206' y = -fi( a, new_nt, fimath( a ) );
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:192' nt = numerictype( a );
    --'Madgwick_segments_fixpt:193' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
    --'Madgwick_segments_fixpt:194' y = fi( a, new_nt, fimath( a ) );
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    
--'Madgwick_segments_fixpt:138' s1 = fi(fi_signed(v2q3*(fi_signed(fi_signed(fi(2.0, 0, 2, 0, fm)*q1q3) - v2q0q2) - ax) + v2q0*(fi_signed(fi(2.0, 0, 2, 0, fm)*q0q1 + v2q2q3) - ay)) - fi(4.0, 0, 3, 0, fm)*q1*(fi_signed(fi_signed(fi_signed(fi(1, 0, 1, 0, fm)) - fi(2.0, 0, 2, 0, fm)*q1q1) - fi(2.0, 0, 2, 0, fm)*q2q2) - az) + v2bz*q3*(fi_signed(v2bx*(fi_signed(fi_signed(fi(0.5, 0, 24, 24, fm)) - q2q2) - q3q3) + v2bz*(fi_signed(q1q3) - q0q2)) - mx) + (v2bx*q2 + v2bz*q0)*(fi_signed(v2bx*(fi_signed(q1q2) - q0q3) + v2bz*(q0q1 + q2q3)) - my) + (fi_signed(v2bx*q3) - v4bz*q1)*(fi_signed(v2bx*(q0q2 + q1q3) + v2bz*(fi_signed(fi_signed(fi(0.5, 0, 24, 24, fm)) - q1q1) - q2q2)) - mz), 1, 24, 16, fm);
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:192' nt = numerictype( a );
    --'Madgwick_segments_fixpt:193' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
    --'Madgwick_segments_fixpt:194' y = fi( a, new_nt, fimath( a ) );
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:192' nt = numerictype( a );
    --'Madgwick_segments_fixpt:193' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
    --'Madgwick_segments_fixpt:194' y = fi( a, new_nt, fimath( a ) );
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:192' nt = numerictype( a );
    --'Madgwick_segments_fixpt:193' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
    --'Madgwick_segments_fixpt:194' y = fi( a, new_nt, fimath( a ) );
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:192' nt = numerictype( a );
    --'Madgwick_segments_fixpt:193' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
    --'Madgwick_segments_fixpt:194' y = fi( a, new_nt, fimath( a ) );
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    
--'Madgwick_segments_fixpt:139' s2 = fi(fi_signed(fi_uminus(v2q0)*(fi_signed(fi_signed(fi(2.0, 0, 2, 0, fm)*q1q3) - v2q0q2) - ax) + v2q3*(fi_signed(fi(2.0, 0, 2, 0, fm)*q0q1 + v2q2q3) - ay)) - fi(4.0, 0, 3, 0, fm)*q2*(fi_signed(fi_signed(fi_signed(fi(1, 0, 1, 0, fm)) - fi(2.0, 0, 2, 0, fm)*q1q1) - fi(2.0, 0, 2, 0, fm)*q2q2) - az) + (fi_signed(fi_uminus(v4bx)*q2) - v2bz*q0)*(fi_signed(v2bx*(fi_signed(fi_signed(fi(0.5, 0, 24, 24, fm)) - q2q2) - q3q3) + v2bz*(fi_signed(q1q3) - q0q2)) - mx) + (v2bx*q1 + v2bz*q3)*(fi_signed(v2bx*(fi_signed(q1q2) - q0q3) + v2bz*(q0q1 + q2q3)) - my) + (fi_signed(v2bx*q0) - v4bz*q2)*(fi_signed(v2bx*(q0q2 + q1q3) + v2bz*(fi_signed(fi_signed(fi(0.5, 0, 24, 24, fm)) - q1q1) - q2q2)) - mz), 1, 24, 16, fm);
    --'Madgwick_segments_fixpt:202' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:203' if isfi( a )
    --'Madgwick_segments_fixpt:204' nt = numerictype( a );
    --'Madgwick_segments_fixpt:205' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
    --'Madgwick_segments_fixpt:206' y = -fi( a, new_nt, fimath( a ) );
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:192' nt = numerictype( a );
    --'Madgwick_segments_fixpt:193' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
    --'Madgwick_segments_fixpt:194' y = fi( a, new_nt, fimath( a ) );
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:192' nt = numerictype( a );
    --'Madgwick_segments_fixpt:193' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
    --'Madgwick_segments_fixpt:194' y = fi( a, new_nt, fimath( a ) );
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:202' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:203' if isfi( a )
    --'Madgwick_segments_fixpt:204' nt = numerictype( a );
    --'Madgwick_segments_fixpt:205' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
    --'Madgwick_segments_fixpt:206' y = -fi( a, new_nt, fimath( a ) );
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:192' nt = numerictype( a );
    --'Madgwick_segments_fixpt:193' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
    --'Madgwick_segments_fixpt:194' y = fi( a, new_nt, fimath( a ) );
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:192' nt = numerictype( a );
    --'Madgwick_segments_fixpt:193' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
    --'Madgwick_segments_fixpt:194' y = fi( a, new_nt, fimath( a ) );
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    
--'Madgwick_segments_fixpt:140' s3 = fi(v2q1*(fi_signed(fi_signed(fi(2.0, 0, 2, 0, fm)*q1q3) - v2q0q2) - ax) + v2q2*(fi_signed(fi(2.0, 0, 2, 0, fm)*q0q1 + v2q2q3) - ay) + (fi_uminus(v4bx)*q3 + v2bz*q1)*(fi_signed(v2bx*(fi_signed(fi_signed(fi(0.5, 0, 24, 24, fm)) - q2q2) - q3q3) + v2bz*(fi_signed(q1q3) - q0q2)) - mx) + (fi_uminus(v2bx)*q0 + v2bz*q2)*(fi_signed(v2bx*(fi_signed(q1q2) - q0q3) + v2bz*(q0q1 + q2q3)) - my) + v2bx*q1*(fi_signed(v2bx*(q0q2 + q1q3) + v2bz*(fi_signed(fi_signed(fi(0.5, 0, 24, 24, fm)) - q1q1) - q2q2)) - mz), 1, 24, 16, fm);
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:192' nt = numerictype( a );
    --'Madgwick_segments_fixpt:193' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
    --'Madgwick_segments_fixpt:194' y = fi( a, new_nt, fimath( a ) );
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:192' nt = numerictype( a );
    --'Madgwick_segments_fixpt:193' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
    --'Madgwick_segments_fixpt:194' y = fi( a, new_nt, fimath( a ) );
    --'Madgwick_segments_fixpt:202' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:203' if isfi( a )
    --'Madgwick_segments_fixpt:204' nt = numerictype( a );
    --'Madgwick_segments_fixpt:205' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
    --'Madgwick_segments_fixpt:206' y = -fi( a, new_nt, fimath( a ) );
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:192' nt = numerictype( a );
    --'Madgwick_segments_fixpt:193' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
    --'Madgwick_segments_fixpt:194' y = fi( a, new_nt, fimath( a ) );
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:202' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:203' if isfi( a )
    --'Madgwick_segments_fixpt:204' nt = numerictype( a );
    --'Madgwick_segments_fixpt:205' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
    --'Madgwick_segments_fixpt:206' y = -fi( a, new_nt, fimath( a ) );
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:192' nt = numerictype( a );
    --'Madgwick_segments_fixpt:193' new_nt = numerictype( 1, nt.WordLength + 1, nt.FractionLength );
    --'Madgwick_segments_fixpt:194' y = fi( a, new_nt, fimath( a ) );
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:190' coder.inline( 'always' );
    --'Madgwick_segments_fixpt:191' if isfi( a ) && ~(issigned( a ))
    --'Madgwick_segments_fixpt:195' else
    --'Madgwick_segments_fixpt:196' y = a;
    --'Madgwick_segments_fixpt:58' s0 = fi(fmo_13, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:59' s1 = fi(fmo_14, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:60' s2 = fi(fmo_15, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:61' s3 = fi(fmo_16, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:62' [fmo_17,fmo_18,fmo_19,fmo_20] = f14_Madgwick_normalize( s0, s1, s2, s3 );
    
--'Madgwick_segments_fixpt:89' fm = fimath('RoundingMethod', 'Floor', 'OverflowAction', 'Wrap', 'ProductMode', 'FullPrecision', 'MaxProductWordLength', 128, 'SumMode', 'FullPrecision', 'MaxSumWordLength', 128);
    --'Madgwick_segments_fixpt:91' aw = fi(aw_1, 1, 24, 16, fm);
    --'Madgwick_segments_fixpt:92' ax = fi(ax_1, 1, 24, 17, fm);
    --'Madgwick_segments_fixpt:93' ay = fi(ay_1, 1, 24, 16, fm);
    --'Madgwick_segments_fixpt:94' az = fi(az_1, 1, 24, 16, fm);
    --'Madgwick_segments_fixpt:96' dotproduct = fi(ax*ax + ay*ay + az*az + aw*aw, 0, 24, 9, fm);
    --'Madgwick_segments_fixpt:97' if dotproduct~=fi(0, 0, 1, 0, fm)
    --'Madgwick_segments_fixpt:63' s0 = fi(fmo_17, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:64' s1 = fi(fmo_18, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:65' s2 = fi(fmo_19, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:66' s3 = fi(fmo_20, 1, 24, 12, fm);
    
--'Madgwick_segments_fixpt:67' [fmo_21,fmo_22,fmo_23,fmo_24] = f16_Madgwick_update( q0, q1, q2, q3, qDot1, qDot2, qDot3, qDot4, s0, s1, s2, s3, beta, sampleTime );
    
--'Madgwick_segments_fixpt:144' fm = fimath('RoundingMethod', 'Floor', 'OverflowAction', 'Wrap', 'ProductMode', 'FullPrecision', 'MaxProductWordLength', 128, 'SumMode', 'FullPrecision', 'MaxSumWordLength', 128);
    --'Madgwick_segments_fixpt:146' q0 = fi(q0_1, 1, 24, 22, fm);
    --'Madgwick_segments_fixpt:147' q1 = fi(q1_1, 1, 24, 22, fm);
    --'Madgwick_segments_fixpt:148' q2 = fi(q2_1, 1, 24, 22, fm);
    --'Madgwick_segments_fixpt:149' q3 = fi(q3_1, 1, 24, 22, fm);
    --'Madgwick_segments_fixpt:150' qDot1 = fi(qDot1_1, 1, 24, 17, fm);
    --'Madgwick_segments_fixpt:151' qDot2 = fi(qDot2_1, 1, 24, 17, fm);
    --'Madgwick_segments_fixpt:152' qDot3 = fi(qDot3_1, 1, 24, 17, fm);
    --'Madgwick_segments_fixpt:153' qDot4 = fi(qDot4_1, 1, 24, 17, fm);
    -- Apply feedback step
    --'Madgwick_segments_fixpt:156' qDot1 = fi(qDot1 - beta*s0, 1, 24, 17, fm);
    --'Madgwick_segments_fixpt:157' qDot2 = fi(qDot2 - beta*s1, 1, 24, 17, fm);
    --'Madgwick_segments_fixpt:158' qDot3 = fi(qDot3 - beta*s2, 1, 24, 17, fm);
    --'Madgwick_segments_fixpt:159' qDot4 = fi(qDot4 - beta*s3, 1, 24, 17, fm);
    -- Integrate rate of change of quaternion to yield quaternion
    --'Madgwick_segments_fixpt:161' q0 = fi(q0 + qDot1*sampleTime, 1, 24, 22, fm);
    --'Madgwick_segments_fixpt:162' q1 = fi(q1 + qDot2*sampleTime, 1, 24, 22, fm);
    --'Madgwick_segments_fixpt:163' q2 = fi(q2 + qDot3*sampleTime, 1, 24, 22, fm);
    --'Madgwick_segments_fixpt:164' q3 = fi(q3 + qDot4*sampleTime, 1, 24, 22, fm);
    --'Madgwick_segments_fixpt:68' q0 = fi(fmo_21, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:69' q1 = fi(fmo_22, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:70' q2 = fi(fmo_23, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:71' q3 = fi(fmo_24, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:72' [fmo_25,fmo_26,fmo_27,fmo_28] = f14_Madgwick_normalize( q0, q1, q2, q3 );
    
--'Madgwick_segments_fixpt:89' fm = fimath('RoundingMethod', 'Floor', 'OverflowAction', 'Wrap', 'ProductMode', 'FullPrecision', 'MaxProductWordLength', 128, 'SumMode', 'FullPrecision', 'MaxSumWordLength', 128);
    --'Madgwick_segments_fixpt:91' aw = fi(aw_1, 1, 24, 16, fm);
    cast := q3_1(13 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
    cast_0 := resize(cast(23 DOWNTO 10), 24);
    fmo_28 := cast_0(19 DOWNTO 0) & '0' & '0' & '0' & '0';
    --'Madgwick_segments_fixpt:92' ax = fi(ax_1, 1, 24, 17, fm);
    cast_1 := q0_1(13 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
    cast_2 := resize(cast_1(23 DOWNTO 10), 24);
    fmo_25 := cast_2(18 DOWNTO 0) & '0' & '0' & '0' & '0' & '0';
    --'Madgwick_segments_fixpt:93' ay = fi(ay_1, 1, 24, 16, fm);
    cast_3 := q1_1(13 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
    cast_4 := resize(cast_3(23 DOWNTO 10), 24);
    fmo_26 := cast_4(19 DOWNTO 0) & '0' & '0' & '0' & '0';
    --'Madgwick_segments_fixpt:94' az = fi(az_1, 1, 24, 16, fm);
    cast_5 := q2_1(13 DOWNTO 0) & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
    cast_6 := resize(cast_5(23 DOWNTO 10), 24);
    fmo_27 := cast_6(19 DOWNTO 0) & '0' & '0' & '0' & '0';
    --'Madgwick_segments_fixpt:96' dotproduct = fi(ax*ax + ay*ay + az*az + aw*aw, 0, 24, 9, fm);
    mul_temp := fmo_25 * fmo_25;
    add_cast := resize(mul_temp, 51);
    mul_temp_0 := fmo_26 * fmo_26;
    add_cast_0 := resize(mul_temp_0 & '0' & '0', 51);
    add_temp := add_cast + add_cast_0;
    add_cast_1 := resize(add_temp, 52);
    mul_temp_1 := fmo_27 * fmo_27;
    add_cast_2 := resize(mul_temp_1 & '0' & '0', 52);
    add_temp_0 := add_cast_1 + add_cast_2;
    add_cast_3 := resize(add_temp_0, 53);
    mul_temp_2 := fmo_28 * fmo_28;
    add_cast_4 := resize(mul_temp_2 & '0' & '0', 53);
    add_temp_1 := add_cast_3 + add_cast_4;
    dotproduct := unsigned(add_temp_1(48 DOWNTO 25));
    --'Madgwick_segments_fixpt:97' if dotproduct~=fi(0, 0, 1, 0, fm)
    IF dotproduct /= 0 THEN 
      cast_7 := to_unsigned(16#000000#, 24);
      cast_8 := signed(resize(cast_7, 25));
      mul_temp_3 := fmo_25 * cast_8;
      cast_9 := mul_temp_3(47 DOWNTO 0);
      fmo_25 := cast_9(44 DOWNTO 21);
    END IF;
    IF dotproduct /= 0 THEN 
      cast_10 := to_unsigned(16#000000#, 24);
      cast_11 := signed(resize(cast_10, 25));
      mul_temp_4 := fmo_26 * cast_11;
      cast_12 := mul_temp_4(47 DOWNTO 0);
      fmo_26 := cast_12(44 DOWNTO 21);
    END IF;
    IF dotproduct /= 0 THEN 
      cast_13 := to_unsigned(16#000000#, 24);
      cast_14 := signed(resize(cast_13, 25));
      mul_temp_5 := fmo_27 * cast_14;
      cast_15 := mul_temp_5(47 DOWNTO 0);
      fmo_27 := cast_15(44 DOWNTO 21);
    END IF;
    IF dotproduct /= 0 THEN 
      cast_16 := to_unsigned(16#000000#, 24);
      cast_17 := signed(resize(cast_16, 25));
      mul_temp_6 := fmo_28 * cast_17;
      cast_18 := mul_temp_6(47 DOWNTO 0);
      fmo_28 := cast_18(44 DOWNTO 21);
    END IF;
    --'Madgwick_segments_fixpt:73' q0 = fi(fmo_25, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:74' q1 = fi(fmo_26, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:75' q2 = fi(fmo_27, 1, 24, 12, fm);
    --'Madgwick_segments_fixpt:76' q3 = fi(fmo_28, 1, 24, 12, fm);
    q0_tmp <= resize(fmo_25(23 DOWNTO 5), 24);
    q1_tmp <= resize(fmo_26(23 DOWNTO 4), 24);
    q2_tmp <= resize(fmo_27(23 DOWNTO 4), 24);
    q3_tmp <= resize(fmo_28(23 DOWNTO 4), 24);
  END PROCESS Madgwick_segments_fixpt_1_output;


  q0 <= std_logic_vector(q0_tmp);

  q1 <= std_logic_vector(q1_tmp);

  q2 <= std_logic_vector(q2_tmp);

  q3 <= std_logic_vector(q3_tmp);

  ceout <= clkenable;

END rtl;

